{"version":3,"sources":["components/theme/Footer/index.jsx","assets/illustration/students.svg","assets/illustration/Teacher.svg","hooks/useMedia.js","providers/ThemeProvider.jsx","hooks/useDarkMode.js","assets/illustration/parents.svg","assets/icons/sun.svg","assets/icons/moon.svg","assets/colorsPallete/index.js","components/theme/Footer sync /^.*$","components/theme/Footer/icons/favicon.ico","components/theme/Footer/icons/github.svg","components/theme/Footer/icons/stackoverflow.svg","components/theme/Footer/icons/telegram.svg","assets/defaultImages/defaultImage.png","components/theme/Footer/icons/twitter.svg","components/theme/Footer/styles.js","components/common/Layout/styles.js","components/common/Layout/index.jsx","components/common/Container/index.js","components/common/Card/index.js","components/common/Button/index.js","components/common/Input/index.js","components/common/Calendar/event.js","components/common/Calendar/index.jsx","components/common/noticeBoard/noticeData.js","components/common/noticeBoard/styles.js","components/common/noticeBoard/index.jsx","components/common/Charts/index.jsx","components/common/Grid/index.js","components/common/Select/index.js","components/common/Table/index.js","components/common/Error/styles.js","components/common/urlTitle/index.js","components/modules/Admin/Dashboard/styles.js","components/modules/Admin/Dashboard/index.jsx","components/modules/Admin/styles.js","components/theme/Header/NavbarLinks/styles.js","components/theme/Header/NavbarLinks/index.jsx","components/theme/Header/Navbar/styles.js","components/theme/Header/ToggleTheme/styles.js","components/theme/Header/ToggleTheme/index.jsx","components/theme/Header/Navbar/index.jsx","components/theme/Header/Hamburger/styles.js","components/theme/Header/Hamburger/index.jsx","components/theme/Header/Sidebar/styles.js","components/theme/Header/Sidebar/index.jsx","components/theme/Header/styles.js","components/modules/BrowserSiteOutput/styles.js","components/modules/BrowserSiteOutput/index.jsx","components/theme/Header/index.jsx","components/common/languages/languages.jsx","components/modules/Admin/Sections/addNewSection/styles.js","components/modules/Admin/Sections/addNewSection/index.jsx","components/modules/Admin/Sections/AllSections/styles.js","components/modules/Admin/Sections/AllSections/index.jsx","components/modules/Admin/Subject/AddNewSubject/styles.js","components/modules/Admin/Subject/AddNewSubject/index.jsx","components/modules/Admin/Subject/AllSubjects/styles.js","components/modules/Admin/Subject/AllSubjects/index.jsx","components/modules/Admin/Subject/assignSubjectToClass/styles.js","components/modules/Admin/Subject/assignSubjectToClass/index.jsx","components/modules/Admin/Subject/SubjectClassTable/styles.js","components/modules/Admin/Subject/SubjectClassTable/index.jsx","components/modules/Admin/Classes/AddNewClass/styles.js","components/modules/Admin/Classes/AddNewClass/index.jsx","components/modules/Admin/Classes/AllClasses/index.jsx","components/modules/Admin/GeneralInput/GeneralInputForm/styles.js","components/modules/Admin/GeneralInput/GeneralInputForm/index.jsx","components/modules/Admin/GeneralInput/index.jsx","components/imageConverter/imageconvert.js","components/modules/Admin/Teacher/teacherSchema.js","components/modules/Admin/Teacher/TeacherDetails/styles.js","components/modules/Admin/Teacher/TeacherDetails/index.jsx","components/modules/Admin/Teacher/AllTeacher/index.jsx","components/modules/Admin/Teacher/styles.js","components/modules/Admin/Teacher/teacherFile/teacherSchema.js","components/modules/Admin/Teacher/teacherFile/personalInfo.js","components/modules/Admin/Teacher/teacherFile/professionalInfo.js","components/modules/Admin/Teacher/teacherFile/EmergencyInfo.js","components/modules/Admin/Teacher/AddStaff/index.jsx","components/modules/Admin/Teacher/TeacherClassSubject/styles.js","components/modules/Admin/Teacher/TeacherClassSubject/index.jsx","components/modules/Admin/Student/StudentDetails/styles.js","components/modules/Admin/Student/studentFormschema.js","components/modules/Admin/Student/StudentDetails/studentPersonalDetails.jsx","components/modules/Admin/ReportCard/ReportTemplate/styles.js","components/modules/Admin/ReportCard/ReportTemplate/test.js","components/modules/Admin/ReportCard/ReportTemplate/index.jsx","components/modules/Admin/Student/StudentDetails/index.jsx","components/modules/Admin/Student/AllStudents/index.jsx","components/modules/Admin/Student/AdmissionForm/index.jsx","components/modules/Admin/Student/StudentClassSubject/styles.js","components/modules/Admin/Student/StudentClassSubject/index.jsx","components/modules/Admin/Parents/studentFormschema.js","components/modules/Admin/Parents/AddParent/index.jsx","components/modules/Admin/Parents/ParentDetail/index.jsx","components/modules/Admin/index.js","App.js","serviceWorker.js","index.js"],"names":["Footer","theme","useContext","ThemeContext","as","Container","number","social","map","id","name","link","icon","key","href","target","rel","aria-label","width","src","require","alt","module","exports","useMedia","queries","values","defaultValue","useState","value","setValue","useEffect","mediaQueryLists","q","window","matchMedia","getValue","index","findIndex","mql","matches","handler","forEach","addListener","removeListener","createContext","children","setTheme","console","log","prefersDarkMode","localTheme","localStorage","getItem","setItem","useDarkMode","toggleTheme","Provider","HEADER_PRIMARY_COLOR","PRIMARY_COLOR","SECONDARY_COLOR","breadCrumb_COLOR","UrlTitle_color","WHITE_HEADER_COLOR","BLACK_HEADER_COLOR","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Wrapper","styled","div","Grid","Flex","Links","Details","FooterContainer","Global","createGlobalStyle","Box","Brand","Layout","location","useLocation","to","pathname","Card","scroll","height","margin","CardTitle","h4","CardImg","img","CardBody","h5","Button","button","backgroundColor","padding","color","secondary","Input","input","error","Date","desc","locales","localizer","dateFnsLocalizer","format","parse","startOfWeek","getDay","Agenda","props","events","event","startAccessor","endAccessor","NoticeData","label","date","notice","noticeOwner","period","formatDistance","subDays","List","ul","NoticeBoard","Fragment","noticeInfo","className","data","Day","expenses","Earning","Total","Barchart","stackOffset","style","zIndex","top","right","left","bottom","strokeDasharray","dataKey","y","stroke","nameKey","fill","stackId","entry","border","xs","m_xs","sm","m_sm","md","m_md","lg","m_lg","xl","m_xl","Select","select","Table","table","TableHeader","thead","TableHead","th","TableRow","tr","TableData","td","TableBody","tbody","TableFooter","tfoot","display","UrlTitle","h3","item","spacing","container","student","CardContent","staff","parent","desktop","MinusSquare","SvgIcon","fontSize","d","PlusSquare","CloseSquare","NavbarLinks","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultEndIcon","TreeItem","nodeId","ToggleTheme","type","onClick","moonIcon","sunIcon","Navbar","sidebar","toggle","Bar","mid","Hamburger","active","Sidebar","Overlay","Coat","BreadCrumb","Header","options","disabled","Section","validationSchema","Yup","section","nullable","of","required","sectionName","min","sectionLanguage","onSubmit","onSubmitProps","a","setSubmitting","fetch","method","body","JSON","stringify","headers","cookies","resetForm","initialValues","onReset","errors","touched","isValid","dirty","handleBlur","handleChange","handleSubmit","setFieldValue","isSubmitting","getFieldProps","fieldprops","push","remove","form","component","TextField","step","placeholder","variant","hasOwnProperty","Autocomplete","onBlur","onChange","selectedOption","getOptionSelected","option","valuer","getOptionLabel","renderInput","params","Wrappper","AllSection","totalsections","property","id_","languages","stater","state","initialState","setInitialState","initialdisplay","setInitialdisplay","previousState","submittingProps","enableReinitialize","responsive","String","readOnly","value1","sectionOptions","AddSubjects","sectionAll","subject","subjectName","sectionTaught","res","status","clas","Subject","totalsubjects","totalSection","sectorData","sectionID","classOptions","class","subjectOptions","SubjectToClass","AllSubject","AllClasss","subjectToClass","classs","subjectCoefficient","max","Classes","Subjects","classData","dataSubject","SubjectClassTable","Allsubjects","AllClasses","AllSubjectClass","subjectId","classId","subjectClass","AddClass","classes","totalClass","Box_space","span","propertyName","fluid","position","InputProps","endAdornment","GeneralInput","GeneralInputForm","stuImage","imagedataField","ImageConverter","base62ImageData","setState","studentImage","blob","b64Data","contentType","sliceSize","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","Blob","b64toBlob","blobUrl","URL","createObjectURL","prev","ValidationSchemaTeacher","FamilyName","uppercase","trim","GivenName","DateOfBirth","Gender","TeacherAddress","BloodGroup","Religion","eMail","email","speciality","staffID","phoneNumber","shortBio","Grade","matricle","formerPost","locationOfFomerPost","decisionNo","decisionDate","diploma","Title","EcontactName","notRequired","EcontactOccupation","EcontactAddress","EcontactContactMobile","EContactEmail","religiondata","doctrine","bloodgroupdata","group","initialStateImageValues","imagesizeError","imagedataBack","filename","initialEditIcons","staffImageIconEditOff","FamilyNameIconEditOff","GivenNameIconEditOff","DateOfBirthIconEditOff","GenderIconEditOff","TeacherAddressIconEditOff","BloodGroupIconEditOff","ReligionIconEditOff","eMailIconEditOff","specialityIconEditOff","phoneNumberIconEditOff","shortBioIconEditOff","GradeIconEditOff","positionIconEditOff","matricleIconEditOff","formerPostIconEditOff","locationOfFomerPostIconEditOff","decisionNoIconEditOff","decisionDateIconEditOff","diplomaIconEditOff","dateOfAssumptionIconEditOff","TitleIconEditOff","EcontactNameIconEditOff","EcontactOccupationIconEditOff","EcontactAddressIconEditOff","EcontactContactMobileIconEditOff","EContactEmailIconEditOff","initialDisplay","staffImageEditOn","FamilyNameEditOn","GivenNameEditOn","DateOfBirthEditOn","GenderEditOn","TeacherAddressEditOn","BloodGroupEditOn","ReligionEditOn","eMailEditOn","specialityEditOn","phoneNumberEditOn","shortBioEditOn","GradeEditOn","positionEditOn","matricleEditOn","formerPostEditOn","locationOfFomerPostEditOn","decisionNoEditOn","decisionDateEditOn","diplomaIconEditOn","dateOfAssumptionEditOn","TitleEditOn","EcontactNameEditOn","EcontactOccupationEditOn","EcontactAddressEditOn","EcontactContactMobileEditOn","EContactEmailEditOn","staffImageEditOff","FamilyNameEditOff","GivenNameEditOff","DateOfBirthEditOff","GenderEditOff","TeacherAddressEditOff","BloodGroupEditOff","ReligionEditOff","eMailEditOff","specialityEditOff","phoneNumberEditOff","shortBioEditOff","GradeEditOff","positionEditOff","matricleEditOff","formerPostEditOff","locationOfFomerPostEditOff","decisionNoEditOff","decisionDateEditOff","diplomaEditOff","dateOfAssumptionEditOff","TitleEditOff","EcontactNameEditOff","EcontactOccupationEditOff","EcontactAddressEditOff","EcontactContactMobileEditOff","EContactEmailEditOff","TeacherDetails","stateDownloadIcon","setStateDownloadIcon","displayState","setDisplayState","displayEditIconState","setDisplayEditIconState","setstate","useSWR","titleGetData","genderGetData","staffGradeGetData","positionGetData","subjectGetData","titleData","undefined","title","genderdata","gender","staffGradeData","grade","positionData","specialityData","sectionId","oneStaffdata","oneStaff","lastname","firstname","dateofbirth","toISOString","shortbiography","staffgrade","staffPosition","dateOfAssumption","emergencyContactName","emergencyContactAddress","emergencyContactPhone","emergencyContactEmail","imageState","setFieldError","validateOnBlur","download","CardHeader","avatar","Avatar","substring","toUpperCase","concat","subheader","toLocaleDateString","onMouseOver","onMouseOut","defaultImage","htmlFor","imageEditValue","accept","fileList","files","formData","FormData","file","size","indexOf","reader","FileReader","addEventListener","result","readAsDataURL","append","TableContainer","stickyHeader","hover","role","tabIndex","TableCell","colSpan","familyname","givenname","InputLabelProps","shrink","getFullYear","bloodgroup","religion","teacherAddress","diplomaEditOn","StaffTable","AllStaff","AllStaffstate","setStudentState","handleRefresh","json","responces","header","toLocaleTimeString","StaffPersonalInformation","Field","FastField","InputAdornment","AlternateEmail","AddCircleOutlineIcon","AccountCircle","HomeIcon","startAdornment","fontFamily","StaffProffessionalInformation","FingerprintIcon","ContactPhoneIcon","LocalLibraryIcon","CardMembershipIcon","StaffEmergencyContact","WorkIcon","initialStateValues","StaffForm","genderFindAll","sectionFindAll","initialValueTeacher","onsubmit","alert","navigator","userAgent","React","activeStep","setActiveStep","steps","handleNext","prevActiveStep","handleBack","handleResetsteps","handleReset","Stepper","alternativeLabel","Step","StepLabel","stepIndex","getStepContent","year","Teacher","TeacherClassSubject","ClassSubjectTeacher","subjectCheck","field","checked","includes","ValidationSchema","StudentAddress","AdmissionID","Phone","FatherName","FatherOccupation","FatherAddress","FatherContact","MotherName","MotherOccupation","MotherAddress","MotherContact","studentImageIconEditOff","StudentAddressIconEditOff","AdmissionIDIconEditOff","PhoneIconEditOff","FatherNameIconEditOff","FatherOccupationIconEditOff","FatherAddressIconEditOff","FatherContactIconEditOff","MotherNameIconEditOff","MotherOccupationIconEditOff","MotherAddressIconEditOff","MotherContactIconEditOff","studentImageEditon","StudentAddressEditOn","AdmissionIDEditOn","PhoneEditOn","FatherNameEditOn","FatherOccupationEditOn","FatherAddressEditOn","FatherContactEditOn","MotherNameEditOn","MotherOccupationEditOn","MotherAddressEditOn","MotherContactEditOn","studentImageEditOff","StudentAddressEditOff","sectionEditOff","AdmissionIDEditOff","PhoneEditOff","FatherNameEditOff","FatherOccupationEditOff","FatherAddressEditOff","FatherContactEditOff","MotherNameEditOff","MotherOccupationEditOff","MotherAddressEditOff","MotherContactEditOff","StudentPersonalDetails","studentAdmissionID","oneStudentdata","oneStudent","phonenumber","studentID","dateOfEnrollment","styles","StyleSheet","create","page","justifyContent","flexDirection","container2","textCenter","textAlign","heading","headingAcademic","image","objectFit","studentcontainer","alignContent","alignItems","flexGrow","flexShrink","borderWidth","borderStyle","borderColor","studentimage","testimage","subjectContainer","sub","coef","seq","Avg","minMax","rank","Comp","paddingLeft","grey","backgroundColorHead","white","subjectColorHead","seq1","seq2","avg","Navg","comp","exam","ReportCardTemplate","data2","wrap","section1","section2","center","ReportCard","classReportState","setClassState","StudentDetails","document","fileName","url","loading","StudentTable","AllStudents","AllStudentsER","AdmissionForm","initialValue","StudentClassSubject","ParentRegistrationForm","ParentsDetails","Admin","path","exact","Dashboard","App","ThemeProvider","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.08435cf3.chunk.js","sourcesContent":["import React,{useContext} from 'react';\nimport { Container } from 'components/common';\nimport { Wrapper, Flex, Links, Details,Grid,FooterContainer } from './styles';\nimport social from './social.json';\nimport {ThemeContext} from \"providers/ThemeProvider\"\n\nexport const Footer = () => {\n  const {theme} = useContext(ThemeContext)\n  return(\n  <Wrapper theme={theme}>\n    <FooterContainer as={Container}>\n      <Grid>\n        <Details>\n            <h2>GBHS MUTENGENE </h2>\n          </Details>\n        <Flex >\n          <Links>\n            <h4>Project</h4>\n            <h4>Project</h4>\n            <h4>Project</h4>\n            <h4>Project</h4>\n          </Links>\n          <Links>\n            <h4>Blog</h4>\n            <h4>Blog</h4>\n            <h4>Blog</h4>\n            <h4>Blog</h4>\n          </Links>\n          <Links>\n            <h4>Scheme</h4>\n            <h4>Scheme</h4>\n            <h4>Scheme</h4>\n            <h4>Scheme</h4>\n          </Links>\n          <Links>\n            <h4>Time</h4>\n            <h4>Time</h4>\n            <h4>Time</h4>\n            <h4>Time</h4>\n          </Links>\n        </Flex>\n      </Grid>\n      <Flex number={2}>\n        <Links>\n            &copy;copyright NOUBISSIE LANDRY\n        </Links>\n        <Links>\n              {social.map(({ id, name, link, icon }) => (\n                <a key={id} href={link} target=\"_blank\" rel=\"noopener noreferrer\" aria-label={`follow me on ${name}`}>\n                  <img width=\"24\" src={require(`${icon}`)} alt={name} />\n                </a>\n              ))}\n        </Links>\n      </Flex>\n    </FooterContainer>\n  </Wrapper>\n)};","module.exports = __webpack_public_path__ + \"static/media/students.83503bdd.svg\";","module.exports = __webpack_public_path__ + \"static/media/Teacher.13b15e96.svg\";","import { useState, useEffect } from 'react';\n\nconst useMedia = (queries, values, defaultValue) => {\n  const [value, setValue] = useState(null);\n\n  useEffect(() => {\n    const mediaQueryLists = queries.map(q => window.matchMedia(q));\n\n    const getValue = () => {\n      const index = mediaQueryLists.findIndex(mql => mql.matches);\n      return typeof values[index] !== 'undefined' ? values[index] : defaultValue;\n    };\n\n    setValue(getValue);\n    const handler = () => setValue(getValue);\n    mediaQueryLists.forEach(mql => mql.addListener(handler));\n    return () => mediaQueryLists.forEach(mql => mql.removeListener(handler));\n  }, [defaultValue, queries, values]);\n\n  return value;\n};\n\nexport default useMedia;\n","import React, { createContext } from 'react';\nimport useDarkMode from 'hooks/useDarkMode';\n\nexport const ThemeContext = createContext('light');\n\nexport default ({ children }) => {\n  const [theme, toggleTheme] = useDarkMode();\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        theme,\n        toggleTheme,\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport useMedia from 'hooks/useMedia';\n\nexport default () => {\n  const [theme, setTheme] = useState('light');\n  console.log(\"hello toggle\")\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      window.localStorage.setItem('theme', 'dark');\n      setTheme('dark');\n    } else {\n      window.localStorage.setItem('theme', 'light');\n      setTheme('light');\n    }\n  };\n\n  const prefersDarkMode = useMedia(['(prefers-color-scheme: dark)'], [true], false);\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    if (localTheme) {\n      window.localStorage.setItem('theme', localTheme);\n      setTheme(localTheme);\n    } else if (prefersDarkMode) {\n      setTheme('dark');\n    } else {\n      setTheme('light');\n    }\n  }, [prefersDarkMode]);\n\n  return [theme, toggleTheme];\n};\n","module.exports = __webpack_public_path__ + \"static/media/parents.a5b800e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.2a5a3b47.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.98ac656e.svg\";","export const HEADER_PRIMARY_COLOR = \"#1338BE\"\nexport const PRIMARY_COLOR = \"#E0E2E6\" \nexport const SECONDARY_COLOR = \"#5e5c5c\"\nexport const ACCENT_COLOR_1 = \"\"\nexport const ACCENT_COLOR_2 = \"\"\nexport const ACCENT_COLOR_3 = \"\"\n\nexport const breadCrumb_COLOR = \"skyblue\"\nexport const UrlTitle_color = \"snow\"\nexport const WHITE_HEADER_COLOR = \"#fff\"\nexport const BLACK_HEADER_COLOR = \"#000\"\nexport const image_box_color = \"skyblue\"\nexport const image_label_color = \"grey\"","var map = {\n\t\".\": 195,\n\t\"./\": 195,\n\t\"./icons/favicon.ico\": 776,\n\t\"./icons/github.svg\": 777,\n\t\"./icons/stackoverflow.svg\": 778,\n\t\"./icons/telegram.svg\": 779,\n\t\"./icons/twitter.svg\": 780,\n\t\"./index\": 195,\n\t\"./index.jsx\": 195,\n\t\"./social\": 292,\n\t\"./social.json\": 292,\n\t\"./styles\": 82,\n\t\"./styles.js\": 82\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 775;","module.exports = __webpack_public_path__ + \"static/media/favicon.d41d8cd9.ico\";","module.exports = __webpack_public_path__ + \"static/media/github.5d6967cb.svg\";","module.exports = __webpack_public_path__ + \"static/media/stackoverflow.882e4d21.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.d6571634.svg\";","module.exports = __webpack_public_path__ + \"static/media/defaultImage.21f7233f.png\";","module.exports = __webpack_public_path__ + \"static/media/twitter.c87b2aef.svg\";","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    padding: 2rem 0 4rem 0;\n    background-color:${({theme})=> theme === \"light\"?\"#071339\":theme};\n    color:#fff;\n    background-size:cover;\n    background-position:top;\n    background-repeat:no-repeat;\n    min-height:30vw;\n    border-top:solid blue;\n    border-bottom:solid blue;\n    \n    \n\n    @media (max-width:1960px){\n        padding:4rem 0 4rem;\n    };\n`\nexport const Grid = styled.div`\n\n    display:grid;\n    grid-template-columns:25% 75%;\n    padding:4rem;\n    @media(max-width:950px){\n        grid-template-columns:auto;\n    }\n`\nexport const Flex = styled.div`\n    display:grid;\n    align-items:flex-start;\n    justify-content:space-evenly;\n    grid-template-columns:${(number)=>number===2 ? `repeat(${number},auto)`: \"repeat(4,auto)\"}  ;\n    \n    @media (max-width:900px){\n        grid-template-columns: auto auto;\n        text-align:center;\n        align-items:center;\n    } \n    /* @media (max-width:600px){\n        flex-direction: auto auto;\n        text-align:center;\n        align-items:center;\n    }  */\n`\nexport const Links = styled.div`\n    /* display:flex; */\n    align-items:center;\n\n    a  {\n            margin:0 0.5rem;\n            img{\n                margin:0;\n            }\n            &:first-child, \n            &:last-child{\n                margin:0;\n            }\n    }\n    \n`\n\nexport const Details = styled.div`\n        /* h2,a,span{\n            color:#212121\n        } */\n        \n        @media (max-width: 680px){\n            margin-bottom: 2rem;\n    }\n`;\nexport const FooterContainer = styled.div`\n\n`","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const Global = createGlobalStyle`\n  html {\n    font-family: 'Roboto', Helvetica, sans-serif;\n    -ms-text-size-adjust: 100%;\n    -webkit-text-size-adjust: 100%;\n    article,\n    aside,\n    details,\n    figcaption,\n    figure,\n    footer,\n    header,\n    main,\n    menu,\n    nav,\n    section,\n    summary {\n      display: block;\n    }\n   \n    audio,\n    canvas,\n    progress,\n    video {\n      display: inline-block;\n    }\n    audio:not([controls]) {\n      display: none;\n      height: 0;\n    }\n    progress {\n      vertical-align: baseline;\n    }\n    [hidden],\n    template {\n      display: none;\n    }\n    a {\n      background-color: transparent;\n      -webkit-text-decoration-skip: objects;\n    }\n    a:active,\n    a:hover {\n      outline-width: 0;\n    }\n    abbr[title] {\n      border-bottom: none;\n      text-decoration: underline;\n      text-decoration: underline dotted;\n    }\n    b,\n    strong {\n      font-weight: inherit;\n      font-weight: bolder;\n    }\n    dfn {\n      font-style: italic;\n    }\n    h1 {\n      font-size: 2em;\n      margin: 0.67em 0;\n    }\n    mark {\n      background-color: #ff0;\n      color: #000;\n    }\n    small {\n      font-size: 80%;\n    }\n    sub,\n    sup {\n      font-size: 75%;\n      line-height: 0;\n      position: relative;\n      vertical-align: baseline;\n    }\n    sub {\n      bottom: -0.25em;\n    }\n    sup {\n      top: -0.5em;\n    }\n    img {\n      border-style: none;\n    }\n    svg:not(:root) {\n      overflow: hidden;\n    }\n    code,\n    kbd,\n    pre,\n    samp {\n      font-family: monospace, monospace;\n      font-size: 1em;\n    }\n    figure {\n      margin: 1em 40px;\n    }\n    hr {\n      box-sizing: content-box;\n      height: 0;\n      overflow: visible;\n    }\n    button,\n    input,\n    optgroup,\n    select,\n    textarea {\n      font: inherit;\n      margin: 0;\n    }\n    optgroup {\n      font-weight: 700;\n    }\n    button,\n    input {\n      overflow: visible;\n      color: ${({ theme }) => (theme === 'light' ? 'hsla(0, 0%, 0%, 0.8)' : '#fff')};\n    }\n    button,\n    select {\n      text-transform: none;\n    }\n    [type='reset'],\n    [type='submit'],\n    button,\n    html [type='button'] {\n      -webkit-appearance: button;\n    }\n    [type='button']::-moz-focus-inner,\n    [type='reset']::-moz-focus-inner,\n    [type='submit']::-moz-focus-inner,\n    button::-moz-focus-inner {\n      border-style: none;\n      padding: 0;\n    }\n    [type='button']:-moz-focusring,\n    [type='reset']:-moz-focusring,\n    [type='submit']:-moz-focusring,\n    button:-moz-focusring {\n      outline: 1px dotted ButtonText;\n    }\n    fieldset {\n      border: 1px solid silver;\n      margin: 0 2px;\n      padding: 0.35em 0.625em 0.75em;\n    }\n    legend {\n      box-sizing: border-box;\n      color: inherit;\n      display: table;\n      max-width: 100%;\n      padding: 0;\n      white-space: normal;\n    }\n    textarea {\n      overflow: auto;\n    }\n    [type='checkbox'],\n    [type='radio'] {\n      box-sizing: border-box;\n      padding: 0;\n    }\n    [type='number']::-webkit-inner-spin-button,\n    [type='number']::-webkit-outer-spin-button {\n      height: auto;\n    }\n    [type='search'] {\n      -webkit-appearance: textfield;\n      outline-offset: -2px;\n    }\n    [type='search']::-webkit-search-cancel-button,\n    [type='search']::-webkit-search-decoration {\n      -webkit-appearance: none;\n    }\n    ::-webkit-input-placeholder {\n      color: inherit;\n      opacity: 0.54;\n    }\n    ::-webkit-file-upload-button {\n      -webkit-appearance: button;\n      font: inherit;\n    }\n    html {\n      font: 112.5%/1.45em georgia, serif;\n      box-sizing: border-box;\n      overflow-y: scroll;\n    }\n    * {\n      box-sizing: inherit;\n    }\n    *:before {\n      box-sizing: inherit;\n    }\n    *:after {\n      box-sizing: inherit;\n    }\n    img {\n      max-width: 100%;\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    h1 {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      color: inherit;\n      font-weight: bold;\n      text-rendering: optimizeLegibility;\n      font-size: 2.25rem;\n      line-height: 1.1;\n    }\n    h2 {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      color: inherit;\n      font-weight: bold;\n      text-rendering: optimizeLegibility;\n      font-size: 1.62671rem;\n      line-height: 1.1;\n    }\n    h3 {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      color: inherit;\n      font-weight: bold;\n      text-rendering: optimizeLegibility;\n      font-size: 1.38316rem;\n      line-height: 1.1;\n    }\n    h4 {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      color: inherit;\n      font-weight: bold;\n      text-rendering: optimizeLegibility;\n      font-size: 1rem;\n      line-height: 1.1;\n    }\n    h5 {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      color: inherit;\n      font-weight: bold;\n      text-rendering: optimizeLegibility;\n      font-size: 0.85028rem;\n      line-height: 1.1;\n    }\n    h6 {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      color: inherit;\n      font-weight: bold;\n      text-rendering: optimizeLegibility;\n      font-size: 0.78405rem;\n      line-height: 1.1;\n    }\n    hgroup {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    ul {\n      margin-left: 1.45rem;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      list-style-position: outside;\n      list-style-image: none;\n    }\n    ol {\n      margin-left: 1.45rem;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      list-style-position: outside;\n      list-style-image: none;\n    }\n    dl {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    dd {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    p {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    figure {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    pre {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      font-size: 0.85rem;\n      line-height: 1.42;\n      background: hsla(0, 0%, 0%, 0.04);\n      border-radius: 3px;\n      overflow: auto;\n      word-wrap: normal;\n      padding: 1.45rem;\n    }\n    table {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n      font-size: 1rem;\n      line-height: 1.45rem;\n      border-collapse: collapse;\n      width: 100%;\n    }\n    fieldset {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    blockquote {\n      margin-left: 1.45rem;\n      margin-right: 1.45rem;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    form {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    noscript {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    iframe {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    hr {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: calc(1.45rem - 1px);\n      background: hsla(0, 0%, 0%, 0.2);\n      border: none;\n      height: 1px;\n    }\n    address {\n      margin-left: 0;\n      margin-right: 0;\n      margin-top: 0;\n      padding-bottom: 0;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 0;\n      margin-bottom: 1.45rem;\n    }\n    b {\n      font-weight: bold;\n    }\n    strong {\n      font-weight: bold;\n    }\n    dt {\n      font-weight: bold;\n    }\n    th {\n      font-weight: bold;\n    }\n    li {\n      margin-bottom: calc(1.45rem / 2);\n    }\n    ol li {\n      padding-left: 0;\n    }\n    ul li {\n      padding-left: 0;\n    }\n    li > ol {\n      margin-left: 1.45rem;\n      margin-bottom: calc(1.45rem / 2);\n      margin-top: calc(1.45rem / 2);\n    }\n    li > ul {\n      margin-left: 1.45rem;\n      margin-bottom: calc(1.45rem / 2);\n      margin-top: calc(1.45rem / 2);\n    }\n    blockquote *:last-child {\n      margin-bottom: 0;\n    }\n    li *:last-child {\n      margin-bottom: 0;\n    }\n    p *:last-child {\n      margin-bottom: 0;\n    }\n    li > p {\n      margin-bottom: calc(1.45rem / 2);\n    }\n    code {\n      font-size: 0.85rem;\n      line-height: 1.45rem;\n    }\n    kbd {\n      font-size: 0.85rem;\n      line-height: 1.45rem;\n    }\n    samp {\n      font-size: 0.85rem;\n      line-height: 1.45rem;\n    }\n    abbr {\n      border-bottom: 1px dotted hsla(0, 0%, 0%, 0.5);\n      cursor: help;\n    }\n    acronym {\n      border-bottom: 1px dotted hsla(0, 0%, 0%, 0.5);\n      cursor: help;\n    }\n    abbr[title] {\n      border-bottom: 1px dotted hsla(0, 0%, 0%, 0.5);\n      cursor: help;\n      text-decoration: none;\n    }\n    thead {\n      text-align: left;\n    }\n    td,\n    th {\n      text-align: left;\n      border-bottom: 1px solid hsla(0, 0%, 0%, 0.12);\n      font-feature-settings: 'tnum';\n      -moz-font-feature-settings: 'tnum';\n      -ms-font-feature-settings: 'tnum';\n      -webkit-font-feature-settings: 'tnum';\n      padding-left: 0.96667rem;\n      padding-right: 0.96667rem;\n      padding-top: 0.725rem;\n      padding-bottom: calc(0.725rem - 1px);\n    }\n    th:first-child,\n    td:first-child {\n      padding-left: 0;\n    }\n    th:last-child,\n    td:last-child {\n      padding-right: 0;\n    }\n    tt,\n    code {\n      background-color: hsla(0, 0%, 0%, 0.04);\n      border-radius: 3px;\n      font-family: 'SFMono-Regular', Consolas, 'Roboto Mono', 'Droid Sans Mono',\n        'Liberation Mono', Menlo, Courier, monospace;\n      padding: 0;\n      padding-top: 0.2em;\n      padding-bottom: 0.2em;\n    }\n    pre code {\n      background: none;\n      line-height: 1.42;\n    }\n    code:before,\n    code:after,\n    tt:before,\n    tt:after {\n      letter-spacing: -0.2em;\n      content: ' ';\n    }\n    pre code:before,\n    pre code:after,\n    pre tt:before,\n    pre tt:after {\n      content: '';\n    }\n    @media only screen and (max-width: 480px) {\n      html {\n        font-size: 100%;\n      }\n    }\n    body {\n      margin: 0;\n      padding: 0;\n      font-family: 'Roboto', Helvetica, sans-serif;\n      color: ${({ theme }) => (theme === 'light' ? 'hsla(0, 0%, 0%, 0.8)' : '#fff')};\n      background-color: ${({ theme }) => (theme === 'light' ? '#fff' : '#212121')};\n      transition: .3s all;\n      font-weight: normal;\n      word-wrap: break-word;\n      font-kerning: normal;\n      -moz-font-feature-settings: 'kern', 'liga', 'clig', 'calt';\n      -ms-font-feature-settings: 'kern', 'liga', 'clig', 'calt';\n      -webkit-font-feature-settings: 'kern', 'liga', 'clig', 'calt';\n      font-feature-settings: 'kern', 'liga', 'clig', 'calt';\n    }\n\n    a {\n      text-decoration: none;\n    }\n\n    input, select, textarea, button {\n      &:focus {\n        outline: none;\n      }\n    }\n  }\n`;\nexport const Wrapper = styled.div`\n  height:98vh;\n  display:grid;\n  grid-template-columns:auto;\n  overflow-y:auto;\n  margin:0px;\n  padding:0px;\n  #brand{\n    @media(max-width: 960px){\n        display:none;\n    }\n  }\n`\nexport const brand = styled.div`\n  position:sticky;\n  top:0px;\n  /* height:0px; */\n  /* border: solid red; */\n  margin:0px;\n  padding:0px;\n  /* z-index:200; */\n  /* display:none; */\n  @media (max-width:960px){\n    display:none;\n  }\n`\nexport const Box = styled.div`\n  z-index:-1;\n`\nexport const Brand = styled.div`\n  color:#fff;\n  padding:20px;\n  background-color:#000;\n  z-index:1;\n  align-items:center;\n  /* text-align:center; */\n  position:sticky;\n  top:0;\n  opacity:1;\n  border:solid outset;\n  a{\n    text-decoration:none;\n    color:#fff;\n  }\n  div{\n    \n  }\n  `","\nimport React, { useContext } from 'react';\nimport { ThemeContext } from 'providers/ThemeProvider';\n\nimport { Global,Wrapper,Coat,Box,Brand} from './styles';\nimport './fonts.css';\n// import {BreadCrumb} from \"components/modules/BrowserSiteOutput\"\nimport {Link,useLocation} from \"react-router-dom\"\nexport const Layout = ({ children }) => {\n  const { theme } = useContext(ThemeContext);\n  let location = useLocation();\n\n  return (\n    \n    <Wrapper>\n      <Global theme={theme} />\n      <div>\n        <Brand  to=\"/\" theme={theme} id=\"brand\">\n        {/* <img src={dfulogo} alt=\"logo image\" height=\"400px\" width=\"400px\"/> */}\n        <Link to={location.pathname}>Home{location.pathname}</Link>\n          {/* <ToggleTheme />  */}\n        \n        </Brand>\n        <Box>\n          {children}\n        </Box>\n        \n      </div>\n    </Wrapper>\n    \n  );\n};\n","import styled from \"styled-components\"\n\nexport const Container = styled.div`\n    max-width:95vw;\n    margin:0 auto;\n    width:100%;\n\n    @media (min-width:601px){\n        width:100%\n    }\n    @media (min-width:993px){\n        width:100%;\n    }\n`;","import styled from 'styled-components';\n\nexport const Card = styled.div`\n\n  /* padding: 1rem; */\n  background: ${({ theme }) => (theme === 'light' ? '#fff' : '#181717')};\n  border:solid outset 0.5px;\n  overflow:${({scroll})=> scroll===\"none\" ? \"none\" : \"scroll\"};\n  background:transparent !important;\n  word-wrap:break-word;\n  border-radius:5px;\n  padding:0px;\n  margin:2px;\n  ${({height})=>height && `\n      height:${height};\n  `}\n  ${({width})=>width && `\n      width:${width};\n  `}\n  ${({margin})=>margin && `\n      margin:${margin};\n  `}\n \n  /* border: solid black 1px; */\n`;\n\nexport const CardTitle = styled.h4`\n  width:100%;\n  /* border-radius:5px 5px 0 0; */\n  background-color: ${({ theme }) => (theme === 'light' ? 'white' : '#444444')};\n  /* padding:1rem 0 1rem 0; */\n  text-align:center;\n  margin:0px;\n  /* display: flex;\n  flex-direction: row; \n  justify-content: space-between; */\n\n`;\nexport const CardImg = styled.img`\n  width:100%;\n  /* border-top:solid black 0.2px;\n  border-bottom:solid black 0.2px; */\n  /* padding:1rem 0 1rem 0; */\n  margin:0px;\n  ${({height})=>height && `\n      height:${height};\n  `}\n  ${({width})=>width && `\n      width:${width};\n  `}\n  ${({margin})=>margin && `\n      margin:${margin};\n  `}\n`\n\nexport const CardBody = styled.h5`\n  width:100%;\n  border-radius:0 0 5px 5px;\n  overflow:${({scroll})=> scroll===\"none\" ? \"none\" : \"scroll\"};\n    word-wrap:break-word;\n  background-color: ${({ theme }) => (theme === 'light' ? 'white' : '#181717')};\n  padding:1rem 0 1rem 0;\n  margin:0px;\n  \n  ${({height})=>height && `\n      height:${height};\n  `}\n  ${({width})=>width && `\n      width:${width};\n  `}\n  ${({margin})=>margin && `\n      margin:${margin};\n  `}\n`\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  cursor: pointer;\n  border-radius: 3px;\n  ${({ backgroundColor }) =>\n    backgroundColor &&\n    `\n\t\tbackground-color: ${backgroundColor};\n  `}\n  ${({ margin }) =>\n    margin &&\n    `\n\t\tmargin: ${margin};\n  `}\n  \n  ${({ width }) =>\n    width &&\n    `\n\t\twidth: ${width};\n\t`}\n  /* padding: 0.7rem 2.5rem; */\n  padding: ${({padding})=>padding ? `${padding}%` : \"0.7rem 2.5rem\"};\n  border: none;\n  -webkit-appearance: none;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  \n  background: #0074d9;\n  color: ${({color})=>color ?`${color}` :\"#fff\"};\n  background: ${({backgroundColor})=>backgroundColor ?`${backgroundColor}` : \"#0074d9\"};\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    background: gray;\n  }\n\n  ${({ secondary }) =>\n    secondary &&\n    `\n\t\tbackground: #001F3F;\n\t`}\n`;","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  ${({width})=> width && `\n    width :${width};\n  `}\n  \n  box-sizing: border-box;\n  border: solid black 1px;\n  padding: 0.8rem 1rem;\n  border-radius: 7px;\n  margin-bottom: 0.5rem;\n  transition: 0.3s;\n  ${({theme})=> theme === \"light\" && `\n    border:solid grey 2px;\n  ` }\n  ${({ error }) =>\n    error &&\n    `\n        border: solid red 1px;\n        color:red;\n\t`}\n\n  &::placeholder {\n    color: blue;\n    \n  }\n`;\n","export default [\n    {\n      'title': 'All Day Event very long title',\n      'allDay': true,\n      'start': new Date(2020, 7, 0),\n      'end': new Date(2020, 7, 1)\n    },\n    {\n      'title': 'Long Event',\n      'start': new Date(2015, 3, 7),\n      'end': new Date(2015, 3, 10)\n    },\n  \n    {\n      'title': 'DTS STARTS',\n      'start': new Date(2016, 2, 13, 0, 0, 0),\n      'end': new Date(2016, 2, 20, 0, 0, 0)\n    },\n  \n    {\n      'title': 'DTS ENDS',\n      'start': new Date(2016, 10, 6, 0, 0, 0),\n      'end': new Date(2016, 10, 13, 0, 0, 0)\n    },\n  \n    {\n      'title': 'Some Event',\n      'start': new Date(2015, 3, 9, 0, 0, 0),\n      'end': new Date(2015, 3, 9, 0, 0, 0)\n    },\n    {\n      'title': 'Conference',\n      'start': new Date(2015, 3, 11),\n      'end': new Date(2015, 3, 13),\n      desc: 'Big conference for important people'\n    },\n    {\n      'title': 'Meeting',\n      'start': new Date(2015, 3, 12, 10, 30, 0, 0),\n      'end': new Date(2015, 3, 12, 12, 30, 0, 0),\n      desc: 'Pre-meeting meeting, to prepare for the meeting'\n    },\n    {\n      'title': 'Lunch',\n      'start': new Date(2015, 3, 12, 12, 0, 0, 0),\n      'end': new Date(2015, 3, 12, 13, 0, 0, 0),\n      desc: 'Power lunch'\n    },\n    {\n      'title': 'Meeting',\n      'start': new Date(2015, 3, 12, 14, 0, 0, 0),\n      'end': new Date(2015, 3, 12, 15, 0, 0, 0)\n    },\n    {\n      'title': 'Happy Hour',\n      'start': new Date(2015, 3, 12, 17, 0, 0, 0),\n      'end': new Date(2015, 3, 12, 17, 30, 0, 0),\n      desc: 'Most important meal of the day'\n    },\n    {\n      'title': 'Dinner',\n      'start': new Date(2015, 3, 12, 20, 0, 0, 0),\n      'end': new Date(2015, 3, 12, 21, 0, 0, 0)\n    },\n    {\n      'title': 'Birthday Party',\n      'start': new Date(2015, 3, 13, 7, 0, 0),\n      'end': new Date(2015, 3, 13, 10, 30, 0)\n    },\n    {\n      'title': 'Birthday Party 2',\n      'start': new Date(2015, 3, 13, 7, 0, 0),\n      'end': new Date(2015, 3, 13, 10, 30, 0)\n    },\n    {\n      'title': 'Birthday Party 3',\n      'start': new Date(2015, 3, 13, 7, 0, 0),\n      'end': new Date(2015, 3, 13, 10, 30, 0)\n    },\n    {\n      'title': 'Late Night Event',\n      'start': new Date(2015, 3, 17, 19, 30, 0),\n      'end': new Date(2015, 3, 18, 2, 0, 0)\n    },\n    {\n      'title': 'Multi-day Event',\n      'start': new Date(2015, 3, 20, 19, 30, 0),\n      'end': new Date(2015, 3, 22, 2, 0, 0)\n    }\n  ]\n  ","import React from \"react\"\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar'\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport format from 'date-fns/format'\nimport parse from 'date-fns/parse'\nimport startOfWeek from 'date-fns/startOfWeek'\nimport getDay from 'date-fns/getDay'\nimport event from \"./event\"\nconst locales = {\n  'en-US': require('date-fns/locale/en-US'),\n}\nconst localizer = dateFnsLocalizer({\n  format,\n  parse,\n  startOfWeek,\n  getDay,\n  locales,\n})\n \nexport const Agenda = props => (\n  <div>\n    <Calendar\n      localizer={localizer}\n      events={event}\n      startAccessor=\"start\"\n      endAccessor=\"end\"\n    //   style={{ height: 500 }}\n    />\n  </div>\n)","import {format,formatDistance,subDays} from \"date-fns\"\n\nlet NoticeData = [\n    {\n        label:\"info\",\n        date:format(new Date(2014, 1, 11), 'MM/dd/yyyy'),\n        notice:\"notice to be pass down\",\n        noticeOwner: \"user that post the notice\",\n        period: formatDistance(subDays(new Date(), 0), new Date())   // \"present_time - post_time\"\n    },\n    {\n        label:\"warning\",\n        date:format(new Date(2014, 1, 11), 'MM/dd/yyyy'),\n        notice:\"notice to be pass down\",\n        noticeOwner: \"user that post the notice\",\n        period: formatDistance(subDays(new Date(), 1), new Date())   // \"present_time - post_time\"\n    },\n    {\n        label:\"primary\",\n        date:format(new Date(2014, 1, 11), 'MM/dd/yyyy'),\n        notice:\"notice to be pass down\",\n        noticeOwner: \"user that post the notice\",\n        period: formatDistance(subDays(new Date(), 2), new Date())  // \"present_time - post_time\"\n    },\n    {\n        label:\"secondary\",\n        date:format(new Date(2014, 1, 11), 'MM/dd/yyyy'),\n        notice:\"notice to be pass down\",\n        noticeOwner: \"user that post the notice\",\n        period:formatDistance(subDays(new Date(), 3), new Date())   // \"present_time - post_time\"\n    },\n    {\n        label:\"danger\",\n        date:format(new Date(2014, 1, 11), 'MM/dd/yyyy'),\n        notice:\"notice to be pass down\",\n        noticeOwner: \"user that post the notice\",\n        period: formatDistance(subDays(new Date(), 10), new Date())   // \"present_time - post_time\"\n    }\n]\nexport default NoticeData","import styled from \"styled-components\"\n\nexport const List = styled.ul`\n    list-style:none;\n\n`","import React,{useContext} from \"react\"\nimport NoticeData from \"./noticeData\"\nimport {CardBody,CardTitle,Button} from \"components/common\"\nimport {List} from \"./styles\"\n\n\nexport const NoticeBoard = ()=>{\n    \n\n    return (\n        <React.Fragment>\n                \n                    <List>\n                    {\n                        NoticeData.map((noticeInfo,index)=>{\n                            return(\n                                <li key={index}>\n                                    <Button as=\"div\" className={`bg-${noticeInfo.label}`}>{noticeInfo.date}</Button>\n                                    <h5 className=\"text-dark\">{noticeInfo.notice}</h5>\n                                    <div ><h5 className={`bg-${noticeInfo.label} text-light`}>{noticeInfo.noticeOwner}/{noticeInfo.period}</h5></div>\n                                </li>\n                            )\n                        })\n                    } \n                    </List>\n                \n        </React.Fragment>\n    )\n}\n","import React, { useState } from 'react';\nimport { BarChart, Bar, Sector,Cell,XAxis,YAxis,CartesianGrid,\n        Tooltip,Legend,ReferenceLine } from 'recharts';\n\n\n        const data = [\n            {\n                Day: 'Page A', expenses: 4000, Earning: 2400, Total: 2400,\n            },\n            {\n                Day: 'Page B', expenses: -3000, Earning: 1398, Total: 2210,\n            },\n            {\n                Day: 'Page C', expenses: -2000, Earning: -9800, Total: 2290,\n            },\n            {\n                Day: 'Page D', expenses: 2780, Earning: 3908, Total: -2000,\n            },\n            {\n                Day: 'Page E', expenses: -1890, Earning: 4800, Total: 2181,\n            },\n            {\n                Day: 'Page F', expenses: 2390, Earning: -3800, Total: 2500,\n            },\n            {\n                Day: 'Page G', expenses: 3490, Earning: 4300, Total: 2100,\n            },\n        ];\n\nexport const Barchart = () =>{\n    return (\n        <BarChart\n            width={450}\n            height={500}\n            data={data}\n            stackOffset=\"sign\"\n            style={{zIndex:\"0\"}}\n            margin={{\n                top: 5, right: 5, left: 5, bottom: 5,\n            }}\n        >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"Day\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <ReferenceLine y={0} stroke=\"#000\" />\n            <Bar dataKey=\"Earning\" nameKey=\"Day\" fill=\"#8884d8\" stackId=\"stack\" />\n            <Bar dataKey=\"expenses\" nameKey=\"Day\" fill=\"#82ca9d\" stackId=\"stack\" />\n            <Bar dataKey=\"Total\" nameKey=\"Day\"  fill=\"orange\" stackId=\"a\" >\n                {\n                    data.map((entry, index) => {\n                        \n                    return(\n                        <Cell key={index} fill={entry.Total<0?\"red\":\"blue\"}/>\n                    )\n                    })\n                }\n            </Bar>\n            \n        </BarChart>\n    );\n}\n\n","import styled from \"styled-components\"\n\nexport const Grid = styled.div`\n    display:grid;\n    grid-template-columns:auto;\n    margin:0px;\n    \n    ${({margin})=>margin && `\n        margin:${margin};\n    `}\n    ${({backgroundColor})=>backgroundColor && `\n        background-color:${backgroundColor};\n        border-radius:10px;\n    `}\n    ${({border})=>border && `\n        border:${border};\n    `}\n    ${({padding})=>padding && `\n        padding:${padding};\n    `}\n\n\n    ${({xs,m_xs})=>xs  && `\n        @media(min-width: 0px){\n            grid-template-columns:repeat(${xs},${100/xs}%);\n            margin:${m_xs};\n        }\n    `}\n    ${({sm,m_sm})=>sm && `\n        @media(min-width: 600px){\n            grid-template-columns:repeat(${sm},${100/sm}%);\n            margin:${m_sm};\n        }\n    `}\n    ${({md,m_md})=>md && `\n        @media(min-width: 950px){\n            grid-template-columns:repeat(${md},${100/md}%);\n            margin:${m_md};\n        }\n    `}\n    ${({lg,m_lg})=>lg && `\n        @media(min-width: 1100px){\n            grid-template-columns:repeat(${lg},${100/lg}%);\n            margin:${m_lg};\n        }\n    `}\n    ${({xl,m_xl})=>xl && `\n        @media(min-width: 1200px){\n            grid-template-columns:repeat(${xl},${100/xl}%);\n            margin:${m_xl};\n\n        }\n    `}\n`","import styled from 'styled-components';\n\nexport const Select = styled.select`\n  \n${({width})=> width && `\n    width :${width};\n  `}\n  \n  box-sizing: border-box;\n  border: solid black 1px;\n  padding: 0.8rem 1rem;\n  border-radius: 7px;\n  margin-bottom: 0.5rem;\n  transition: 0.3s;\n  ${({theme})=> theme === \"light\" && `\n    border:solid grey 2px;\n  ` }\n  ${({ error }) =>\n    error &&\n    `\n        border-color: #ff4136;\n        color:red;\n\t`}\n\n  &::placeholder {\n    color: blue;\n    \n  }\n`;\n\n// ${({width})=> width && `\n//     width :${width};\n//   `}\n//   cursor: pointer;\n//   border-radius: 10px;\n//   border:solid black 1px;\n  /* padding: 0.7rem 2.5rem; */\n  // padding: ${({padding})=>padding ? `${padding}%` : \"0.85rem 2.5rem\"};\n  /* border: none; */\n  // -webkit-appearance: none;\n  // -webkit-touch-callout: none;\n  // -webkit-user-select: none;\n  // -khtml-user-select: none;\n  // -moz-user-select: none;\n  // -ms-user-select: none;\n  // user-select: none;\n  \n  \n  // color: ${({color})=>color ?`${color}` :\"#fff\"};\n  // background: ${({backgroundColor})=>backgroundColor ?`${backgroundColor}` : \"#0074d9\"};\n//   &:focus {\n//     outline: none;\n//   }\n\n//   &:disabled {\n//     background: gray;\n//   }\n\n//   ${({ secondary }) =>\n//     secondary &&\n//     `\n// \t\tbackground: #001F3F;\n// \t`}\n// `;","import styled from \"styled-components\"\n\n\nexport const Table = styled.table`\n    border:none;\n    border-radius:5px;\n    padding:0px;\n    margin:0px;\n    /* text-align:center; */\n    \n`\nexport const TableHeader = styled.thead`\n\n`\nexport const TableHead = styled.th`\n    text-align:center;\n`\n\n\nexport const TableRow = styled.tr`\n    &:nth-child(){\n        background-color: red;\n    }\n`\nexport const TableData = styled.td`\n    text-align:center;\n    /* border:solid red; */\n    /* justify-content:right; */\n`\nexport const TableBody = styled.tbody`\n`\nexport const TableFooter = styled.tfoot`\n    /* width:100%; */\n`","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    color:red;\n    ${({display})=>display && `\n        display:${display};\n    `}\n`","import styled from \"styled-components\"\nimport {UrlTitle_color} from \"assets/colorsPallete\"\nexport const UrlTitle = styled.h3`\n    background-color:${UrlTitle_color};\n    padding:1%;\n    color:#000000;\n`","import styled from \"styled-components\"\n\n\nexport const Wrapper = styled.div`\n    \n    padding: 2% 0 2% 2%;\n    margin:0;\n    background-color:${({ theme }) => (theme === 'light' ? 'rgb(236, 236, 236)' : '#181717')};\n    z-index:-10;\n    overflow:hidden;\n    \n    .margin2{\n        margin:2%;\n    }\n    /* width:100vw; */\n    /* @media(min-width: 960px){ */\n        \n        \n        \n    \n    .agenda{\n        height:500px;\n    }\n        .scroll{\n        overflow-wrap: break-word;\n        overflow: scroll;\n        \n        }\n    @media(max-width: 960px){\n       width:100vw;\n       \n    } \n`\n\nexport const CardBox = styled.div`\n    /* height: 500px;\n    overflow-wrap: break-word;\n    overflow-y: hidden; */\n`\n\n\n\n","import React,{useContext} from \"react\"\nimport {ThemeContext} from \"providers/ThemeProvider\"\n\nimport {CardTitle,CardImg,Agenda,NoticeBoard,Barchart} from \"components/common\"\nimport Grid from \"@material-ui/core/Grid\"\nimport {Wrapper} from \"./styles\"\n\nimport student from \"assets/illustration/students.svg\"\nimport staff from \"assets/illustration/Teacher.svg\"\nimport parent from \"assets/illustration/parents.svg\"\n\n\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from '@material-ui/core/CardContent';\n\n\nexport default  ()=>{\n    let {theme} = useContext(ThemeContext)\n    return(\n        <Wrapper theme={theme}>\n            \n            <Grid xs={12} item spacing={2} container >\n                <Grid xs={6} sm={3} md={3} >\n                    <Card theme={theme} className=\"margin2\" >\n                        <CardTitle theme={theme}>\n                            Students\n                        </CardTitle>\n                        \n                        <CardImg   height=\"100px\" src={student} alt=\"not Found\" />\n                        <CardContent theme={theme} height=\"50px\">\n                            <div>Student: 0 </div>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid xs={6} sm={3} md={3} >\n                    <Card theme={theme} className=\"margin2\">\n                        <CardTitle theme={theme}>\n                            Staff\n                        </CardTitle>\n                        \n                        <CardImg   height=\"100px\" src={staff} alt=\"not Found\" />\n                        <CardContent theme={theme} height=\"50px\">\n                                <div>Staff: 0</div>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid xs={6} sm={3} md={3} >\n                    <Card theme={theme} className=\"margin2\">\n                        <CardTitle theme={theme}>\n                            Parents\n                        </CardTitle>\n                        <CardImg   height=\"100px\" src={parent} alt=\"not Found\" />\n                        <CardContent theme={theme} height=\"50px\">\n                                <div>Parents : 0</div>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid xs={6} sm={3} md={3} >\n                    <Card theme={theme} className=\"margin2\">\n                        <CardTitle theme={theme}>\n                            Account\n                        </CardTitle>\n                        \n                        <CardImg   height=\"100px\" src={student} alt=\"not Found\" />\n                        <CardContent theme={theme} height=\"50px\">\n                                <div>Account : 0</div>\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Grid>\n            <Grid xs={12} item spacing={2} container >    \n                \n                <Grid  xs={12} md={6} >\n                    <Card theme={theme} height=\"500px\" className=\"margin2 \">\n                        <CardTitle theme={theme}>\n                            Agenda\n                        </CardTitle>\n                        <CardContent theme={theme} height=\"500px\"  className=\"scroll \">\n                            <div className=\"agenda scroll\">\n                                <Agenda />\n                            </div>\n                            \n                        </CardContent>\n                        \n                    </Card>\n                </Grid>\n                <Grid  xs={12} md={6} >\n                    <Card theme={theme} height=\"500px\" className=\"margin2\">\n                        <CardTitle theme={theme}>\n                            Notice Board\n                        </CardTitle>\n                        <CardContent theme={theme}  >\n                            \n                            <div className=\"agenda scroll\">\n                                <NoticeBoard />\n                            </div>\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n                <Grid  xs={12} sm={6} >\n                    <Card theme={theme} height=\"500px\" className=\"margin2 \">\n                        <CardTitle theme={theme}>\n                            Earning and Expenses\n                        </CardTitle>\n                        <CardContent theme={theme}  >\n                            \n                            <div className=\"scroll\">\n                                <Barchart />\n                            </div>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid  xs={12} sm={6} >\n                    <Card theme={theme} height=\"500px\" className=\"margin2\">\n                        <CardTitle theme={theme}>\n                            Notice Board\n                        </CardTitle>\n                        \n                        <CardImg   height=\"100px\" src={staff} alt=\"not Found\" />\n                        <CardContent theme={theme} height=\"50px\" className=\"scroll\">\n                            <Grid xs={2}>\n                                <div>Staff</div>\n                                <div>0</div>\n                            </Grid>\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n                \n                \n            </Grid>\n        </Wrapper>\n    )\n}","import styled from \"styled-components\"\n\n\nexport const Wrapper = styled.div`\n    height:100vh;\n`\n\n","import styled from 'styled-components';\nimport {PRIMARY_COLOR, SECONDARY_COLOR,WHITE_HEADER_COLOR,BLACK_HEADER_COLOR} from \"assets/colorsPallete\"\n\nexport const Wrapper = styled.div`\ncolor: ${({ theme }) => (theme === 'light' ? BLACK_HEADER_COLOR : WHITE_HEADER_COLOR)};\nmargin:1rem;\nz-index:1000;\n  a {\n\tmargin:0;\n\tpadding:0;\n\tz-index:500;\n    color: #000;\n\ttext-decoration: none;\n\twidth:100%;\n\tcolor: ${({ theme }) => (theme === 'light' ? BLACK_HEADER_COLOR : WHITE_HEADER_COLOR)};\n\t\t@media (max-width: 960px) {\n\t\t\tcolor: ${({ theme }) => (theme === 'light' ? BLACK_HEADER_COLOR : WHITE_HEADER_COLOR)};\n\t\t}\n  }\n\n  ${({ desktop }) =>\n    desktop\n      ? `\n\t\t\t\n\t\t\tdisplay: flex;\n\t\t\t\n\t\t\tcolor: ${({ theme }) => (theme === 'light' ? BLACK_HEADER_COLOR : WHITE_HEADER_COLOR)};\n\t\t\t@media (max-width: 960px) {\n\t\t\t\t\tdisplay: none;\n\t\t\t}\n\n\t\t\ta {\n\t\t\t\tmargin:0;\n\t\t\t\tpadding:0;\n\n\t\t\t\t\t&:last-child {\n\t\t\t\t\t\t\tmargin-right: unset;\n\t\t\t\t\t}\n\t\t\t}\n\t\t`\n      : `\n\t\t\t// padding: 3rem;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tz-index:500;\n\t\t\ta {\n\t\t\t\tmargin:0;\n\t\t\t\tpadding:0;\n\n\t\t\t\t\t&:last-child {\n\t\t\t\t\t\t\tmargin-bottom: unset;\n\t\t\t\t\t}\n\t\t\t}\n\t`}\n`;\n\n","import React, { useContext} from 'react';\nimport { ThemeContext } from 'providers/ThemeProvider';\nimport { Wrapper } from './styles';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport {Link} from \"react-router-dom\"\n\nfunction MinusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\n    </SvgIcon>\n  );\n}\n\nfunction PlusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\n    </SvgIcon>\n  );\n}\n\nfunction CloseSquare(props) {\n  return (\n    <SvgIcon className=\"close\" fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z\" />\n    </SvgIcon>\n  );\n}\n\n\n\n\n\nconst NavbarLinks = ({ desktop}) => {\n  const { theme } = useContext(ThemeContext);\n\n \n  return (\n    \n      \n      <Wrapper desktop={desktop} theme={theme}>\n        \n        <TreeView\n          // className={classes.root}\n          defaultExpanded={['1',\"4\",'7','12','15','20','25','30','34']}\n          defaultCollapseIcon={<MinusSquare />}\n          defaultExpandIcon={<PlusSquare />}\n          defaultEndIcon={<CloseSquare />}\n        >\n            <TreeItem nodeId=\"1\" label=\"section\">\n\n              <TreeItem nodeId=\"2\" label={\n              <div>\n                  <Link to=\"/AllSection\">section Table</Link>\n              </div>\n              \n              } />\n                <TreeItem nodeId=\"3\" label={\n              <div>\n                  <Link to=\"/AddNewSection\">Add New Section</Link>\n              </div>\n              \n              }/>\n            </TreeItem>\n            <TreeItem nodeId=\"4\" label=\"Class\">\n              <TreeItem nodeId=\"5\" label={\n                <Link to=\"/AllClasses\">\n                    All Classes\n                </Link>\n              } />\n                <TreeItem nodeId=\"6\" label={\n                  <Link to=\"/AddClass\">\n                    Add New Class\n                  </Link>\n                }/>\n            </TreeItem>\n            <TreeItem nodeId=\"7\" label=\"subject\">\n              \n              <TreeItem nodeId=\"9\" label = {<div>\n                  <Link to=\"/AddSubjects\">Add New Subjects</Link>\n              </div>}\n              />\n              \n              <TreeItem nodeId=\"10\" label={\n                <Link to=\"/AllSubject\">All Subjects </Link>\n              }/>\n              <TreeItem nodeId=\"8\" label= {\n                <Link to=\"/SubjectToClass\">Subject To Class</Link>\n              }/>\n              <TreeItem nodeId=\"11\" label={\n                <Link to=\"/SubjectClassTable\">All Subjects to Class </Link>\n              }/>\n            </TreeItem>\n            <TreeItem nodeId=\"12\" label=\"General Input\">\n              <TreeItem nodeId=\"13\" label={\n                <Link to=\"/GeneralInput\">\n                  General Input\n                </Link>\n              } />\n                <TreeItem nodeId=\"14\" label=\"Input Table\"/>\n            </TreeItem>\n            <TreeItem nodeId=\"15\" label=\"Dashboard\">\n              <TreeItem nodeId=\"16\" label={\n                <Link to=\"/AdminDashboard\">Admin</Link>\n              } />\n              <TreeItem nodeId=\"17\" label={\n                <Link to=\"/TeacherDashboard\">\n                  Teacher Dashboard\n                </Link>\n              }/>\n              <TreeItem nodeId=\"18\" label={\n                <Link to=\"/studentDashboard\">\n                  Student Dashboard\n                </Link>\n              }/>\n              <TreeItem nodeId=\"19\" label={\n                <Link to=\"/ParentDashboard\">\n                  ParentDashboard\n                </Link>\n              }/>\n            </TreeItem>\n            <TreeItem nodeId=\"20\" label=\"student\">\n              <TreeItem nodeId=\"21\" label={\n                <Link to=\"/StudentInfo\">\n                    All Students\n                </Link>\n              } />\n              <TreeItem nodeId=\"22\" label={\n                <Link to=\"/StudentDetails\">\n                    Student Details\n              </Link>\n              }/>\n              <TreeItem nodeId=\"23\" label={\n                <Link to=\"/AdmissionForm\" >\n                    Admission Form\n                </Link>\n              }/>\n              <Link to=\"/AssignClassStudent\">\n                <TreeItem nodeId=\"244\" label=\"Assign Student class\"/>\n              </Link>\n              <Link to=\"/StudentPromotion\">\n                <TreeItem nodeId=\"24\" label=\"Student Promotion\"/>\n              </Link>\n              <Link to=\"/StudentDemotion\">\n                <TreeItem nodeId=\"245\" label=\"Student Promotion\"/>\n              </Link>\n              \n            </TreeItem>\n\n            <TreeItem nodeId=\"25\" label=\"Teacher\">\n              <TreeItem nodeId=\"26\" label={\n                <Link to=\"/StaffsInfo\">\n                    All Teacher\n                </Link> }\n              />\n              <TreeItem nodeId=\"27\" label={\n                <Link to=\"/TeacherDetails\">\n                  Teacher Details\n                </Link>\n              }/>\n              <TreeItem nodeId=\"28\" label=\n              {\n                <Link to=\"/StaffForm\">\n                    Add staff\n                </Link>}\n              />\n              <Link to=\"/TeacherClassSubject\">\n                <TreeItem nodeId=\"28.0\" label=\"Class subject assignment\"/>\n              </Link>\n              <TreeItem nodeId=\"29\" label=\"Payment\"/>\n            </TreeItem>\n\n            <TreeItem nodeId=\"30\" label=\"Parent\">\n              <Link to=\"/AllParent\">\n                <TreeItem nodeId=\"31\" label=\"All Parent\" />\n              </Link>\n              \n              <Link to=\"/ParentsDetails\">\n                <TreeItem nodeId=\"32\" label=\"Parent Detail\"/>\n              </Link>\n              <Link to=\"/ParentRegistrationForm\">\n                <TreeItem nodeId=\"33\" label=\"Add Parent\"/>\n              </Link>\n              \n            </TreeItem>\n            <TreeItem nodeId=\"34\" label=\"Report Card\">\n              <Link to=\"/ReportTemplate\">\n                <TreeItem nodeId=\"35\" label=\"Report Template\" />\n              </Link>\n              \n              <TreeItem nodeId=\"36\" label=\"Parent Detail\"/>\n              <TreeItem nodeId=\"37\" label=\"Add Parent\"/>\n            </TreeItem>\n            <TreeItem nodeId=\"38\" label=\"Parent\">\n              <TreeItem nodeId=\"39\" label=\"All Parent\" />\n              <TreeItem nodeId=\"40\" label=\"Parent Detail\"/>\n              <TreeItem nodeId=\"41\" label=\"Add Parent\"/>\n            </TreeItem>\n            <TreeItem nodeId=\"42\" label=\"Parent\">\n              <TreeItem nodeId=\"43\" label=\"All Parent\" />\n              <TreeItem nodeId=\"44\" label=\"Parent Detail\"/>\n              <TreeItem nodeId=\"45\" label=\"Add Parent\"/>\n            </TreeItem>\n\n         \n        </TreeView>\n          \n      </Wrapper>\n    \n  )\n\n};\n\nexport default NavbarLinks;\n\n\n\n\n\n","import styled from 'styled-components';\nimport {PRIMARY_COLOR, SECONDARY_COLOR} from \"assets/colorsPallete\"\n\nexport const Wrapper = styled.div`\n  background:transparent !important;\n  float:left;\n  border-right:solid;\n  z-index: 500;\n  overflow: auto;\n  top: 0px;\n  opacity: 1;\n  height: 100vh;\n  color: ${({ theme }) => (theme === 'light' ? PRIMARY_COLOR :SECONDARY_COLOR)};\n  /* transition: all 350ms cubic-bezier(0.6, 0.05, 0.28, 0.91); */\n  @media (max-width: 960px) {\n\t\t\t\tdisplay:none;\n\t\t\t}\n\n`;\n\nexport const Brand = styled.div`\n  color:#fff;\n  padding:19px;\n  background-color:#000;\n  z-index:1;\n  align-items:center;\n  text-align:center;\n  position:sticky;\n  top:0;\n  opacity:1;\n  border:solid outset;\n  a{\n    text-decoration:none;\n    color:#fff;\n  }\n  div{\n    \n  }\n\n  @media (max-width: 960px) {\n    mix-blend-mode: ${({ theme }) => (theme === 'light' ? 'unset' : 'difference')};\n  }\n`;\n","import styled from 'styled-components';\nimport {WHITE_HEADER_COLOR,BLACK_HEADER_COLOR} from \"assets/colorsPallete\"\n\nexport const Wrapper = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  transition: 0.3s all;\n  /* background-color:${({theme})=>theme===\"light\"? BLACK_HEADER_COLOR :\"none\"}; */\n\n  &:focus {\n    outline: none;\n    transition: 0.3s all;\n  }\n\n  @media (max-width: 960px) {\n    text-align: left;\n  }\n\n  img {\n    margin-bottom: unset;\n  }\n`;\n\n\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'providers/ThemeProvider';\nimport sunIcon from 'assets/icons/sun.svg';\nimport moonIcon from 'assets/icons/moon.svg';\nimport { Wrapper } from './styles';\n\nconst ToggleTheme = () => {\n  const { theme, toggleTheme } = useContext(ThemeContext);\n  \n  return (\n    <Wrapper type=\"button\" onClick={toggleTheme} theme={theme}>\n      <img src={theme === 'light' ? moonIcon : sunIcon} alt={theme} />\n    </Wrapper>\n  );\n};\n\nexport default ToggleTheme;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'providers/ThemeProvider';\nimport NavbarLinks from '../NavbarLinks';\nimport { Wrapper,Brand } from './styles';\nimport ToggleTheme from 'components/theme/Header/ToggleTheme';\nimport {Link} from \"react-router-dom\"\nconst Navbar = ({ sidebar, toggle }) => {\n  const { theme } = useContext(ThemeContext);\n  \n  return (\n  <Wrapper   theme={theme}>\n    <Brand  to=\"/\" theme={theme}>\n        {/* <img src={dfulogo} alt=\"logo image\" height=\"400px\" width=\"400px\"/> */}\n        <Link to=\"/\">\n          <b>GBHS MUTENGENE</b>\n        </Link>\n          <ToggleTheme /> \n        \n    </Brand>\n    <NavbarLinks desktop/>\n  </Wrapper>\n  )\n};\n\nexport default Navbar;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  z-index: 11000;\n  top: 1.6rem;\n  right: 1.8rem;\n  display: none;\n  cursor: pointer;\n  transition: left 500ms cubic-bezier(0.6, 0.05, 0.28, 0.91);\n  position: absolute;\n\n  @media (max-width: 960px) {\n    display: block;\n  }\n\n  ${({ sidebar }) =>\n    sidebar &&\n    `\n\t\t\tright: 18%;\n\t\t\ttop: 1.4rem;\n\t\t\n\t\t\t@media (max-width: 960px) {\n\t\t\t\tright: 35%;\n\t\t\t\tposition: fixed;\n\t\t\t}\n\t\t\n\t\t\t@media (max-width: 600px) {\n\t\t\t\tright: 66%;\n\t\t\t}\n\t`}\n`;\n\nexport const Bar = styled.div`\n\twidth: 1.6rem;\n\theight: .15rem;\n\tmargin-bottom: .3rem;\n\tbackground-color: white;\n\ttransition: transform 500ms cubic-bezier(0.6, 0.05, 0.28, 0.91),\n\topacity 500ms,\n\tbox-shadow 250ms,\n\tbackground-color 500ms;\n\tz-index:11000;\n\t@media (max-width: 600px){\n\t\twidth: 1.6rem;\n\t}\n\n\t${({ top, sidebar, theme }) =>\n    top &&\n    sidebar &&\n\t\t`\n\t\tbackground-color: ${(theme === 'light' ? 'white' : '#fff')};\n\t\ttransform: translateY(8px) rotate(-135deg);\n\t\t\n\t`}\n\n\t${({ mid, sidebar }) =>\n    mid &&\n    sidebar &&\n\t\t`\n\t\ttransform: scale(0);\n\t\t`}\n\n\t${({ bottom, sidebar, theme }) =>\n    bottom &&\n    sidebar &&\n\t\t`\n\t\t\tbackground-color: ${(theme === 'light' ? 'white' : '#fff')};\n\t\t\ttransform: translateY(-6px) rotate(-45deg);\n\t`}\n`;\n","import React, {useContext} from 'react';\nimport { ThemeContext } from 'providers/ThemeProvider';\nimport { Wrapper, Bar } from './styles';\n\nconst Hamburger = ({ sidebar, toggle }) => {\n\n  const { theme } = useContext(ThemeContext);\n  \n  return (\n    <Wrapper sidebar={sidebar} onClick={() => toggle(!sidebar)}>\n      <Bar top sidebar={sidebar} theme={theme}/>\n      <Bar mid sidebar={sidebar} theme={theme} />\n      <Bar bottom sidebar={sidebar} theme={theme} />\n    </Wrapper>\n  )\n};\n\nexport default Hamburger;\n","import styled from 'styled-components';\nimport {PRIMARY_COLOR, SECONDARY_COLOR} from \"assets/colorsPallete\"\nexport const Wrapper = styled.div`\n  float:right;\n  top:0;\n  z-index: 500;\n  overflow: auto;\n  top: 0px;\n  right: -275px;\n  width: 0;\n  opacity: 0;\n  height: 100vh;\n  background-color: ${({ theme }) => (theme === 'light' ? PRIMARY_COLOR :SECONDARY_COLOR)};\n  transition: all 350ms cubic-bezier(0.6, 0.05, 0.28, 0.91);\n  @media (min-width: 960px) {\n\t\t\t\tdisplay:none;\n\t\t\t}\n\n  ${({ active }) =>\n    active &&\n    `\n\t\t\twidth: 20%;\n\t\t\tright: 0px;\n      opacity: 1;\n      \n\n\t\t\t@media (max-width: 960px) {\n\t\t\t\twidth: 40%;\n\t\t\t}\n\n\t\t\t@media (max-width: 600px) {\n\t\t\t\twidth: 75%;\n\t\t\t}\n\t`}\n`;\n\nexport const Brand = styled.div`\n  /* color: ${({ theme }) => (theme === 'light' ? '#000' : '#fff')}; */\n  color:#fff;\n  padding:20px ;\n  /* background-color:${({ theme }) => (theme === 'light' ? '#fff'  : '#000')}; */\n  background-color:#000;\n  z-index:1;\n  align-items:center;\n  text-align:center;\n  position:sticky;\n  top:0;\n  opacity:1;\n  border:solid outset;\n  div{\n    \n  }\n\n  @media (max-width: 960px) {\n    mix-blend-mode: ${({ theme }) => (theme === 'light' ? 'unset' : 'difference')};\n  }\n`;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'providers/ThemeProvider';\nimport NavbarLinks from '../NavbarLinks';\nimport { Wrapper,Brand } from './styles';\nimport ToggleTheme from 'components/theme/Header/ToggleTheme';\nconst Sidebar = ({ sidebar, toggle }) => {\n  const { theme } = useContext(ThemeContext);\n  \n  return (\n  <Wrapper active={sidebar} onClick={toggle} theme={theme}>\n    {/* <Brand  to=\"/\" theme={theme}>\n        <img src={dfulogo} alt=\"logo image\" height=\"400px\" width=\"400px\"/>\n          <b>GBHS MUTENGENE</b>\n          <ToggleTheme /> \n    </Brand> */}\n    <NavbarLinks />\n  </Wrapper>\n  )\n};\n\nexport default Sidebar;\n","import styled from 'styled-components';\nimport {HEADER_PRIMARY_COLOR} from \"assets/colorsPallete\"\n\nexport const Wrapper = styled.div`\n  /* background: transparent; */\n  width: 100%;\n  opacity:0.8;\n  z-index:1000;\n  \n  top:0;\n  background-size:contain;\n  background-repeat:no-repeat;\n  /* min-height:100vh; */\n  \n  background-color:${({theme})=>(theme === \"light\"? HEADER_PRIMARY_COLOR :HEADER_PRIMARY_COLOR)};\n`;\n\nexport const Overlay = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  width: 100%;\n  height: 100%;\n  display: none;\n  transition: 0.4s;\n  \n  ${({ sidebar }) =>\n    sidebar &&\n    `\n\t\t\tdisplay: block;\n      z-index: -1;\t\n      \n  `}\n  @media (min-width:960px){\n    display:none;\n  }\n`;\nexport const Coat = styled.div`\n  \n  @media (min-width:960px){\n    display:none;\n  }\n`\n\n ","import styled from \"styled-components\"\nimport {breadCrumb_COLOR} from \"assets/colorsPallete\"\n\nexport const Wrapper = styled.div`\n    background-color:${breadCrumb_COLOR};\n    /* border: solid red; */\n    margin:0px;\n    padding:20px;\n    text-decoration:none;\n    position:sticky;\n    /* height:fit-content; */\n    top:0;\n    z-index:100;\n\n    a{\n        color:white;\n        padding:0.2rem;\n        margin:0px;\n    }\n`\n","import React,{useState} from \"react\"\nimport {Wrapper} from \"./styles\"\nimport {Link,useLocation} from \"react-router-dom\"\n\nexport const BreadCrumb = ()=>{\n    \n    // const [pathname, setPathname] = useState(window.location.pathname)\n    let location = useLocation();\n    return(\n        <Wrapper>\n            <Link to={location.pathname}>Home{location.pathname}</Link>\n        </Wrapper>\n    )\n}","import React, { useState, useContext } from 'react';\nimport Navbar from './Navbar';\nimport Hamburger from './Hamburger';\nimport Sidebar from './Sidebar';\nimport { Wrapper, Overlay,Coat } from './styles';\nimport {ThemeContext} from \"providers/ThemeProvider\"\nimport {BreadCrumb} from \"components/modules/BrowserSiteOutput\"\n\nexport const Header = () => {\n  const [sidebar, toggle] = useState(false);\n  const {theme} = useContext(ThemeContext)\n  \n  return (\n    <Wrapper theme={theme} >\n      <Coat>\n        <BreadCrumb />\n      </Coat>\n      \n      <Overlay sidebar={sidebar} onClick={() => toggle(!sidebar)} />\n      <Navbar />\n      <Hamburger sidebar={sidebar} toggle={toggle} />\n      <Sidebar sidebar={sidebar} toggle={toggle} />\n    </Wrapper>\n  );\n};\n","const options = [\n    {value:\"\", defaultValue:true, disabled:true, label:\"Section Language\"},\n    {value: \"English\", label: 'English'},\n    {value: \"French\", label: 'French'},\n    {value: 'Eng & Fren', label: 'Eng & Fren'},\n    {value: 'Chinesse', label: 'Chinesse'},\n    {value: 'German', label: 'German'},\n    {value: 'Spanish', label: 'Spanish'}\n ]\n export default options","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    margin:0px;\n    padding:0px;\n    background-color:rgb(236, 236, 236);\n    #Sectionform{\n        margin:2%;\n        background-color:white;\n        border:solid outset; \n\n    }\n`\nexport const Box = styled.div`\n    color:\"white\";\n    margin: 1% 10%;\n    padding:5px;\n    \n    border-radius:10px;\n`\nexport const Container = styled.div`\n    width:100%;\n    margin:2% 0 0% 0;\n    div{\n        width:100%;\n    }\n    input{\n        width:100%;\n        /* border:white solid; */\n        /* background-color:white; */\n        /* ::placeholder{\n            color:white;\n        } */\n    }\n\n`","import React,{useContext}  from \"react\"\nimport {Button, Card,Grid,CardBody,CardTitle} from \"components/common\"\nimport {Formik, Field, Form, FieldArray} from  \"formik\"\nimport * as Yup from \"yup\"\n// import toast from \"../../components/decoration/toast\"\nimport options from \"components/common/languages/languages\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n// import Select from '@material-ui/core/Select'\n// import MenuItem from '@material-ui/core/MenuItem';\n// import DeleteForeverIcon from '@material-ui/icons/DeleteForever';\n// import DoneIcon from '@material-ui/icons/Done';\n// import InputAdornment from \"@material-ui/core/InputAdornment\"\n// import Button from \"@material-ui/core/Button\"\n\nimport {Wrapper,Box,Container} from \"./styles\"\nimport { ThemeContext } from 'providers/ThemeProvider';\n\nexport const Section = ()=>{\n\n    const { theme } = useContext(ThemeContext);\n\n     let initialValues = {\n        \n        section:[{\n            id:\"\",\n            sectionName:\"\",\n            sectionLanguage:\"\",\n        }],\n     }\n    \n    let validationSchema = Yup.object({\n        section: Yup.array().nullable().of(\n            Yup.object({\n                id: Yup.number().nullable().required(\"enter section ID\"),\n                sectionName: Yup.string().nullable().required(\"enter section\").min(3,\"Greater than 3 letters\"),\n                sectionLanguage: Yup.string().nullable().required(\"enter Language\")\n            })\n        )\n    })\n    let onSubmit = async (values, onSubmitProps) =>{\n        onSubmitProps.setSubmitting(true)\n        // toast.success(\"BasicConfiguration\",{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n        \n        let res = await fetch(\"/api/sectionapi\",\n        {\n            method:\"POST\",\n            body: JSON.stringify(values),\n            headers:{\n                cookies:\"name\"\n            }\n        })\n        onSubmitProps.resetForm(true)\n        // trigger(\"/api/a\")\n    }\n    let onReset = ()=>{\n        // \n    }\n\n    return (\n        \n            <Wrapper >\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={onSubmit}\n                        onReset={onReset}\n                        >\n                        {({\n                                \n                                errors,\n                                touched,\n                                isValid,\n                                dirty,\n                                handleChange,\n                                handleBlur,\n                                handleSubmit,\n                                isSubmitting,\n                                setFieldValue,\n                                getFieldProps\n                                /* and other goodies */\n                            })=>(\n                            <Form onSubmit={handleSubmit} >\n                                <Card theme={theme} scroll=\"none\">\n                                    <CardTitle theme={theme}>\n                                       Add New Section \n                                    </CardTitle>\n                                    \n                                \n                                    <CardBody theme={theme} scroll=\"none\">\n                                    {/* <Grid xs={4} margin=\"auto 24px\">\n                                        <label  className=\"\" >Section ID</label>\n                                        <label  className=\"\" >Section Name</label>\n                                        <label  className=\"\" >Section Language</label>\n                                        <label  className=\"d-none d-lg-block\" >del</label>\n                                        <label  className=\"d-none d-lg-block\" >add</label>\n                                    </Grid> */}\n                                    <FieldArray name=\"section\">\n                                        {   \n                                            (fieldprops,index)=>{\n                                                let {push,remove,form} = fieldprops\n                                                const {values} = form\n                                                const {section} = values \n                                            return(\n                                                <div key={index}>\n                                                {\n                                                    section.map((value,index)=>{\n                                                        return(\n                                                            <div key={index}>\n                                                                <Box>\n                                                                    <Grid  theme={theme} >\n                                                                        \n\n                                                                        \n                                                                        {/* <div > */}\n                                                                        <Container>\n                                                                            <label  className=\"\" >Section ID</label>\n                                                                        </Container>\n                                                                        \n                                                                        <Container>\n                                                                            <Field\n                                                                                    error={(((errors || {})[\"section\"] || {})[index] ||{})[\"id\"] && ((((touched || {})[\"section\"] || {})[index] ||{})[\"id\"])  ? true : false }\n                                                                                    label={((((errors || {})[\"section\"] || {})[index] ||{})[\"id\"]) && ((((touched || {})[\"section\"] || {})[index] ||{})[\"id\"]) ? errors[\"section\"][index][\"id\"] : \"section\" }\n                                                                                    {...getFieldProps(section[index].id)}\n                                                                                    component={TextField}\n                                                                                    type=\"number\"\n                                                                                    step=\"1\"\n                                                                                    value={value.id}\n                                                                                    placeholder=\"Section ID\"\n                                                                                    name={`section[${index}].id`}\n                                                                                    id={`section[${index}].id`}\n                                                                                    min=\"1\"\n                                                                                    variant=\"filled\"\n                                                                                />\n                                                                        </Container>\n                                                                                \n                                                                        {/* </div> */}\n                                                                        {/* <div> */}\n                                                                        <Container>\n                                                                            <label  className=\"\" >Section Name</label>\n                                                                        </Container>\n                                                                        <Container>\n                                                                            <Field\n                                                                                    \n                                                                                error={errors.hasOwnProperty(`section[${index}].sectionName`) && touched.hasOwnProperty(`section[${index}].sectionName`) ? true : false }\n                                                                                {...getFieldProps(section[index].sectionName)}\n                                                                                value={value.sectionName}\n                                                                                component={TextField}\n                                                                                placeholder=\"Section Name\"\n                                                                                name={`section[${index}].sectionName`}\n                                                                                id={`section[${index}].sectionName`}\n                                                                                variant=\"filled\"\n                                                                            />\n                                                                        </Container>\n                                                                        <Container>\n                                                                            <label  className=\"\" >Section Language</label>\n                                                                        </Container>\n                                                                        {/* <Container> */}\n                                                                        <div style={{margin:\"2% 0 2% 0\"}}>\n                                                                        <Field\n                                                                                \n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={value.sectionLanguage}\n                                                                                // defaultValue={values.Title}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(`section[${index}].sectionLanguage`, selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                options={options}\n                                                                                name={`section[${index}].sectionLanguage`}\n                                                                                id={`section[${index}].sectionLanguage`}\n                                                                                getOptionSelected = {(option,valuer)=> option.value == valuer.value}\n                                                                                getOptionLabel={option => option.value}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        name={`section[${index}].sectionLanguage`}\n                                                                                        error={(((errors || {})[\"section\"] || {})[index] ||{})[\"sectionLanguage\"] && ((((touched || {})[\"section\"] || {})[index] ||{})[\"sectionLanguage\"])  ? true : false }\n                                                                                        label={((((errors || {})[\"section\"] || {})[index] ||{})[\"sectionLanguage\"]) && ((((touched || {})[\"section\"] || {})[index] ||{})[\"sectionLanguage\"]) ? errors[\"section\"][index][\"sectionLanguage\"] : \"sectionLanguage\" }\n                                                                                        variant=\"filled\"    \n                                                                                    \n                                                                                    />\n                                                                                    </>\n                                                                                \n                                                                                )}\n\n                            \n                                                                            />\n                                                                        </div>\n                    \n                                                                        {/* <Card theme={theme} scroll=\"none\"> */}\n                                                                            <Grid xs={2} md={4}>\n                                                                                {index >= 1 ? <Button  backgroundColor=\"red\" margin=\"0 2% 2% 0\"  type=\"button\" onClick={()=>remove(index)}>X</Button> :null}\n                                                                                <Button margin=\"0 2% 2% 0\"  type=\"button\" onClick={\n                                                                                    ()=>push({\n                                                                                            id:\"\",\n                                                                                            sectionName:\"\",\n                                                                                            sectionLanguage:\"\",\n                                                                                        })} disabled={!(dirty && isValid )\n                                                                                    }>\n                                                                                        +\n                                                                                </Button>\n                                                                            </Grid>\n                                                                        {/* </Card> */}\n                                                                        \n                                                                    </Grid>\n                                                                </Box>\n                                                            </div>\n                                                        )\n                                                    })\n                                                }\n                                                \n                                                </div>\n                                            )  \n                                            }\n                                        }\n                                    </FieldArray>\n                                    </CardBody>\n                                    <Box>\n                                        <Grid  xs={2} md={4} sm={2} lg={4} >\n                                            \n                                            {!(dirty && isValid ) ? <Button margin=\"0 2% 0 0\"  disabled={!(dirty && isValid )} type=\"submit\"  >submit</Button>:<Button margin=\"0 2% 0 0\"   type=\"submit\"  >submit</Button>}\n                                            \n                                            <Button as=\"button\" type=\"reset\" margin=\"0 2% 0 0\" backgroundColor=\"#ebdd25\">reset</Button>\n                                        </Grid>\n                                    </Box>\n                                    \n                                </Card>       \n                            </Form>\n                            )\n}                   \n                    </Formik>\n            </Wrapper>\n        \n    )\n}\n\n\n// export async function getStaticProps(){\n//     return{\n//         props:{\n\n//         }\n//     }\n// }\n","import styled from \"styled-components\"\n\nexport const Wrappper   = styled.div`\n    margin:2%;\n`","import React , {useState,useEffect} from \"react\"\nimport {Button,Select, Table,TableBody,TableData,TableRow,Input} from \"components/common\"\n// import useSWR from \"swr\"\n// import toast from \"../../components/decoration/toast\"\nimport {BsXOctagonFill,BsPen} from \"react-icons/bs\"\nimport {Formik,Form, FastField} from \"formik\"\nimport options from \"components/common/languages/languages\"\nimport {Wrappper} from \"./styles\"\n\n// import SectionDatabase from \"../../database/sectiondatabase\"\n\n// let BrowserSiteOutput = dynamic(\n//     ()=>import(\"../../components/browserSiteOutput\").then((mod)=>mod.BrowserSiteOutput),\n//         {ssr:false})\n\nlet AllSection = ({totalsections})=>{\n    let property = [\n        \"id\",\n        \"section\",\n        \"language\",\n        \"Modifier\"\n    ]\n\n    // let {data, error} = useSWR('/api/sectionapi')\n    let data =  [\n        {\n            id:1,\n            id_:1,\n            section:\"English section\",\n            languages:\"English\"\n        },\n        {   \n            id:2,\n            id_:2,\n            section:\"French section\",\n            languages:\"French\"\n        },\n        {\n            id:3,\n            id_:3,\n            section:\"French section\",\n            languages:\"French\"\n        },\n        {\n            id:4,\n            id_:4,\n            section:\"French section\",\n            languages:\"French\"\n        }\n    ]\n    // console.log(\"Sectiondata::\",data)\n    // data = data || totalsections\n    // console.log(\"Sectiondata2::\",data[1])\n    let stater = (data)=>{\n        let state = {}\n        if(data){\n            for(let d of data){\n                state[`displayon${d.id || d[property[1]]}`]=\"table-row\"\n                state[`displayoff${d.id || d[property[1]]}`]=\"none\"\n            }\n            console.log(\"state::\",state)\n            return state\n        }\n        return null\n    }\n    let [initialState, setInitialState] = useState(null)\n    let [initialdisplay, setInitialdisplay] = useState(stater(data))\n    \n    \n    useEffect(()=>{\n        setInitialdisplay((previousState)=>({\n            \n            ...stater(data),\n            ...previousState,\n        }))\n    },[data])\n       \n    let initialFormValue=[]\n    let onsubmitForm = (values,submittingProps)=>{\n        \n    }\n    return (\n        <React.Fragment>\n            {/* <Layout> */}\n                <Wrappper>\n                    {/* <h3 className=\"bg-light rounded\">Section</h3> */}\n                    {/* <BrowserSiteOutput /> */}\n                        <Formik\n                            initialValues={initialState || initialFormValue}\n                            onSubmit={onsubmitForm}\n                            enableReinitialize\n                            >\n                                {\n                                    ({handleBlur,handleChange,handleSubmit,values,getFieldProps})=>{\n                                        return(\n                                            <Form onSubmit={handleSubmit}>\n                                                <Table responsive >\n                                                    \n                                                    <TableRow>\n                                                        {/* <TableHeader>  */}\n                                                        {\n                                                            property.map((value,index)=>{\n                                                                return(\n                                                                    <TableData key={value+String(index)}>{value}</TableData>\n                                                                )\n                                                            })\n                                                        }\n                                                            \n                                                           \n                                                        {/* </TableHeader> */}\n                                                    </TableRow>\n                                                \n                                                    <TableBody>\n                                                        {\n                                                            data ? data.map((value,index)=>{\n                                                                return (\n                                                                    <React.Fragment key={value.id_}>\n                                                                        <TableRow style={{display:initialdisplay[`displayon${value.id_}`]}}>\n                                                                            <TableData >{value.id_}</TableData>\n                                                                            <TableData>{value.section}</TableData>\n                                                                            <TableData>{value.languages}</TableData>\n                                                                            <TableData>\n                                                                                \n                                                                                    <Button width=\"fit-content\" margin=\"2px\" padding=\"0px\" onClick = {()=>{\n                                                                                        \n                                                                                                    setInitialdisplay((previousState)=>({\n                                                                                                        ...previousState,\n                                                                                                        \n                                                                                                        [`displayon${value.id_}`]:\"none\",\n                                                                                                        [`displayoff${value.id_}`]:\"table-row\"\n                                                                                                    \n                                                                                                }))\n                                                                                                    setInitialState((previousState)=>({\n                                                                                                            ...previousState,\n                                                                                                            [`section${value.id_}`]:{\n                                                                                                                id_ : value.id_,\n                                                                                                                section:value.section,\n                                                                                                                languages:value.languages\n                                                                                                            },\n                                                                                                        \n                                                                                                    }))\n                                                                                    }} \n                                                                                    ><BsPen color=\"black\" />\n                                                                                        \n                                                                                    </Button>\n                                                                                \n                                                                                    <Button width=\"fit-content\" margin=\"2px\" padding=\"0px\" type=\"button\"  onClick={async ()=>{\n                                                                                            let responce = await fetch(\"/api/sectionapi\",{\n                                                                                                method:\"DELETE\",\n                                                                                                body:JSON.stringify({\n                                                                                                    section:{\n                                                                                                        id_:value.id_,\n                                                                                                        languages:value.languages,\n                                                                                                        section:value.section\n                                                                                                    }\n                                                                                                })\n                                                                                            })\n                                                                                            // await toast.success(`${JSON.stringify(responce)} was deleted`,{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n                                                                                        }}><BsXOctagonFill color=\"black\" className=\"m-2\"/>\n                                                                                            \n                                                                                </Button>\n                                                                            </TableData>\n                                                                            \n                                                                        </TableRow>\n                                                                        <TableRow style={{display:initialdisplay[`displayoff${value.id_}`]}}>\n                                                                            <TableData>\n                                                                            <FastField \n                                                                                as={Input}\n                                                                                {...getFieldProps(`section${value.id_}.id_`)}\n                                                                                name={`section${value.id_}.id_`}\n                                                                                readOnly = {true}\n                                                                                value={value.id_}\n                                                                                type=\"number\"\n                                                                                min=\"1\"\n                                                                                step=\"1\"\n                                                                                />\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    {...getFieldProps(`section${value.id_}.section`)}\n                                                                                    name={`section${value.id_}.section`}\n                                                                                    as={Input}\n        \n                                                                                    value={values[`section${value.id_}`]? values[`section${value.id_}`].section :\"\"}\n                                                                                    \n                                                                                    \n                                                                                /></TableData>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    as={Select}\n                                                                                \n                                                                                    {...getFieldProps(`section${value.id_}.languages`)}\n                                                                                    name={`section${value.id_}.languages`}\n                                                                                    value={values[`section${value.id_}`] ? values[`section${value.id_}`].languages:\"\"}\n                                                                                    className=\"bg-secondary p-1 rounded w-100\"\n                                                                                    >\n                                                                                        {\n                                                                                            options.map((value1,index)=>{\n                                                                                                return (\n                                                                                                    <option key={index} value={value1.value} label={value1.label}/>\n                                                                                                )\n                                                                                            })\n                                                                                        }\n                                                                                </FastField>\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                \n                                                                                            <Button width=\"fit-content\" margin=\"2px\" padding=\"0px\" onClick = {async ()=>{\n                                                                                                \n                                                                                                setInitialdisplay((previousState)=>({\n                                                                                                    ...previousState,\n                                                                                                    \n                                                                                                    [`displayon${value.id_}`]:\"table-row\",\n                                                                                                    [`displayoff${value.id_}`]:\"none\"\n                                                                                                \n                                                                                            }))\n                                                                                            delete initialState[`section${value.id_}`]\n                                                                                                setInitialState((previousState)=>({\n                                                                                                        ...initialState\n                                                                                                }))\n                                                                                                }\n                                                                                            }\n                                                                                            >\n                                                                                                x\n                                                                                            </Button>\n                                                                                       \n                                                                                            <Button width=\"fit-content\" margin=\"2px\" padding=\"0px\" onClick={async ()=>{\n                                                                                                    let responce = await fetch(\"/api/sectionapi\",{\n                                                                                                        method:\"PUT\",\n                                                                                                        body:JSON.stringify(values[`section${value.id_}`])\n                                                                                                    })\n                                                                                                    setInitialdisplay((previousState)=>({\n                                                                                                        ...previousState,\n                                                                                                        [`displayon${value.id_}`]:\"table-row\",\n                                                                                                        [`displayoff${value.id_}`]:\"none\"\n                                                                                                    \n                                                                                                }))\n                                                                                                    // toast.success(`${JSON.stringify(responce)} was deleted`,{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n                                                                                                }}><BsXOctagonFill color=\"black\" className=\"m-2\"/>\n                                                                                            </Button>\n                                                                                        \n                                                                            </TableData>\n                                                                        </TableRow>\n                                                                    </React.Fragment>\n                                                                    \n                                                                )\n                                                            }):null\n                                                        }\n                                                        \n                                                    </TableBody>\n                                                </Table>\n                                            </Form>\n                                  )\n                                }\n                            }\n                        </Formik>\n                </Wrappper>\n            {/* </Layout> */}\n        </React.Fragment>\n    )\n}\n// export async function getStaticProps(){\n//     let section = new SectionDatabase()\n//     let totalsections = await section.getSection()\n//     return{\n//         props:{\n//             totalsections,\n//         }\n//     }\n// }\nexport  {AllSection}","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    \n`\nexport const Box = styled.div`\n    color:\"white\";\n    margin: 1% 10%;\n    padding:5px;\n    border-radius:10px;\n`\nexport const Container = styled.div`\n    width:100%;\n    margin:2% 0 0% 0;\n    div{\n        width:100%;\n    }\n    input{\n        width:100%;\n        /* border:white solid; */\n        /* background-color:white; */\n        /* ::placeholder{\n            color:white;\n        } */\n    }\n\n`","import React, {useContext}  from \"react\"\n\nimport {ThemeContext} from \"providers/ThemeProvider\"\n\nimport {Button, Card, Grid, CardTitle} from \"components/common\"\nimport {Formik, Field, Form, FieldArray} from  \"formik\"\nimport {Wrapper,Container,Box} from \"./styles\"\nimport * as Yup from \"yup\"\n\nimport TextField from \"@material-ui/core/TextField\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n// import toast from \"../../components/decoration/toast\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\n\n// import useSWR from \"swr\"\n// let Select = dynamic(\n//     ()=>import(\"react-select\"),\n//         {ssr:false})\n// let SelectField = dynamic(\n//     ()=>import(\"../../components/myselect/select\"),\n//         {ssr:false})\n// let BGridserSiteOutput = dynamic(\n//     ()=>import(\"../../components/bGridserSiteOutput\").then((mod)=>mod.BGridserSiteOutput),\n//         {ssr:false})\n\n// const customStyles = {}\nlet sectionOptions =  [\n    {\n        id_:1,\n        section:\"English section\",\n        languages:\"English\"\n    },\n    {\n        id_:2,\n        section:\"French section\",\n        languages:\"French\"\n    },\n    {\n        id_:2,\n        section:\"French section\",\n        languages:\"French\"\n    },\n    {\n        id_:2,\n        section:\"French section\",\n        languages:\"French\"\n    }\n]\n\nlet AddSubjects = ({sectionAll})=>{\n    // const router = useRouter()\n    let {theme} = useContext(ThemeContext)\n    \n    \n    \n    // let {data , error} = useSWR(\"/api/sectionapi\")\n    // let sectionOptions = data || sectionAll\n    // console.log(\"sectionAll::\",sectionAll)\n     let initialValues = {\n        \n        subject:[{\n            id:\"\",\n            subjectName:\"\",\n            sectionTaught:\"\",\n        }],\n     }\n    \n    let validationSchema = Yup.object({\n        subject: Yup.array().nullable().of(\n            Yup.object({\n                id: Yup.number().nullable().required(\"enter section ID\").min(3,\"least three digits\"),\n                subjectName: Yup.string().nullable().required(\"enter section\").min(3,\"least 3 letters\"),\n                sectionTaught: Yup.string().nullable().required(\"enter Language\")\n            })\n        )\n    })\n    let onSubmit = async (values, onSubmitProps) =>{\n        onSubmitProps.setSubmitting(true)\n        \n        // toast.success(\"BasicConfiguration\",{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n        // {console.log(\"valuess::\",values)}\n        let res = await fetch(\"/api/subjectapi\",\n        {\n            method:\"POST\",\n            body: JSON.stringify(values),\n            headers:{\n                cookies:\"name\"\n            }\n        })\n        onSubmitProps.resetForm(true)\n        console.log(\"res::\",res)\n        if(res.status===400){\n            // router.push(\"/section/sections\")\n        }\n        // trigger(\"/api/a\")\n    }\n    let onReset = ()=>{\n        // \n    }\n\n    return (\n        <React.Fragment>\n                <Wrapper>\n                    <CardTitle >\n                        Add New Subject\n                    </CardTitle>\n                    <Box>\n                        <Formik\n                            initialValues={initialValues}\n                            validationSchema={validationSchema}\n                            onSubmit={onSubmit}\n                            onReset={onReset}\n                            >\n                            {({\n                                    values,\n                                    errors,\n                                    touched,\n                                    isValid,\n                                    dirty,\n                                    handleChange,\n                                    handleBlur,\n                                    handleSubmit,\n                                    isSubmitting,\n                                    setFieldValue,\n                                    getFieldProps\n                                    /* and other goodies */\n                                })=>(\n                                <Form onSubmit={handleSubmit}>\n                                <Card >\n\n                                    <FieldArray name=\"subject\">\n                                        \n                                        {   \n                                            (fieldprops,index)=>{\n                                                let {push,remove,form} = fieldprops\n                                                const {values} = form\n                                                const {subject} = values \n                                            return(\n                                                <div key={index}>\n                                                {\n                                                    subject.map((value,index)=>{\n                                                        \n                                                        return(\n                                                            <div key={index}>\n                                                                <Grid>\n                                                                    <Container>\n                                                                        <label  className=\"\" >Class ID</label>\n                                                                    </Container>\n                                                                    \n                                                                    <Container>\n                                                                        <Field\n                                                                                error={(((errors || {})[\"subject\"] || {})[index] ||{})[\"id\"] && ((((touched || {})[\"subject\"] || {})[index] ||{})[\"id\"])  ? true : false }\n                                                                                label={((((errors || {})[\"subject\"] || {})[index] ||{})[\"id\"]) && ((((touched || {})[\"subject\"] || {})[index] ||{})[\"id\"]) ? errors[\"subject\"][index][\"id\"] : \"class id\" }\n                                                                                {...getFieldProps(subject[index].id)}\n                                                                                component={TextField}\n                                                                                type=\"number\"\n                                                                                step=\"1\"\n                                                                                value={value.id}\n                                                                                placeholder=\"Subject ID\"\n                                                                                name={`subject[${index}].id`}\n                                                                                id={`subject[${index}].id`}\n                                                                                min=\"1\"\n                                                                                variant=\"filled\"\n                                                                            />\n                                                                    </Container>\n                                                                        <Container>\n                                                                        <label   >Subject Name</label>\n                                                                        </Container>\n                                                                        \n                                                                        <Container>\n                                                                            <Field\n                                                                                    error={(((errors || {})[\"subject\"] || {})[index] ||{})[\"subjectName\"] && ((((touched || {})[\"subject\"] || {})[index] ||{})[\"subjectName\"])  ? true : false }\n                                                                                    label={((((errors || {})[\"subject\"] || {})[index] ||{})[\"subjectName\"]) && ((((touched || {})[\"subject\"] || {})[index] ||{})[\"subjectName\"]) ? errors[\"subject\"][index][\"subjectName\"] : \"subject Name\" }\n                                                                                    {...getFieldProps(subject[index].subjectName)}\n                                                                                    component={TextField}\n                                                                                    value={value.clas}\n                                                                                    placeholder=\"subject Name\"\n                                                                                    name={`suject[${index}].subjectName`}\n                                                                                    id={`subject[${index}].subjectName`}\n                                                                                    \n                                                                                    variant=\"filled\"\n                                                                                />\n                                                                        </Container>\n                                                                        <Container>\n                                                                            Section Taught\n                                                                        </Container>\n                                                                        <div style={{margin:\"2% 0 2% 0\"}}>\n                                                                            <Field\n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={value.sectionTaught}\n                                                                                // defaultValue={values.Title}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(`subject[${index}].sectionTaught`, selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                options={sectionOptions}\n                                                                                name={`subject[${index}].sectionTaught`}\n                                                                                id={`subject[${index}].sectionTaught`}\n                                                                                getOptionSelected = {(option,valuer)=> option.id_ == valuer.id_}\n                                                                                getOptionLabel={option => option.section}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        name={`subject[${index}].sectionTaught`}\n                                                                                        error={(((errors || {})[\"subject\"] || {})[index] ||{})[\"sectionTaught\"] && ((((touched || {})[\"subject\"] || {})[index] ||{})[\"sectionTaught\"])  ? true : false }\n                                                                                        label={((((errors || {})[\"subject\"] || {})[index] ||{})[\"sectionTaught\"]) && ((((touched || {})[\"subject\"] || {})[index] ||{})[\"sectionTaught\"]) ? errors[\"subject\"][index][\"sectionTaught\"] : \"section Taught\" }\n                                                                                        variant=\"filled\"    \n                                                                                    \n                                                                                    />\n                                                                                    </>\n                                                                                \n                                                                                )}\n\n                            \n                                                                            />\n                                                                        </div>\n                                                                        \n                                                                        \n                                                                    \n                                                                                \n                                                                \n                                                                    <Card theme={theme} scroll=\"none\">\n                                                                        <Grid xs={2} md={4}>\n                                                                            {index >= 1 ? <Button backgroundColor=\"red\" margin=\"0 2% 0 0\" type=\"Button\" onClick={()=>remove(index)}>X</Button> :null}\n                                                                        \n                                                                            <Button margin=\"0 2% 0 0\"  type=\"Button\" onClick={\n                                                                                ()=>push({\n                                                                                        id:\"\",\n                                                                                        subjectName:\"\",\n                                                                                        sectionTaught:\"\",\n                                                                                    })} disabled={!(dirty && isValid || isSubmitting) \n                                                                                    }>+</Button>\n                                                                        </Grid>\n                                                                    </Card>\n                                                                    \n                                                                </Grid>\n                                                                \n                                                            </div>\n                                                        )\n                                                    })\n                                                }\n                                                \n                                                </div>\n                                            )  \n                                            }\n                                        }\n                                    </FieldArray>\n                                    \n                                    <div>\n                                        \n                                        {!(dirty && isValid || isSubmitting) ? <Button margin=\"2% 2% 0 0\"  disabled={!(dirty && isValid || isSubmitting)} type=\"submit\">submit</Button>:<Button margin=\"2% 2% 0 0\" as=\"Button\"  type=\"submit\">submit</Button>}\n                                        \n                                        <Button margin=\"2% 2% 0 0\" backgroundColor=\"yellow\" type=\"reset\" className=\"pl-5 pr-5 m-2 bg-warning\" >reset</Button>\n                                    </div>  \n                                \n                                </Card>       \n                                </Form>\n                                \n                            \n                                )\n    }                   \n                        </Formik>\n                    </Box>    \n                </Wrapper>\n        </React.Fragment>\n    )\n}\n\n\n// export async function getStaticProps(){\n//     let sections = new SectionDatabase()\n//     let sectionAll = await sections.getSection()\n//     return{\n//         props:{\n//             sectionAll\n//         }\n//     }\n// }\nexport  {AddSubjects}","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    margin:2%;\n`","import React , {useState,useEffect} from \"react\"\n// import dynamic from \"next/dynamic\"\n// import Table from \"react-bootstrap/Table\"\n// import Dropdown from \"react-bootstrap/Dropdown\"\n// import Button from \"react-bootstrap/Button\"\n// import useSWR from \"swr\"\n// import Layout from \"../../components/layout\"\n// import toast from \"../../components/decoration/toast\"\nimport {BsThreeDots,BsXOctagonFill,BsPen} from \"react-icons/bs\"\nimport {Formik,Form, FastField,} from \"formik\"\n// import options from \"components/languages/languages\"\n// import SubjectDatabase from \"../../database/subjectdatabase\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\n\nimport {Button,Select, Table,TableBody,TableData,TableRow,Input, CardTitle,TableHeader} from \"components/common\"\nimport {Wrapper} from \"./styles\"\nexport const Subject = ({totalsubjects, totalSection})=>{\n    let data = [\n        {\n            id:1,\n            subject:\"English\",\n            Section:{\n                id_:1,\n                section:\"English Section\"\n            }\n        }\n    ]\n    let sectorData = [\n        {\n            id_:1,\n            section:\"English Section\"\n        }\n    ]\n    // let {data:sectorData, error:sectorError} = useSWR('/api/sectionapi')\n    // let {data:data, error:subjectError} = useSWR('/api/subjectapi')\n    \n    // data = data || totalsubjects\n    let stater = (data)=>{\n        let state = {}\n        if(data){\n            for(let d of data){\n                state[`displayon${d.id}`]=\"table-row\"\n                state[`displayoff${d.id}`]=\"none\"\n            }\n            return state\n        }\n        return null\n    }\n    let [initialState, setInitialState] = useState(null)\n    let [initialdisplay, setInitialdisplay] = useState(stater(data))\n\n    useEffect(()=>{\n        setInitialdisplay((previousState)=>({\n            \n            ...stater(data),\n            ...previousState,\n        }))\n    },[data])\n       \n    let initialFormValue=[]\n    let onsubmitForm = (values,submittingProps)=>{\n        \n    }\n    return (\n        <React.Fragment>\n            \n                    <CardTitle >\n                        Subjects\n                    </CardTitle>\n                    <Wrapper>\n                        <Formik\n                            initialValues={initialState || initialFormValue}\n                            onSubmit={onsubmitForm}\n                            enableReinitialize\n                            >\n                                {\n                                    ({handleBlur,handleChange,handleSubmit,values,getFieldProps})=>{\n                                        return(\n                                            <Form onSubmit={handleSubmit}>\n                                                <Table responsive >\n                                                    \n                                                        <TableRow>\n                                                            {/* <TableHeader > */}\n                                                                <TableData>ID</TableData>\n                                                                <TableData>Subject</TableData>\n                                                                <TableData>Section</TableData>\n                                                                <TableData>Modifier</TableData>\n                                                            {/* </TableHeader> */}\n                                                        </TableRow>\n                                                    \n                                                    <TableBody>\n                                                        {\n                                                            data ? data.map((value,index)=>{\n                                                                return (\n                                                                    <React.Fragment key={value.id}>\n                                                                        <TableRow style={{display:initialdisplay[`displayon${value.id}`]}}>\n                                                                            <TableData >{value.id}</TableData>\n                                                                            <TableData>{value.subject}</TableData>\n                                                                            <TableData>{value.Section.section}</TableData>\n                                                                            <TableData>\n                                                                                <Button width=\"fit-content\" margin=\"2px\" padding=\"0px\"   onClick = {()=>{\n                                                                                    \n                                                                                                setInitialdisplay((previousState)=>({\n                                                                                                    ...previousState,\n                                                                                                    \n                                                                                                    [`displayon${value.id}`]:\"none\",\n                                                                                                    [`displayoff${value.id}`]:\"table-row\"\n                                                                                                \n                                                                                            }))\n                                                                                                setInitialState((previousState)=>({\n                                                                                                        ...previousState,\n                                                                                                        [`subject${value.id}`]:{\n                                                                                                            id : value.id,\n                                                                                                            subject:value.subject,\n                                                                                                            sectionID:value.Section.id_\n                                                                                                        },\n                                                                                                    \n                                                                                                }))\n                                                                                    }} \n                                                                                >\n                                                                                <BsPen color=\"black\" />\n                                                                                        \n                                                                                </Button>\n                                                                                <Button width=\"fit-content\" margin=\"2px\" padding=\"0px\" onClick={async ()=>{\n                                                                                        let responce = await fetch(\"/api/subjectapi\",{\n                                                                                            method:\"DELETE\",\n                                                                                            body:JSON.stringify({\n                                                                                                subject:{\n                                                                                                    id:value.id,\n                                                                                                    subject:value.subject,\n                                                                                                    sectionID:value.Section.id_\n                                                                                                }\n                                                                                            })\n                                                                                        })\n                                                                                        // await toast.success(`${JSON.stringify(responce)} was deleted`,{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n                                                                                    }}><BsXOctagonFill color=\"black\" className=\"m-2\"/>\n                                                                                        \n                                                                                </Button>\n                                                                            </TableData>\n                                                                        </TableRow>\n                                                                        <TableRow style={{display:initialdisplay[`displayoff${value.id}`]}}>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    as={Input}\n                                                                                    {...getFieldProps(`subject${value.id}.id`)}\n                                                                                    name={`subject${value.id}.id`}\n                                                                                    readOnly = {true}\n                                                                                    value={value.id}\n                                                                                    type=\"number\"\n                                                                                    min=\"1\"\n                                                                                    step=\"1\"\n                                                                                />\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    as={Input}\n                                                                                    {...getFieldProps(`subject${value.id}.subject`)}\n                                                                                    name={`subject${value.id}.subject`}\n                                                                                    value={values[`subject${value.id}`]? values[`subject${value.id}`].subject :\"\"}\n                                                                                    \n                                                                                \n                                                                                /> \n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    as={Select}\n                                                                                \n                                                                                    {...getFieldProps(`subject${value.id}.sectionID`)}\n                                                                                    name={`subject${value.id}.sectionID`}\n                                                                                    value={values[`subject${value.id}`] ? values[`subject${value.id}`].sectionID:\"\"}\n                                                                                    className=\"bg-secondary p-1 rounded w-100\"\n                                                                                    >\n                                                                                        {\n                                                                                            (totalSection || sectorData).map((value1,index)=>{\n                                                                                                return (\n                                                                                                    <option key={index} value={value1.id_} label={value1.section}/>\n                                                                                                )\n                                                                                            })\n                                                                                        }\n                                                                                </FastField>\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                \n                                                                                            <Button width=\"fit-content\" margin=\"2px\" padding=\"0px\"  onClick = {async ()=>{\n                                                                                                \n                                                                                                setInitialdisplay((previousState)=>({\n                                                                                                    ...previousState,\n                                                                                                    \n                                                                                                    [`displayon${value.id}`]:\"table-row\",\n                                                                                                    [`displayoff${value.id}`]:\"none\"\n                                                                                                \n                                                                                            }))\n                                                                                            delete initialState[`subject${value.id}`]\n                                                                                                setInitialState((previousState)=>({\n                                                                                                        ...initialState\n                                                                                                }))\n                                                                                                }\n                                                                                            }\n                                                                                            ><BsPen color=\"blue\" className=\"m-2\"/>\n                                                                                                \n                                                                                            </Button>\n                                                                                        \n                                                                                            <Button width=\"fit-content\" margin=\"2px\" padding=\"0px\"   onClick={async ()=>{\n                                                                                                    let responce = await fetch(\"/api/subjectapi\",{\n                                                                                                        method:\"PUT\",\n                                                                                                        body:JSON.stringify(values[`subject${value.id}`])\n                                                                                                    })\n                                                                                                    setInitialdisplay((previousState)=>({\n                                                                                                        ...previousState,\n                                                                                                        \n                                                                                                        [`displayon${value.id}`]:\"table-row\",\n                                                                                                        [`displayoff${value.id}`]:\"none\"\n                                                                                                    \n                                                                                                }))\n\n                                                                                                    // toast.success(`${JSON.stringify(responce)} was deleted`,{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n                                                                                                    \n                                                                                                }}><BsXOctagonFill color=\"grey\" className=\"m-2\"/>\n                                                                                                    \n                                                                                            </Button>\n                                                                                        \n                                                                            </TableData>\n                                                                        </TableRow>\n                                                                    </React.Fragment>\n                                                                    \n                                                                )\n                                                            }):null\n                                                        }\n                                                        \n                                                    </TableBody>\n                                                </Table>\n                                            </Form>\n                                  )\n                                }\n                            }\n                        </Formik>\n                </Wrapper>\n        </React.Fragment>\n    )\n}","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    \n`\n\nexport const Box = styled.div`\n    color:\"white\";\n    margin: 1% 10%;\n    padding:5px;\n    border-radius:10px;\n`\nexport const Container = styled.div`\n    width:100%;\n    margin:2% 0 0% 0;\n    div{\n        width:100%;\n    }\n    input{\n        width:100%;\n        /* border:white solid; */\n        /* background-color:white; */\n        /* ::placeholder{\n            color:white;\n        } */\n    }\n\n`","import React  from \"react\"\n// import dynamic from \"next/dynamic\"  //limit size error, if the size exceeds the limited size it fails without thGriding an error,hence denial of service attack. Medium vulnerability\n// import Card from \"react-bootstrap/Card\"\n// import Wrapper from \"react-bootstrap/Wrapper\"\n// import Col from \"react-bootstrap/Col\"\n// import  Grid  from \"react-bootstrap/Grid\"\n// import Button from \"react-bootstrap/Button\"\nimport {Formik, Field, Form, FieldArray, ErrorMessage} from  \"formik\"\nimport {Button,Card,Select,Input, CardTitle,Error,Grid} from \"components/common\"\nimport {Wrapper,Container, Box} from \"./styles\"\n// import Layout from \"../../components/layout\"\nimport * as Yup from \"yup\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n// import toast from \"../../components/decoration/toast\"\n// import useSWR from \"swr\"\n// import SubjectDatabase from \"../../database/subjectdatabase\"\n// import ClassesDatabase from \"../../database/classDatabase\"\n// import {Error} from \"../../components/error/Error\"\n// let Select = dynamic(\n//     ()=>import(\"react-select\"),\n//         {ssr:false})\n// let SelectField = dynamic(\n//     ()=>import(\"../../components/myselect/select\"),\n//         {ssr:false})\n\n\n// const customStyles = {}\n\nlet classOptions = [{\n    id:1,\n    class:\"Form 1\"\n},\n{\n    id:2,\n    class:\"Form 2\"\n}]\n\nlet subjectOptions = [{\n    id:1,\n    subject:\"History\"\n},\n{\n    id:2,\n    subject:\"Economy\"\n}]\n\nexport const SubjectToClass = ({AllSubject,AllClasss})=>{\n    // let {data:subjectData,error:subjectError} = useSWR(\"/api/subjectapi\")\n    // let {data:classsData,error:classsError} = useSWR(\"/api/classesapi\")\n    \n    // let subjectOptions = subjectData || AllSubject\n    // let classOptions = classsData || AllClasss\n\n     let initialValues = {\n        \n        subjectToClass:[{\n            id:\"\",\n            subject:\"\",\n            classs:\"\",\n            subjectCoefficient:\"\",\n        }],\n     }\n    \n    let validationSchema = Yup.object({\n        subjectToClass: Yup.array().nullable().of(\n            Yup.object({\n                id: Yup.number().nullable().required(\"enter  ID\"),\n                subject: Yup.string().nullable().required(\"enter subject\"),\n                classs: Yup.string().nullable().required(\"enter class\"),\n                subjectCoefficient: Yup.number().nullable().required(\"Enter Coefficient\").max(10,\"most be < 1\")\n            })\n        )\n    })\n    let onSubmit = async (values, onSubmitProps) =>{\n        onSubmitProps.setSubmitting(true)\n        \n        \n        \n        let res = await fetch(\"/api/subjectClassapi\",\n        {\n            method:\"POST\",\n            body: JSON.stringify(values),\n            headers:{\n                cookies:\"name\"\n            }\n        })\n    //    await toast.success(\"BasicConfiguration\",{position: toast.POSITION.TOP_CENTER,autoClose:1000})\n        onSubmitProps.resetForm(true)\n        // trigger(\"/api/a\")\n    }\n    let onReset = ()=>{\n        // \n    }\n\n    return (\n        <React.Fragment>\n                <Wrapper >\n                    <CardTitle>\n                        Assign Subject To Class\n                    </CardTitle>\n\n                    <Box>\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={onSubmit}\n                        onReset={onReset}\n                        >\n                        {({\n                                values,\n                                errors,\n                                touched,\n                                isValid,\n                                dirty,\n                                handleChange,\n                                handleBlur,\n                                handleSubmit,\n                                isSubmitting,\n                                setFieldValue,\n                                getFieldProps\n                                /* and other goodies */\n                            })=>(\n                            <Form onSubmit={handleSubmit}>\n                            <Card>\n                                    <FieldArray name=\"subjectToClass\">\n                                        \n                                        {   \n                                            (fieldprops,index)=>{\n                                                let {push,remove,form} = fieldprops\n                                                const {values} = form\n                                                const {subjectToClass} = values \n                                            return(\n                                                <div key={index}>\n                                                {\n                                                    subjectToClass.map((value,index)=>{\n                                                        console.log(\"valuess::\",value)\n                                                        return(\n                                                                <Grid>\n                                                                        <Container>\n                                                                            <label  className=\"\" >Class ID</label>\n                                                                        </Container>\n                                                                    \n                                                                        <Container>\n                                                                            <Field\n                                                                                    error={(((errors || {})[\"subjectToClass\"] || {})[index] ||{})[\"id\"] && ((((touched || {})[\"subjectToClass\"] || {})[index] ||{})[\"id\"])  ? true : false }\n                                                                                    label={((((errors || {})[\"subjectToClass\"] || {})[index] ||{})[\"id\"]) && ((((touched || {})[\"subjectToClass\"] || {})[index] ||{})[\"id\"]) ? errors[\"subjectToClass\"][index][\"id\"] : \"subject To Class ID\" }\n                                                                                    {...getFieldProps(subjectToClass[index].id)}\n                                                                                    component={TextField}\n                                                                                    type=\"number\"\n                                                                                    step=\"1\"\n                                                                                    value={value.id}\n                                                                                    placeholder=\"subject To Class ID\"\n                                                                                    name={`subjectToClass[${index}].id`}\n                                                                                    id={`subjectToClass[${index}].id`}\n                                                                                    min=\"1\"\n                                                                                    variant=\"filled\"\n                                                                                />\n                                                                        </Container>\n\n                                                                        <Container>\n                                                                            subject To Class\n                                                                        </Container>\n                                                                        <div style={{margin:\"2% 0 2% 0\"}}>\n                                                                            <Field\n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={value.subject}\n                                                                                // defaultValue={values.Title}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(`subjectToClass[${index}].subject`, selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                options={subjectOptions}\n                                                                                name={`subjectToClass[${index}].subject`}\n                                                                                id={`subjectToClass[${index}].subject`}\n                                                                                getOptionSelected = {(option,valuer)=> option.id == valuer.id}\n                                                                                getOptionLabel={option => option.subject}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        name={`subjectToClass[${index}].subject`}\n                                                                                        error={(((errors || {})[\"subjectToClass\"] || {})[index] ||{})[\"subject\"] && ((((touched || {})[\"subjectToClass\"] || {})[index] ||{})[\"subject\"])  ? true : false }\n                                                                                        label={((((errors || {})[\"subjectToClass\"] || {})[index] ||{})[\"subject\"]) && ((((touched || {})[\"subjectToClass\"] || {})[index] ||{})[\"subject\"]) ? errors[\"subjectToClass\"][index][\"subject\"] : \"subject --> Class\" }\n                                                                                        variant=\"filled\"    \n                                                                                    \n                                                                                    />\n                                                                                    </>\n                                                                                \n                                                                                )}\n\n                            \n                                                                            />\n                                                                        </div> \n                                                                        <Container>\n                                                                            class\n                                                                        </Container>\n                                                                        <div style={{margin:\"2% 0 2% 0\"}}>\n                                                                            <Field\n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={value.classs}\n                                                                                // defaultValue={values.Title}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(`subjectToClass[${index}].classs`, selectedOption)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                options={classOptions}\n                                                                                name={`subjectToClass[${index}].classs`}\n                                                                                id={`subjectToClass[${index}].classs`}\n                                                                                getOptionSelected = {(option,valuer)=> option.id == valuer.id}\n                                                                                getOptionLabel={option => option.class}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        name={`subjectToClass[${index}].classs`}\n                                                                                        error={(((errors || {})[\"subjectToClass\"] || {})[index] ||{})[\"classs\"] && ((((touched || {})[\"subjectToClass\"] || {})[index] ||{})[\"classs\"])  ? true : false }\n                                                                                        label={((((errors || {})[\"subjectToClass\"] || {})[index] ||{})[\"classs\"]) && ((((touched || {})[\"subjectToClass\"] || {})[index] ||{})[\"classs\"]) ? errors[\"subjectToClass\"][index][\"classs\"] : \"class \" }\n                                                                                        variant=\"filled\"    \n                                                                                    \n                                                                                    />\n                                                                                    </>\n                                                                                \n                                                                                )}\n\n                            \n                                                                            />\n                                                                        </div> \n                                                                        <Container>\n                                                                            <label  className=\"\" >coefficient</label>\n                                                                        </Container>\n                                                                    \n                                                                        <Container>\n                                                                            <Field\n                                                                                    error={(((errors || {})[\"subjectToClass\"] || {})[index] ||{})[\"subjectCoefficient\"] && ((((touched || {})[\"subjectToClass\"] || {})[index] ||{})[\"subjectCoefficient\"])  ? true : false }\n                                                                                    label={((((errors || {})[\"subjectToClass\"] || {})[index] ||{})[\"subjectCoefficient\"]) && ((((touched || {})[\"subjectToClass\"] || {})[index] ||{})[\"subjectCoefficient\"]) ? errors[\"subjectToClass\"][index][\"subjectCoefficient\"] : \"subject Coefficient\" }\n                                                                                    {...getFieldProps(subjectToClass[index].subjectCoefficient)}\n                                                                                    component={TextField}\n                                                                                    type=\"number\"\n                                                                                    step=\"1\"\n                                                                                    value={value.subjectCoefficient}\n                                                                                    placeholder=\"subject Coefficient\"\n                                                                                    name={`subjectToClass[${index}].subjectCoefficient`}\n                                                                                    id={`subjectToClass[${index}].subjectCoefficient`}\n                                                                                    min=\"1\"\n                                                                                    variant=\"filled\"\n                                                                                />\n                                                                        </Container>\n\n                                                                    \n                                                                    <Grid xs={2} md={4}>\n                                                                    {index >= 1 ? <Button  backgroundColor=\"red\" margin=\"2% 2% 2% 0\" onClick={()=>remove(index)}>X</Button> :null}\n                                                                        <Button margin=\"2% 2% 2% 0\" type=\"Button\" onClick={\n                                                                            ()=>push({\n                                                                                    id:\"\",\n                                                                                    subject:\"\",\n                                                                                    classs:\"\",\n                                                                                })} disabled={!(dirty && isValid ) \n                                                                                }>+</Button>\n                                                                    </Grid>\n                                                                </Grid>\n                                                                \n                                                           \n                                                        )\n                                                    })\n                                                }\n                                                \n                                                </div>\n                                            )  \n                                            }\n                                        }\n                                    </FieldArray>\n                                \n                                <div>\n                                    \n                                    {!(dirty && isValid ) ? <Button margin=\"2% 2% 0 0\" disabled={!(dirty && isValid )} type=\"submit\"  >submit</Button>:<Button margin=\"2% 2% 0 0\"  type=\"submit\" className=\"pl-5 pr-5 m-2 bg-danger\" >submit</Button>}\n                                    \n                                    <Button margin=\"2% 2% 0 0\" backgroundColor=\"yellow\"  type=\"reset\"  >reset</Button>\n                                </div>  \n                               \n                            </Card>       \n                            </Form>\n                            \n                        \n                            )\n}                   \n                    </Formik>\n                    </Box>\n                </Wrapper>\n        </React.Fragment>\n    )\n}\n\n\n// export async function getStaticProps(){\n//     let subjectFinder = new SubjectDatabase()\n//     let classsFinder = new ClassesDatabase()\n\n//     let AllSubject = await subjectFinder.getSubject()\n//     let AllClasss = await classsFinder.getClasses()\n//     return{\n//         props:{\n//             AllSubject,\n//             AllClasss\n//         }\n//     }\n// }\n// export default SubjectClass","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    \n`","import React , {useState,useEffect} from \"react\"\n// import dynamic from \"next/dynamic\"  //limit size error, if the size exceeds the limited size it fails without throwing an error,hence denial of service attack. Medium vulnerability\n\n// import useSWR from \"swr\"\nimport {BsThreeDots,BsXOctagonFill,BsPen} from \"react-icons/bs\"\nimport {Formik,Form, FastField,} from \"formik\"\nimport {Card,CardTitle,CardBody,Grid,Button,Error,Table,TableData,TableRow,TableBody,Input,Select} from \"components/common\"\n// import SubjectDatabase from \"../../database/subjectdatabase\"\n// import ClassesDatabase from \"../../database/classDatabase\"\n// import SubjectClassDatabase from \"../../database/subjectClassDatabase\"\nimport {Wrapper} from \"./styles\"\n\nlet data = [\n    {\n        id:1,\n        Classes:{\n            id:1,\n            class:\"Form 1\"\n        },\n        Subjects:{\n            id:1,\n            subject:\"Physics\"\n        },\n        subjectCoefficient:1\n\n    }\n]\nlet classData = [\n    {\n        id:1,\n        class:\"Form 1\"\n    }\n]\nlet dataSubject = [\n    {\n        id:1,\n        subject:\"physics\"\n    }\n]\n\nexport const SubjectClassTable = ({Allsubjects, AllClasses,AllSubjectClass})=>{\n    // console.log(\"Allsubjects::\",Allsubjects)\n\n    // let {data:classData, error:classError} = useSWR('/api/classesapi')\n    // let {data:dataSubject, error:subjectError} = useSWR('/api/subjectapi')\n    // let {data:data, error:subjectClassError} = useSWR('/api/subjectClassapi')\n    \n    // data = data || AllSubjectClass\n\n    let stater = (data)=>{\n        let state = {}\n        if(data){\n            for(let d of data){\n                state[`displayon${d.id}`]=\"table-row\"\n                state[`displayoff${d.id}`]=\"none\"\n            }\n            console.log(\"state::\",state)\n            return state\n        }\n        return null\n    }\n\n    let [initialState, setInitialState] = useState(null)\n    let [initialdisplay, setInitialdisplay] = useState(stater(data))\n    \n\n    useEffect(()=>{\n        setInitialdisplay((previousState)=>({\n            \n            ...stater(data),\n            ...previousState,\n        }))\n    },[data])\n       \n    let initialFormValue=[]\n    let onsubmitForm = (values,submittingProps)=>{\n        console.log(\"values::\",values)\n        \n    }\n    return (\n        <React.Fragment>\n                <CardTitle>Subjects</CardTitle>\n                <Wrapper >\n\n                        <Formik\n                            initialValues={initialState || initialFormValue}\n                            onSubmit={onsubmitForm}\n                            enableReinitialize\n                            >\n                                {\n                                    ({handleBlur,handleChange,handleSubmit,values,getFieldProps})=>{\n                                        console.log(\"values::\",values)\n                                        return(\n                                            <Form onSubmit={handleSubmit}>\n                                                <Table responsive className=\"table table-striped table-bordered table-hover  bg-light opacityControl\">\n                                                    \n                                                        <TableRow>\n                                                            <TableData>ID</TableData>\n                                                            <TableData>class</TableData>\n                                                            <TableData>subject</TableData>\n                                                            <TableData>Coeff</TableData>\n                                                            <TableData>Modifier</TableData>\n                                                        </TableRow>\n                                                    \n                                                    <TableBody>\n                                                        {\n                                                            data ? data.map((value,index)=>{\n                                                                return (\n                                                                    <React.Fragment key={value.id}>\n                                                                        <TableRow style={{display:initialdisplay[`displayon${value.id}`]}}>\n                                                                            <TableData>{value.id}</TableData>\n                                                                            <TableData>{value.Classes.class}</TableData>\n                                                                            <TableData>{value.Subjects.subject}</TableData>\n                                                                            <TableData>{value.subjectCoefficient}</TableData>\n                                                                            <TableData>\n                                                                                \n                                                                                            <Button type=\"button\" className=\"w-100 bg-warning\" onClick = {()=>{\n                                                                                                \n                                                                                                            setInitialdisplay((previousState)=>({\n                                                                                                                ...previousState,\n                                                                                                                \n                                                                                                                [`displayon${value.id}`]:\"none\",\n                                                                                                                [`displayoff${value.id}`]:\"table-row\"\n                                                                                                            \n                                                                                                        }))\n                                                                                                            setInitialState((previousState)=>({\n                                                                                                                    ...previousState,\n                                                                                                                    [`subjectClass${value.id}`]:{\n                                                                                                                        id : value.id,\n                                                                                                                        subjectId:value.Subjects.id,\n                                                                                                                        classId:value.Classes.id\n                                                                                                                    },\n                                                                                                                \n                                                                                                            }))\n                                                                                            }} \n                                                                                      >\n                                                                                        <BsPen color=\"blue\" className=\"m-2\"/>\n                                                                                                Edit\n                                                                                            </Button>\n                                                                                        \n                                                                                            <Button type=\"button\"  className=\"w-100 bg-danger\" onClick={async ()=>{\n                                                                                                    let responce = await fetch(\"/api/subjectClassapi\",{\n                                                                                                        method:\"DELETE\",\n                                                                                                        body:JSON.stringify({\n                                                                                                            subjectClass:{\n                                                                                                                id:value.id,\n                                                                                                                subjectId:value.Subjects.id,\n                                                                                                                classId:value.Classes.id\n                                                                                                            }\n                                                                                                        })\n                                                                                                    })\n                                                                                                    // await toast.success(`${JSON.stringify(responce)} was deleted`,{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n                                                                                                }}><BsXOctagonFill color=\"grey\" className=\"m-2\"/>\n                                                                                                    Delete\n                                                                                            </Button>\n                                                                                        \n                                                                            </TableData>\n                                                                            \n                                                                        </TableRow>\n                                                                        <TableRow style={{display:initialdisplay[`displayoff${value.id}`]}}>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    {...getFieldProps(`subjectClass${value.id}.id`)}\n                                                                                    as={Input}\n                                                                                    name={`subjectClass${value.id}.id`}\n                                                                                    readOnly = {true}\n                                                                                    value={value.id}\n                                                                                    type=\"number\"\n                                                                                    min=\"1\"\n                                                                                    step=\"1\"\n                                                                                />\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                 \n                                                                                <FastField \n                                                                                    as={Select}\n                                                                                \n                                                                                    {...getFieldProps(`subjectClass${value.id}.subjectId`)}\n                                                                                    name={`subjectClass${value.id}.subjectId`}\n                                                                                    value={values[`subjectClass${value.id}`] ? values[`subjectClass${value.id}`].subjectId:\"\"}\n                                                                                    className=\"bg-secondary p-1 rounded w-100\"\n                                                                                    >\n                                                                                        {\n                                                                                            (dataSubject|| Allsubjects ).map((value1,index)=>{\n                                                                                                return (\n                                                                                                    <option key={index} value={value1.id} label={value1.subject}/>\n                                                                                                )\n                                                                                            })\n                                                                                        }\n                                                                                        \n                                                                                </FastField>\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    {...getFieldProps(`subjectClass${value.id}.subjectCoefficient`)}\n                                                                                    as={Input}\n                                                                                    name={`subjectClass${value.id}.subjectCoefficient`}\n                                                                                    readOnly = {true}\n                                                                                    value={value.subjectCoefficient}\n                                                                                    type=\"number\"\n                                                                                    min=\"1\"\n                                                                                    step=\"1\"\n                                                                                />\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    as={Select}\n                                                                                \n                                                                                    {...getFieldProps(`subjectClass${value.id}.classId`)}\n                                                                                    name={`subjectClass${value.id}.classId`}\n                                                                                    value={values[`subjectClass${value.id}`] ? values[`subjectClass${value.id}`].classId:\"\"}\n                                                                                    className=\"bg-secondary p-1 rounded w-100\"\n                                                                                    >\n                                                                                        {\n                                                                                            (classData|| AllClasses ).map((value1,index)=>{\n                                                                                                return (\n                                                                                                    <option key={index} value={value1.id} label={value1.class}/>\n                                                                                                )\n                                                                                            })\n                                                                                        }\n                                                                                        \n                                                                                </FastField>\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                \n                                                                                    \n                                                                                            <Button  onClick = {async ()=>{\n                                                                                                \n                                                                                                setInitialdisplay((previousState)=>({\n                                                                                                    ...previousState,\n                                                                                                    \n                                                                                                    [`displayon${value.id}`]:\"table-row\",\n                                                                                                    [`displayoff${value.id}`]:\"none\"\n                                                                                                \n                                                                                            }))\n                                                                                            delete initialState[`subjectClass${value.id}`]\n                                                                                                setInitialState((previousState)=>({\n                                                                                                        ...initialState\n                                                                                                }))\n                                                                                                }\n                                                                                            }\n                                                                                            ><BsPen color=\"blue\" className=\"m-2\"/>\n                                                                                                cancel\n                                                                                            </Button>\n\n                                                                                            <Button  onClick={async ()=>{\n                                                                                                    let responce = await fetch(\"/api/subjectClassapi\",{\n                                                                                                        method:\"PUT\",\n                                                                                                        body:JSON.stringify(values[`subjectClass${value.id}`])\n                                                                                                    })\n                                                                                                    setInitialdisplay((previousState)=>({\n                                                                                                        ...previousState,\n                                                                                                        \n                                                                                                        [`displayon${value.id}`]:\"table-row\",\n                                                                                                        [`displayoff${value.id}`]:\"none\"\n                                                                                                    \n                                                                                                }))\n\n                                                                                                    // toast.success(`${JSON.stringify(responce)} was deleted`,{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n                                                                                                    \n                                                                                                }}><BsXOctagonFill color=\"black\" />\n                                                                                                    update\n                                                                                            </Button>\n                                                                                        \n                                                                            </TableData>\n                                                                        </TableRow>\n                                                                    </React.Fragment>\n                                                                    \n                                                                )\n                                                            }):null\n                                                        }\n                                                        \n                                                    </TableBody>\n                                                </Table>\n                                            </Form>\n                                  )\n                                }\n                            }\n                        </Formik>\n                </Wrapper>\n        </React.Fragment>\n    )\n}\n// export async function getStaticProps(){\n//     let subjects = new SubjectDatabase()\n//     let classes = new ClassesDatabase()\n//     let subjectClass = new SubjectClassDatabase()\n\n//     let AllClasses = await classes.getClasses()\n//     let Allsubjects = await subjects.getSubject()\n//     let AllSubjectClass = await subjectClass.getSubjectClasses()\n//     return{\n//         props:{\n//             Allsubjects,\n//             AllClasses,\n//             AllSubjectClass\n//         }\n//     }\n// }\nexport default SubjectClassTable","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    \n`\nexport const Box = styled.div`\n    color:\"white\";\n    margin: 1% 10%;\n    padding:5px;\n    \n    border-radius:10px;\n`\nexport const Container = styled.div`\n    width:100%;\n    margin:2% 0 0% 0;\n    div{\n        width:100%;\n    }\n    input{\n        width:100%;\n        /* border:white solid; */\n        /* background-color:white; */\n        /* ::placeholder{\n            color:white;\n        } */\n    }\n\n`","import React,{useEffect,useContext}  from \"react\"\nimport {Button,Card,Grid,Input,CardTitle,Select,Error} from \"components/common\"\nimport {ThemeContext} from \"providers/ThemeProvider\"\nimport {Formik, Field, Form, FieldArray, ErrorMessage} from  \"formik\"\n// import Layout from \"../../components/layout\"\nimport * as Yup from \"yup\"\nimport {Wrapper,Container,Box} from \"./styles\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n// import toast from \"../../components/decoration/toast\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\n// import {Error} from \"../../components/error/Error\"\n// import useSWR from \"swr\"\n// import {useRouter} from \"next/router\"\n// let Select = dynamic(\n//     ()=>import(\"react-select\"),\n//         {ssr:false})\n// let SelectField = dynamic(\n//     ()=>import(\"../../components/myselect/select\"),\n//         {ssr:false})\n\n\nlet data =  [\n    {\n        id:1,\n        id_:1,\n        section:\"English section\",\n        languages:\"English\"\n    },\n    {   \n        id:2,\n        id_:2,\n        section:\"French section\",\n        languages:\"French\"\n    },\n    {\n        id:3,\n        id_:3,\n        section:\"French section\",\n        languages:\"French\"\n    },\n    {\n        id:4,\n        id_:4,\n        section:\"French section\",\n        languages:\"French\"\n    }\n]\nexport const AddClass = ({sectionAll})=>{\n    let {theme} = useContext(ThemeContext)\n    // const router = useRouter()\n    \n    \n    // let {data , error} = useSWR(\"/api/sectionapi\")\n    let sectionOptions = data || sectionAll\n\n    \n\n    // console.log(\"sectionAll::\",sectionAll)\n     let initialValues = {\n        classes:[{\n            id:\"\",\n            clas:\"\",\n            sectionTaught:\"\",\n        }],\n     }\n    \n    let validationSchema = Yup.object({\n        classes: Yup.array().nullable().of(\n            Yup.object({\n                id: Yup.number().nullable().required(\"enter section ID\"),\n                clas: Yup.string().nullable().required(\"enter class\").min(3,\"least 3 letters\"),\n                sectionTaught: Yup.string().nullable().required(\"section Taught\")\n            })\n        )\n    })\n\n    let onSubmit = async (values, onSubmitProps) =>{\n        onSubmitProps.setSubmitting(true)\n        \n        // toast.success(\"BasicConfiguration\",{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n        {console.log(\"valuess::\",values)}\n        let res = await fetch(\"/api/classesapi\",\n        {\n            method:\"POST\",\n            body: JSON.stringify(values),\n            headers:{\n                cookies:\"name\"\n            }\n        })\n        onSubmitProps.resetForm(true)\n        console.log(\"res::\",res)\n        // if(res.status==400){\n        //     router.push(\"/section/sections\")\n        // }\n        // trigger(\"/api/a\")\n    }\n    let onReset = ()=>{\n        // \n    }\n\n    return (\n        <React.Fragment>\n            \n                <CardTitle >Add New Class</CardTitle>\n                     \n                <Wrapper >\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={onSubmit}\n                        onReset={onReset}\n                        >\n                        {({\n                                values,\n                                errors,\n                                touched,\n                                isValid,\n                                dirty,\n                                handleChange,\n                                handleBlur,\n                                handleSubmit,\n                                isSubmitting,\n                                setFieldValue,\n                                getFieldProps\n                                /* and other goodies */\n                            })=>(\n                            <Form onSubmit={handleSubmit}>\n                            <Card >\n                                \n                                \n                                        \n                                    \n                            \n                                {/* <CardBody> */}\n                                <FieldArray name=\"classes\">\n                                    \n                                    {   \n                                        (fieldprops,index)=>{\n                                            let {push,remove,form} = fieldprops\n                                            const {values} = form\n                                            const {classes} = values \n                                          return(\n                                            <div key={index}>\n                                            {\n                                                classes.map((value,index)=>{\n                                                    \n                                                    return(\n                                                        <div key={index}>\n                                                            <Box>\n                                                            <Grid theme={theme}>\n                                                                <Container>\n                                                                    <label  className=\"\" >Section ID</label>\n                                                                </Container>\n                                                                \n                                                                <Container>\n                                                                    <Field\n                                                                            error={(((errors || {})[\"classes\"] || {})[index] ||{})[\"id\"] && ((((touched || {})[\"classes\"] || {})[index] ||{})[\"id\"])  ? true : false }\n                                                                            label={((((errors || {})[\"classes\"] || {})[index] ||{})[\"id\"]) && ((((touched || {})[\"classes\"] || {})[index] ||{})[\"id\"]) ? errors[\"classes\"][index][\"id\"] : \"class id\" }\n                                                                            {...getFieldProps(classes[index].id)}\n                                                                            component={TextField}\n                                                                            type=\"number\"\n                                                                            step=\"1\"\n                                                                            value={value.id}\n                                                                            placeholder=\"class ID\"\n                                                                            name={`classes[${index}].id`}\n                                                                            id={`classes[${index}].id`}\n                                                                            min=\"1\"\n                                                                            variant=\"filled\"\n                                                                        />\n                                                                </Container>\n                                                                <Container>\n                                                                    <label   >Class Name</label>\n                                                                </Container>\n                                                                \n                                                                <Container>\n                                                                    <Field\n                                                                            error={(((errors || {})[\"classes\"] || {})[index] ||{})[\"clas\"] && ((((touched || {})[\"classes\"] || {})[index] ||{})[\"clas\"])  ? true : false }\n                                                                            label={((((errors || {})[\"classes\"] || {})[index] ||{})[\"clas\"]) && ((((touched || {})[\"classes\"] || {})[index] ||{})[\"clas\"]) ? errors[\"classes\"][index][\"clas\"] : \"class\" }\n                                                                            {...getFieldProps(classes[index].clas)}\n                                                                            component={TextField}\n                                                                            value={value.clas}\n                                                                            placeholder=\"class\"\n                                                                            name={`classes[${index}].clas`}\n                                                                            id={`classes[${index}].clas`}\n                                                                            \n                                                                            variant=\"filled\"\n                                                                        />\n                                                                </Container>\n                                                                    <Container>\n                                                                        <label  className=\"\" >Section Taught</label>\n                                                                    </Container>\n                                                                    <div style={{margin:\"2% 0 2% 0\"}}>\n                                                                        <Field\n                                                                                \n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={value.sectionTaught}\n                                                                                // defaultValue={values.Title}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(`classes[${index}].sectionTaught`, selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                options={sectionOptions}\n                                                                                name={`classes[${index}].sectionTaught`}\n                                                                                id={`classes[${index}].sectionTaught`}\n                                                                                getOptionSelected = {(option,valuer)=> option.id_ == valuer.id_}\n                                                                                getOptionLabel={option => option.section}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        name={`classes[${index}].sectionTaught`}\n                                                                                        error={(((errors || {})[\"classes\"] || {})[index] ||{})[\"sectionTaught\"] && ((((touched || {})[\"classes\"] || {})[index] ||{})[\"sectionTaught\"])  ? true : false }\n                                                                                        label={((((errors || {})[\"classes\"] || {})[index] ||{})[\"sectionTaught\"]) && ((((touched || {})[\"classes\"] || {})[index] ||{})[\"sectionTaught\"]) ? errors[\"classes\"][index][\"sectionTaught\"] : \"section Taught\" }\n                                                                                        variant=\"filled\"    \n                                                                                    \n                                                                                    />\n                                                                                    </>\n                                                                                \n                                                                                )}\n\n                            \n                                                                            />\n                                                                        </div>\n                                                                \n                                                                            \n                                                                <Card theme={theme} scroll=\"none\">\n                                                                    <Grid xs={2} md={4}>\n                                                                        {index >= 1 ? <Button backgroundColor=\"red\" margin=\"0 2% 2% 0\" onClick={()=>remove(index)}>X</Button> :null}\n                                                                    \n                                                                        <Button margin=\"0 2% 2% 0\" onClick={\n                                                                            ()=>push({\n                                                                                    id:\"\",\n                                                                                    clas:\"\",\n                                                                                    sectionTaught:\"\",\n                                                                                })} disabled={!(dirty && isValid ) \n                                                                                }>+</Button>\n                                                                    </Grid>\n                                                                </Card>\n                                                            </Grid>\n                                                        </Box>    \n                                                        </div>\n                                                    )\n                                                })\n                                            }\n                                            \n                                            </div>\n                                          )  \n                                        }\n                                    }\n                                </FieldArray>\n                                {/* </CardBody>  */}\n                                <Box>\n                                    <div>\n                                        \n                                        {!(dirty && isValid ) ? <Button margin=\"0 2% 0 0\"  disabled={!(dirty && isValid )} type=\"submit\"  >submit</Button>:<Button margin=\"0 2% 0 0\" type=\"submit\" >submit</Button>}\n                                        \n                                        <Button type=\"reset\" margin=\"0 2% 0 0\" >reset</Button>\n                                    </div> \n                                </Box>\n                                 \n                               \n                            </Card>       \n                            </Form>\n                            \n                        \n                            )\n}                   \n                    </Formik>\n                    \n                </Wrapper>\n                \n        </React.Fragment>\n    )\n}\n","import React , {useState,useEffect} from \"react\"\n// import dynamic from \"next/dynamic\"\n// import Table from \"react-bootstrap/Table\"\n// import Dropdown from \"react-bootstrap/Dropdown\"\n// import Button from \"react-bootstrap/Button\"\n\n// import useSWR from \"swr\"\nimport {Button,Select, Table,TableBody,TableData,TableRow,Input,CardTitle,TableHead,TableFooter,TableHeader} from \"components/common\"\n// import toast from \"../../components/decoration/toast\"\nimport {BsThreeDots,BsXOctagonFill,BsPen} from \"react-icons/bs\"\nimport {Formik,Form, FastField,} from \"formik\"\n// import ClassesDatabase from \"../../database/classDatabase\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\n    let sectorData =[{\n        id_:1,\n        section:\"French Section\",\n\n    }]\n    let data=[{\n        id:1,\n        class:\"FORM 1\",\n        Section:{\n            id_:1,\n            section:\"English Section\"\n        }\n    }]\n\nexport const AllClasses = ({totalClass, totalSection})=>{\n\n    \n    // console.log(\"totalsubjects::\",totalClass)\n\n    // let {data:sectorData, error:sectorError} = useSWR('/api/sectionapi')\n    // let {data:data, error:subjectError} = useSWR('/api/classesapi')\n    \n    data = data || totalClass\n    let stater = (data)=>{\n        let state = {}\n        if(data){\n            for(let d of data){\n                state[`displayon${d.id}`]=\"table-row\"\n                state[`displayoff${d.id}`]=\"none\"\n            }\n            console.log(\"state::\",state)\n            return state\n        }\n        return null\n    }\n    let [initialState, setInitialState] = useState(null)\n    let [initialdisplay, setInitialdisplay] = useState(stater(data))\n    \n    console.log(\"newstate::\",initialState)\n    useEffect(()=>{\n        setInitialdisplay((previousState)=>({\n            \n            ...stater(data),\n            ...previousState,\n        }))\n    },[data])\n       \n    let initialFormValue=[]\n    let onsubmitForm = (values,submittingProps)=>{\n        \n        \n    }\n    return (\n        <React.Fragment>\n            \n                <div >\n                <CardTitle >Classes</CardTitle>\n                    \n                        <Formik\n                            initialValues={initialState || initialFormValue}\n                            onSubmit={onsubmitForm}\n                            enableReinitialize\n                            >\n                                {\n                                    ({handleBlur,handleChange,handleSubmit,values,getFieldProps})=>{\n                                        console.log(\"values::\",values)\n                                        return(\n                                            <Form onSubmit={handleSubmit}>\n                                                <Table responsive>\n                                                    <TableHeader>\n                                                        <TableRow>\n                                                                <TableHead>ID</TableHead>\n                                                                <TableHead>Class</TableHead>\n                                                                <TableHead>Section</TableHead>\n                                                                <TableHead>Modifier</TableHead>\n                                                        </TableRow>\n                                                    </TableHeader>\n                                                        \n                                                    \n                                                        \n                                                    \n                                                    <TableBody>\n                                                        {\n                                                            data ? data.map((value,index)=>{\n                                                                return (\n                                                                    <React.Fragment key={value.id}>\n\n                                                                    \n                                                                        <TableRow style={{display:initialdisplay[`displayon${value.id}`]}}>\n                                                                            <TableData >{value.id}</TableData>\n                                                                            <TableData>{value.class}</TableData>\n                                                                            <TableData>{value.Section.section}</TableData>\n                                                                            <TableData>\n                                                                                <Button type=\"button\" className=\"w-100 bg-warning\" onClick = {()=>{\n                                                                                    \n                                                                                                setInitialdisplay((previousState)=>({\n                                                                                                    ...previousState,\n                                                                                                    \n                                                                                                    [`displayon${value.id}`]:\"none\",\n                                                                                                    [`displayoff${value.id}`]:\"table-row\"\n                                                                                                \n                                                                                            }))\n                                                                                                setInitialState((previousState)=>({\n                                                                                                        ...previousState,\n                                                                                                        [`classes${value.id}`]:{\n                                                                                                            id : value.id,\n                                                                                                            clas:value.class,\n                                                                                                            sectionID:value.Section.id_\n                                                                                                        },\n                                                                                                    \n                                                                                                }))\n                                                                                }} \n                                                                            >\n                                                                            <BsPen color=\"blue\" className=\"m-2\"/>\n                                                                                    Edit\n                                                                                </Button>\n                                                                                <Button type=\"button\"  className=\"w-100 bg-danger\" onClick={async ()=>{\n                                                                                        let responce = await fetch(\"/api/classesapi\",{\n                                                                                            method:\"DELETE\",\n                                                                                            body:JSON.stringify({\n                                                                                                classes:{\n                                                                                                    id:value.id,\n                                                                                                    clas:value.class,\n                                                                                                    sectionID:value.Section.id_\n                                                                                                }\n                                                                                            })\n                                                                                        })\n                                                                                        // await toast.success(`${JSON.stringify(responce)} was deleted`,{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n                                                                                    }}><BsXOctagonFill color=\"grey\" className=\"m-2\"/>\n                                                                                        Delete\n                                                                                </Button>\n                                                                                        \n                                                                            </TableData>\n                                                                            \n                                                                        </TableRow>\n                                                                        <TableRow style={{display:initialdisplay[`displayoff${value.id}`]}}>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    {...getFieldProps(`classes${value.id}.id`)}\n                                                                                    as={Input}\n                                                                                    name={`classes${value.id}.id`}\n                                                                                    readOnly = {true}\n                                                                                    value={value.id}\n                                                                                    type=\"number\"\n                                                                                    min=\"1\"\n                                                                                    step=\"1\"\n                                                                                />\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                as={Input}\n                                                                                {...getFieldProps(`classes${value.id}.clas`)}\n                                                                                name={`classes${value.id}.clas`}\n                                                                                value={values[`classes${value.id}`]? values[`classes${value.id}`].clas :\"\"}\n                                                                                /> \n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                <FastField \n                                                                                    as={Select}\n                                                                                    {...getFieldProps(`classes${value.id}.sectionID`)}\n                                                                                    name={`classes${value.id}.sectionID`}\n                                                                                    value={values[`classes${value.id}`] ? values[`classes${value.id}`].sectionID:\"\"}\n                                                                                    className=\"bg-secondary p-1 rounded w-100\"\n                                                                                    >\n                                                                                        {\n                                                                                            (totalSection || sectorData).map((value1,index)=>{\n                                                                                                return (\n                                                                                                    <option key={index} value={value1.id_} label={value1.section}/>\n                                                                                                )\n                                                                                            })\n                                                                                        }\n                                                                                </FastField>\n                                                                            </TableData>\n                                                                            <TableData>\n                                                                                    \n                                                                                            <Button type=\"button\" className=\"w-100 bg-warning\" onClick = {async ()=>{\n                                                                                                \n                                                                                                setInitialdisplay((previousState)=>({\n                                                                                                    ...previousState,\n                                                                                                    \n                                                                                                    [`displayon${value.id}`]:\"table-row\",\n                                                                                                    [`displayoff${value.id}`]:\"none\"\n                                                                                                \n                                                                                            }))\n                                                                                            delete initialState[`classes${value.id}`]\n                                                                                                setInitialState((previousState)=>({\n                                                                                                        ...initialState\n                                                                                                }))\n                                                                                                }\n                                                                                            }\n                                                                                            ><BsPen color=\"blue\" className=\"m-2\"/>\n                                                                                                cancel\n                                                                                            </Button>\n                                                                                        \n                                                                                            <Button type=\"button\"  className=\"w-100 bg-success\" onClick={async ()=>{\n                                                                                                    let responce = await fetch(\"/api/classesapi\",{\n                                                                                                        method:\"PUT\",\n                                                                                                        body:JSON.stringify(values[`classes${value.id}`])\n                                                                                                    })\n                                                                                                    setInitialdisplay((previousState)=>({\n                                                                                                        ...previousState,\n                                                                                                        \n                                                                                                        [`displayon${value.id}`]:\"table-row\",\n                                                                                                        [`displayoff${value.id}`]:\"none\"\n                                                                                                    \n                                                                                                }))\n\n                                                                                                    // toast.success(`${JSON.stringify(responce)} was deleted`,{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n                                                                                                    \n                                                                                                }}><BsXOctagonFill color=\"grey\" className=\"m-2\"/>\n                                                                                                    update\n                                                                                            </Button>\n                                                                                        \n                                                                            </TableData>\n                                                                        </TableRow>\n                                                                    </React.Fragment>\n                                                                    \n                                                                )\n                                                            }):null\n                                                        }\n                                                        \n                                                    </TableBody>\n                                                    <TableFooter>\n\n                                                    </TableFooter>\n                                                </Table>\n                                            </Form>\n                                  )\n                                }\n                            }\n                        </Formik>\n                </div>\n        </React.Fragment>\n    )\n}\n// export async function getStaticProps(){\n//     let classObject = new ClassesDatabase()\n//     let sections = new SectionDatabase()\n//     let totalSection = await sections.getSection()\n//     let totalClass = await classObject.getClasses()\n//     return{\n//         props:{\n//             totalClass,\n//             totalSection,\n//         }\n//     }\n// }\n// export default ClassA\n\n","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    color:\"white\";\n    margin:2% 10%;\n    input{\n        \n    }\n`\nexport const Box = styled.div`\n    margin-bottom:2%;\n    input{\n\n        ::placeholder{\n            color:white;\n        }\n    }\n`\n\nexport const Box_space =  styled.span`\n    margin-right:2%;\n    z-index:-1;\n`","import React,{useContext}  from \"react\"\nimport {Formik, Field, Form, FieldArray} from  \"formik\"\nimport {Grid} from \"components/common\"\nimport * as Yup from \"yup\"\nimport TextField from \"@material-ui/core/TextField\"\n// import DeleteForeverIcon from '@material-ui/icons/DeleteForever';\n// import DoneIcon from '@material-ui/icons/Done';\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\nimport Button from \"@material-ui/core/Button\"\nimport { Wrapper,Box,Box_space } from \"./styles\"\nimport {ThemeContext} from \"providers/ThemeProvider\"\n\n\nexport default  ({property})=>{\n    let {theme} = useContext(ThemeContext)\n    \n     let initialValues = {\n        \n        [property.property]:[{\n            [property.propertyName]:\"\"\n        }],\n     }\n    \n    let validationSchema = Yup.object({\n        [property.property]: Yup.array().nullable().of(\n            Yup.object({\n                [property.propertyName]: Yup.string().nullable().required(property.error),\n            })\n        )\n    })\n    let onSubmit = async (values, onSubmitProps) =>{\n        console.log(\"submittinProps\",onSubmitProps)\n        onSubmitProps.setSubmitting(true)\n        \n        \n        \n        let res = await fetch(`/api/generalapi?${property.property}=true`,\n        {\n            method:\"POST\",\n            body: JSON.stringify(values),\n            headers:{\n                cookies:\"name\"\n            }\n        })\n        // toast.success(\"BasicConfiguration\",{position: toast.POSITION.TOP_CENTER,autoClose:2000})\n        onSubmitProps.resetForm(true)\n\n        // onSubmitProps.setErrors((errors)=>{\n        //     errors = {}\n        //     return errors\n        // })\n\n        // onSubmitProps.resetForm(true)\n        // trigger(\"/api/a\")\n    }\n    let onReset = ()=>{\n        // \n    }\n\n    return (\n        <React.Fragment>\n            \n                <Wrapper fluid=\"true\" className=\"p-3 opacityControl\" theme={theme}>\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={onSubmit}\n                        onReset={onReset}\n                        >\n                        {({\n                                isValid,\n                                dirty,\n                                handleSubmit,\n                                errors,\n                                isSubmitting,\n                                setFieldValue,\n                                getFieldProps,\n                                touched\n                                /* and other goodies */\n                            })=>(\n                            <Form onSubmit={handleSubmit}>\n                            {/* <Card theme={theme}> */}\n                        \n                                <div className=\"mt-3 mb-4 ml-3\">\n                                    <h3>\n                                        {property.property}\n                                    </h3>\n                                </div>\n                            \n                                {/* <CardBody  theme={theme}> */}\n                                <FieldArray name={property.property}>\n                                    \n                                    {   \n                                        (fieldprops,index)=>{\n                                            let {push,remove,form} = fieldprops\n                                            const {values} = form\n                                            // [property.property]\n                                            const position = values[property.property]\n                                          return(\n                                            <div key={index}>\n                                            {\n                                                position.map((value,index)=>{\n                                                    return(\n                                                        <Box key={index}>\n                                                            <Grid theme={theme}>\n                                                                    {/* <label  className=\"\" >{property.property}</label> */}\n                                                                    <Field\n                                                                        error={(((errors || {})[property.property] || {})[index] ||{})[property.propertyName] && ((((touched || {})[property.property] || {})[index] ||{})[property.propertyName])  ? true : false }\n                                                                        label={((((errors || {})[property.property] || {})[index] ||{})[property.propertyName]) && ((((touched || {})[property.property] || {})[index] ||{})[property.propertyName]) ? errors[property.property][index][property.propertyName] : `${property.property}` }\n                                                                        {...getFieldProps((property.property)[index][property.propertyName])}\n                                                                        variant=\"filled\"\n                                                                        value={value[property.propertyName]}\n                                                                        component={TextField}\n                                                                        name={`${property.property}[${index}][${property.propertyName}]`}\n                                                                        id={`${property.property}[${index}][${property.propertyName}]`}\n                                                                        \n                                                                        InputProps={{\n                                                                            endAdornment:(\n                                                                                <InputAdornment position=\"start\" >\n                                                                                    {index >= 1 ? <Button   color=\"secondary\" onClick={()=>remove(index)}>x</Button> :null}\n                                                                                    <Button  color=\"primary\"\n                                                                                      onClick={\n                                                                                        ()=>push({\n                                                                                                [property.propertyName]:\"\",\n                                                                                            })} disabled={!(dirty && isValid ) \n                                                                                    }>&#10003;</Button>\n                                                                                </InputAdornment>\n                                                                            )\n                                                                        }}\n                                                                    />\n                                                                    \n                                                            </Grid>\n                                                            \n                                                        </Box>\n                                                    )\n                                                })\n                                            }\n                                            \n                                            </div>\n                                          )  \n                                        }\n                                    }\n                                </FieldArray>\n                                {/* </CardBody>  */}\n                                \n                                <div>\n                                    <Box_space>\n                                        \n                                        {!(dirty && isValid ) ? <Button  variant=\"contained\" disabled={!(dirty && isValid )} type=\"submit\"  >submit</Button>:<Button color=\"primary\" variant=\"contained\"  type=\"submit\"  >submit</Button>}\n                                    </Box_space>   \n                                    <Box_space> \n                                        <Button color=\"secondary\" variant=\"contained\" type=\"reset\"  >reset</Button>\n                                    </Box_space> \n                                </div>\n                                 \n                               \n                            {/* </Card>        */}\n                            </Form>\n                            \n                        \n                            )\n}                   \n                    </Formik>\n                    \n                </Wrapper>\n                \n            \n        </React.Fragment>\n    )\n}\n\n","import React,{useRef,useState} from \"react\"\n\nimport {CardTitle} from \"components/common\"\nimport GeneralInputForm from \"./GeneralInputForm\"\n\n// import StaffGrade from \"../../components/generalInput/grade\"\n\n\nconst initialComponentState = {\n    gendervalid: false,\n    genderdirty:false,\n    titlevalid: false,\n    titledirty:false,\n    positionvalid: false,\n    positiondirty:false\n}\n\nexport const GeneralInput = ()=>{\n    // let genderRef = useRef()\n    // let titleRef = useRef()\n    // let positionRef = useRef()\n\n    // let [componentState,setcomponentsState] = useState(initialComponentState)\n    return (\n        <React.Fragment>\n            <CardTitle >General Inputs</CardTitle>\n                <GeneralInputForm \n            \n                        property = {\n                            {\n                                property:\"gender\",\n                                propertyName:\"genderName\",\n                                error:\"enter gender\"       \n                            }\n                    }\n                />\n                <GeneralInputForm \n        \n                            property = {\n                                {\n                                    property:\"position\",\n                                    propertyName:\"positionName\",\n                                    error:\"principal, VP,SG\"       \n                                }\n                        }\n                    />\n                <GeneralInputForm \n                        \n                        property = {\n                            {\n                                property:\"title\",\n                                propertyName:\"titleName\",\n                                error:\"Enter the title\"       \n                            }\n                    }\n                />\n                <GeneralInputForm \n                        \n                        property = {\n                            {\n                                property:\"staffGrade\",\n                                propertyName:\"grade\",\n                                error:\"PCEG,PLEG,PLET,...\"       \n                            }\n                    }\n                />\n            {/* <StaffGrade /> */}\n        </React.Fragment>\n    )\n}","import React,{useState} from \"react\"\n\nconst initialState = {\n    stuImage: null,\n    imagedataField:null\n}\n\nlet ImageConverter = (base62ImageData)=>{\n    let [state, setState] = useState(initialState)\n    if(base62ImageData)\n        {\n            if (base62ImageData.studentImage != state.imagedataField){\n                const b64toBlob = (b64Data, contentType='', sliceSize=512) => \n                    {\n                        const byteCharacters = atob(b64Data);\n                        const byteArrays = [];\n\n                        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n                            const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n                            const byteNumbers = new Array(slice.length);\n                            for (let i = 0; i < slice.length; i++) {\n                            byteNumbers[i] = slice.charCodeAt(i);\n                            }\n\n                            const byteArray = new Uint8Array(byteNumbers);\n                            byteArrays.push(byteArray);\n                        }\n                            \n                        const blob = new Blob(byteArrays, {type: contentType});\n                        return blob;\n                        }\n\n                const contentType = 'image/png';\n\n                const b64Data = base62ImageData.studentImage //oneStudentdata.studentImage\n\n                const blob = b64toBlob(b64Data, contentType);\n                const blobUrl = URL.createObjectURL(blob);\n                console.log(\"tlakfl;dasklfsakfjlds\")\n                setState((prev)=>({\n                        stuImage: blobUrl,\n                        imagedataField:base62ImageData.studentImage\n                    }))\n                    \n                }\n        }\n        return state.stuImage\n}\nexport {ImageConverter}\n","import * as Yup from \"yup\"\n\nlet initialValueTeacher=(genderdata,bloodgroupdata,religiondata,speciality,titleData,positionData,staffGradeData)=>({\n    FamilyName:\"\",\n    GivenName:\"\",\n    DateOfBirth:\"\",\n    Gender: genderdata[0],\n    TeacherAddress:\"\",\n    BloodGroup:bloodgroupdata[0],\n    Religion:religiondata[0],\n    eMail:\"\",\n    shortBio:\"\",\n\n\n    speciality:speciality[0],\n    staffID:\"\",\n    phoneNumber:\"\",\n    Grade:staffGradeData[0],\n    position:positionData[0],\n    matricle:\"\",\n    formerPost:\"\",\n    locationOfFomerPost:\"\",\n    decisionNo:\"\",\n    decisionDate:\"\",\n    diploma:\"\",\n    // speciality:\"\",\n    dateOfAssumption:\"\",\n    // professional address\n    Title:titleData[0],\n\n    // Emergecy Contact\n    EcontactName:\"\",\n    EcontactOccupation:\"\",\n    EcontactAddress:\"\",\n    EcontactContactMobile:\"\",\n    EContactEmail:\"\",\n    \n    })\n\nlet ValidationSchemaTeacher = Yup.object({\n    FamilyName: Yup.string().nullable().uppercase().trim().required(\"Enter Last Name\"),\n    GivenName: Yup.string().nullable().uppercase().trim().required(\"Enter First Name\"),\n    DateOfBirth: Yup.date().nullable().required(\"enter Date of Birth\"),\n    Gender: Yup.object().nullable().required(\"are you an Alien\"),\n    TeacherAddress: Yup.string().nullable().required(\"Enter Your Student Address\"),\n    BloodGroup:Yup.object().nullable(),\n    Religion: Yup.object().nullable().required(\"Enter you religion\"),\n    eMail: Yup.string().nullable().email().required(\"Enter your email\"),\n    speciality: Yup.object().nullable().required(\"choose speciality\"),\n    staffID: Yup.string().nullable().required(\"User id\"),\n    phoneNumber: Yup.string().nullable().required(\"Enter phone number\").max(15),\n    shortBio: Yup.string().nullable().required(\"short biography\"),\n    position:Yup.string().nullable().required(\"Principal,vp etc\"),\n    // imageholder: Yup.string().nullable().notRequired(\"user photo\"),\n    Grade:Yup.string().nullable().required(\"Grade\"),\n    matricle:Yup.string().nullable().required(\"Matricle\"),\n    formerPost:Yup.string().nullable().required(\"Former Post\"),\n    locationOfFomerPost:Yup.string().nullable().required(\"Location of Former Post\"),\n    decisionNo:Yup.string().nullable().required(\"decision Number\"),\n    decisionDate:Yup.date().nullable().required(\"enter decision Date\"),\n    diploma:Yup.string().nullable().required(\"User DIPLOMA\"),\n    //Professional info\n    Title: Yup.string().nullable().required(\"Title, Mr, Mrs,Chief..\"),\n\n    // Emergency Contact\n    EcontactName:Yup.string().nullable().notRequired(\"needed\"),\n    EcontactOccupation:Yup.string().nullable().notRequired(\"needed\"),\n    EcontactAddress:Yup.string().nullable().notRequired(\"needed\"),\n    EcontactContactMobile:Yup.string().nullable().notRequired(\"needed\"),\n\n    EContactEmail: Yup.string().nullable().email().notRequired(\"needed\")\n    \n\n})\n\nexport {ValidationSchemaTeacher, initialValueTeacher}","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n\n`","// import {useParams} from \"next/router\"\nimport React, {useState,useEffect} from \"react\"\n\n// import dynamic from \"next/dynamic\"\nimport Card from \"@material-ui/core/Card\"\nimport useSWR from \"swr\"\n// import StudentDatabase from \"../../database/studentDatabase\"\nimport Button from \"@material-ui/core/Button\"\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from \"@material-ui/core/Grid\"\nimport  CardHeader  from \"@material-ui/core/CardHeader\"\nimport { Avatar } from \"@material-ui/core\"\nimport {useParams} from \"react-router\"\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DoneIcon from '@material-ui/icons/Done';\n// import StudentTemplate from \"../../components/topdfContainer/studentTemplate\"\n// import { PDFDownloadLink } from '@react-pdf/renderer';\n// import MyDocument from \"../../components/topdfContainer/studentTemplate\"\nimport PrintIcon from '@material-ui/icons/Print';\n\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\n\nimport TextField from \"@material-ui/core/TextField\"\nimport {Field,Formik,Form} from \"formik\"\n// import Styles from \"../../components/studentComponent/student.module.css\"\nimport Input from '@material-ui/core/Input';\n// import parse from 'autosuggest-highlight/parse';\n// import match from 'autosuggest-highlight/match';\nimport AddIcon from '@material-ui/icons/Add';\n\n\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\n\n\n\nimport {ImageConverter} from \"components/imageConverter/imageconvert\"\n\nimport {ValidationSchemaTeacher} from \"../teacherSchema\"\n\nimport {Wrapper } from \"./styles\"\n\nimport defaultImage from \"assets/defaultImages/defaultImage.png\"\n\nlet religiondata =[{id:1,doctrine:\"Christain\"},{id:2,doctrine:\"Muslim\"},{id:3,doctrine:\"Pegan\"},{id:4,doctrine:\"Traditionalist\"}]\nlet bloodgroupdata =[{id:1,group:\"A+\"},{id:2,group:\"A-\"},{id:3,group:\"B+\"},{id:4,group:\"B-\"},{id:5,group:\"AB\"},{id:6,group:\"0+\"},{id:7,group:\"O-\"}]\n\nlet initialStateImageValues = {\n    \n    imagesizeError:\"none\",\n    imagedataBack:null,\n    filename:\"\"\n}\nlet initialEditIcons = {\n    \n        staffImageIconEditOff:\"none\",\n        FamilyNameIconEditOff:\"none\",\n        GivenNameIconEditOff:\"none\",\n        DateOfBirthIconEditOff:\"none\",\n        GenderIconEditOff: \"none\",\n        TeacherAddressIconEditOff:\"none\",\n        BloodGroupIconEditOff:\"none\",\n        ReligionIconEditOff:\"none\",\n        eMailIconEditOff:\"none\",\n        specialityIconEditOff:\"none\",\n\n        // staffIDIconEditOff:oneStaffdata ? oneStaffdata.oneStaff.staffID : \"\",\n        phoneNumberIconEditOff:\"none\",\n        shortBioIconEditOff: \"none\",\n        // imageholder:state.filename\n        GradeIconEditOff:\"none\",\n        positionIconEditOff:\"none\",\n        matricleIconEditOff:\"none\",\n        formerPostIconEditOff:\"none\",\n        locationOfFomerPostIconEditOff:\"none\",\n        decisionNoIconEditOff:\"none\",\n        decisionDateIconEditOff:\"none\",\n        diplomaIconEditOff:\"none\",\n        // speciality:\"\",\n        dateOfAssumptionIconEditOff:\"none\",\n        // professional address\n        TitleIconEditOff:\"none\",\n\n        // Emergecy Contact\n        EcontactNameIconEditOff:\"none\",\n        EcontactOccupationIconEditOff:\"none\",\n        EcontactAddressIconEditOff:\"none\",\n        EcontactContactMobileIconEditOff:\"none\",\n        EContactEmailIconEditOff:\"none\",\n\n}\n\nlet initialDisplay = {\n        // imageholder:state.filename\n        staffImageEditOn:\"inline\",\n        FamilyNameEditOn:\"inline\",\n        GivenNameEditOn:\"inline\",\n        DateOfBirthEditOn:\"inline\",\n        GenderEditOn: \"inline\",\n        TeacherAddressEditOn:\"inline\",\n        BloodGroupEditOn:\"inline\",\n        ReligionEditOn:\"inline\",\n        eMailEditOn:\"inline\",\n        specialityEditOn:\"inline\",\n\n        // staffIDIconEditOff:oneStaffdata ? oneStaffdata.oneStaff.staffID : \"\",\n        phoneNumberEditOn:\"inline\",\n        shortBioEditOn: \"inline\",\n        // imageholder:state.filename\n        GradeEditOn:\"inline\",\n        positionEditOn:\"inline\",\n        matricleEditOn:\"inline\",\n        formerPostEditOn:\"inline\",\n        locationOfFomerPostEditOn:\"inline\",\n        decisionNoEditOn:\"inline\",\n        decisionDateEditOn:\"inline\",\n        diplomaIconEditOn:\"inline\",\n        // speciality:\"\",\n        dateOfAssumptionEditOn:\"inline\",\n        // professional address\n        TitleEditOn:\"inline\",\n\n        // Emergecy Contact\n        EcontactNameEditOn:\"inline\",\n        EcontactOccupationEditOn:\"inline\",\n        EcontactAddressEditOn:\"inline\",\n        EcontactContactMobileEditOn:\"inline\",\n        EContactEmailEditOn:\"inline\",\n//      \n// \n        staffImageEditOff:\"none\",\n        FamilyNameEditOff:\"none\",\n        GivenNameEditOff:\"none\",\n        DateOfBirthEditOff:\"none\",\n        GenderEditOff: \"none\",\n        TeacherAddressEditOff:\"none\",\n        BloodGroupEditOff:\"none\",\n        ReligionEditOff:\"none\",\n        eMailEditOff:\"none\",\n        specialityEditOff:\"none\",\n\n        // staffIDIconEditOff:oneStaffdata ? oneStaffdata.oneStaff.staffID : \"\",\n        phoneNumberEditOff:\"none\",\n        shortBioEditOff: \"none\",\n        // imageholder:state.filename\n        GradeEditOff:\"none\",\n        positionEditOff:\"none\",\n        matricleEditOff:\"none\",\n        formerPostEditOff:\"none\",\n        locationOfFomerPostEditOff:\"none\",\n        decisionNoEditOff:\"none\",\n        decisionDateEditOff:\"none\",\n        diplomaEditOff:\"none\",\n        // speciality:\"\",\n        dateOfAssumptionEditOff:\"none\",\n        // professional address\n        TitleEditOff:\"none\",\n\n        // Emergecy Contact\n        EcontactNameEditOff:\"none\",\n        EcontactOccupationEditOff:\"none\",\n        EcontactAddressEditOff:\"none\",\n        EcontactContactMobileEditOff:\"none\",\n        EContactEmailEditOff:\"none\",\n        // imageholder:state.filename\n\n        \n}\n\n\nexport const TeacherDetails =  ()=>{\n    \n    let [stateDownloadIcon,setStateDownloadIcon] = useState(null)\n    let [displayState , setDisplayState] = useState(initialDisplay)\n    let [displayEditIconState , setDisplayEditIconState] = useState(initialEditIcons)\n\n    let [state , setstate] = useState(initialStateImageValues)\n\n    let {data:titleGetData, error:sectionGetError} =  useSWR(\"/api/generalapi?title=true\")\n    let {data:genderGetData, error:genderGetError} =  useSWR(\"/api/generalapi?gender=true\")\n    let {data:staffGradeGetData, error:staffGradeGetError} = useSWR(\"/api/generalapi?staffGrade=true\")\n    let {data:positionGetData, error:positionGetError} = useSWR(\"/api/generalapi?position=true\")\n    let {data:subjectGetData, error:subjectGetError} =  useSWR(\"/api/subjectapi\")\n\n    let titleData = (titleGetData ? titleGetData.length != 0 && titleGetData :undefined) || [{id:\"\",title:\"\"}]\n    let genderdata = (genderGetData ? genderGetData.length != 0 && genderGetData :undefined) || [{id:\"\",gender:\"\"}]\n    let staffGradeData = (staffGradeGetData ? staffGradeGetData.length != 0 && staffGradeGetData :undefined) || [{id:\"\",grade:\"\"}]\n    let positionData = (positionGetData ? positionGetData.length != 0 && positionGetData :undefined) || [{id:\"\",position:\"\"}]\n    let specialityData = (subjectGetData ? subjectGetData.length != 0 && subjectGetData :undefined) || [{id:\"\",subject:\"\",sectionId:\"\"}]\n    \n    // let initialValues=initialValue(genderdata,bloodgroupdata,religiondata,sectiondata)\n    \n\n    // let router = useParams()\n    // let {query} = router\n    // console.log(\"query\",router)\n    // let [state , setstate] = useState(initialState)\n    // // let router = useParams()\n    // oneStaff = JSON.parse(oneStaff)\n    // // console.log(\"router::\",router)\n    // console.log(\"students:::\",oneStaff)\n    \n    let staffID = 1\n\n    // let {staffID:staffID} = router.query\n\n\n    // const {data:oneStaffdata, error:onStudentError} = useSWR(\"/api/studentapi?AdmissionID=GO10&student=GO11\")\n    const {data:oneStaffdata, error:oneStaffError} = useSWR(`/api/staffapi?staffID=${staffID}`)\n   \n     // student=GO11 NOT USEFUL JUST TESTING the end point\n    let initialValues={\n        FamilyName:oneStaffdata ? oneStaffdata.oneStaff.lastname:\"\",\n        GivenName:oneStaffdata ? oneStaffdata.oneStaff.firstname:\"\",\n        DateOfBirth:oneStaffdata ? new Date(oneStaffdata.oneStaff.dateofbirth).toISOString().slice(0,10):new Date().toISOString().slice(0,10),\n        // DateOfBirth : new Date(),\n        Gender: oneStaffdata ? oneStaffdata.oneStaff.Gender:genderdata[0],\n        TeacherAddress:oneStaffdata ? oneStaffdata.oneStaff.TeacherAddress:\"\",\n        // BloodGroup:oneStaffdata ? oneStaffdata.oneStaff.bloodgroup:bloodgroupdata[0],\n        BloodGroup:bloodgroupdata[0],\n        // Religion:oneStaffdata ? oneStaffdata.oneStaff.religion: religiondata[0],\n        Religion:religiondata[0],\n        eMail:oneStaffdata ? oneStaffdata.oneStaff.email:\"\",\n        speciality:oneStaffdata ? oneStaffdata.oneStaff.Subjects:specialityData[0],\n\n        staffID:oneStaffdata ? oneStaffdata.oneStaff.staffID : \"\",\n        phoneNumber:oneStaffdata ? oneStaffdata.oneStaff.phoneNumber:\"\",\n        shortBio: oneStaffdata ? oneStaffdata.oneStaff.shortbiography:\"\",\n        // imageholder:state.filename\n        Grade:oneStaffdata ? oneStaffdata.oneStaff.staffgrade:staffGradeData[0],\n        position:oneStaffdata ? oneStaffdata.oneStaff.staffPosition : positionData[0],\n        matricle:oneStaffdata ? oneStaffdata.oneStaff.matricle:\"\",\n        formerPost:oneStaffdata ? oneStaffdata.oneStaff.formerPost:\"\",\n        locationOfFomerPost:oneStaffdata ? oneStaffdata.oneStaff.locationOfFomerPost:\"\",\n        decisionNo:oneStaffdata ? oneStaffdata.oneStaff.decisionNo:\"\",\n        decisionDate:oneStaffdata ? new Date(oneStaffdata.oneStaff.decisionDate).toISOString().slice(0,10):new Date().toISOString().slice(0,10),\n        // decisionDate:\"\",\n        diploma:oneStaffdata ? oneStaffdata.oneStaff.diploma:\"\",\n        // speciality:\"\",\n        dateOfAssumption:oneStaffdata ? new Date(oneStaffdata.oneStaff.dateOfAssumption).toISOString().slice(0,10):new Date().toISOString().slice(0,10),\n        // professional address\n        Title:oneStaffdata ? oneStaffdata.oneStaff.Title:titleData[0],\n\n        // Emergecy Contact\n        EcontactName:oneStaffdata ? oneStaffdata.oneStaff.emergencyContactName:\"\",\n        EcontactOccupation:oneStaffdata ? oneStaffdata.oneStaff.EcontactOccupation:\"\",\n        EcontactAddress:oneStaffdata ? oneStaffdata.oneStaff.emergencyContactAddress:\"\",\n        EcontactContactMobile:oneStaffdata ? oneStaffdata.oneStaff.emergencyContactPhone:\"\",\n        EContactEmail:oneStaffdata ? oneStaffdata.oneStaff.emergencyContactEmail:\"\",\n        }\n    // const {data:oneStaffdata, error:onStudentError} = useSWR(\"public/uploads/Student/images/GO10_photo.jpeg\")\n    // console.log(\"check\",oneStaffdata)\n    console.log(\"onestudent\",oneStaffdata)\n    useEffect(()=>{\n        setStateDownloadIcon(true)\n      },[])\n    \n        let imageState = ImageConverter(oneStaffdata)\n       \n    \n    \n    return (\n        \n        <Wrapper>\n            \n            <div>\n                \n                \n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={ValidationSchemaTeacher}\n                    enableReinitialize\n                >\n                    {\n                        ({\n                            values,\n                            getFieldProps,\n                            setFieldValue,\n                            setFieldError,\n                            errors,\n                            validateOnBlur,\n                            handleSubmit,\n                            handleBlur,\n                            handleChange,\n                            isValid,\n                            dirty,\n                            touched\n                        })=>{\n                            return(\n                        \n                            <Form>\n                                <Card id=\"testDiv\">\n                                        <div className=\"float-right\">\n                                            <ul className=\"listStyle\">\n                                                {/* <li className=\"p-2\">\n                                                    {stateDownloadIcon ? <PDFDownloadLink   document={<MyDocument \n                                                            help={oneStaffdata ? oneStaffdata.oneStaff.familyname : null}\n                                                        />} fileName=\"studentID.pdf\">\n                                                        {({ blob, url, loading, error }) => (loading ? '' : <CloudDownloadIcon />)}\n                                                    </PDFDownloadLink>: null}\n                                                </li> */}\n                                                <li className=\"p-2\">{stateDownloadIcon ? <a href=\"#\"  download target=\"_blank\" rel=\"noopener noreferrer\"> <PrintIcon /> </a>:null}</li>\n                                            </ul>\n                                            \n                                        </div>\n                                        <CardHeader\n                                        \n                                            \n                                            avatar = {\n                                                <Avatar className=\"bg-info\">\n                                                    {` ${oneStaffdata ?  oneStaffdata.oneStaff.firstname.substring(0,1).toUpperCase() : null}`}\n                                                </Avatar>\n                                            }\n                                            \n                                            title = {`${oneStaffdata ? \"ABOUT \".concat(\" \",oneStaffdata.oneStaff.Title.title, \" \",oneStaffdata.oneStaff.lastname,\" \",oneStaffdata.oneStaff.firstname).toUpperCase() : null}`}\n                                            subheader={`${new Date().toLocaleDateString()}`}\n                                        />\n                                        \n                                    \n                                        <Grid container  spacing={0} >\n\n                                                <Grid item xs={12}  md={4}  className=\"text-center\" >\n                                                \n                                                <div style={{display:displayState.staffImageEditOn}} className=\"centralize\" \n                                                    \n                                                    onMouseOver={\n                                                        ()=>setDisplayEditIconState((prev)=>({\n                                                                ...prev,\n                                                                staffImageIconEditOff:\"inline\"\n                                                                \n                                                            }))\n                                                        }\n                                                    onMouseOut={\n                                                        ()=>setDisplayEditIconState((prev)=>({\n                                                            ...prev,\n                                                            staffImageIconEditOff:\"none\"\n                                                            \n                                                        }))\n                                                    }    \n                                                > \n                                                    <div style={{display:displayEditIconState.staffImageIconEditOff}} >\n\n                                                        <Button  onClick={()=>{\n                                                                setDisplayState((prev)=>({\n                                                                    ...prev,\n                                                                    staffImageEditOff:\"inline\",\n                                                                    staffImageEditOn:\"none\"\n                                                                }))\n                                                            }}><EditIcon />\n                                                        </Button>\n\n                                                        <Button>\n                                                            <DeleteForeverIcon />\n                                                        </Button>\n                                                    </div>\n                                                    {imageState ? <img  src={imageState} className=\"studentImage\"/> : <img  src={defaultImage} className=\"studentImage\"/>}\n                                                </div>\n                                                <div style={{display:displayState.staffImageEditOff}}>\n                                                    <div>  \n                                                        <label htmlFor=\"image\" className=\"bg-info\">\n                                                            <AddIcon fontSize=\"large\" color=\"primary\"/>\n                                                        </label>\n                                                        <Button onClick={()=>{\n                                                                setDisplayState((prev)=>({\n                                                                    ...prev,\n                                                                    staffImageEditOff:\"none\",\n                                                                    staffImageEditOn:\"inline\"\n                                                                }))\n                                                            }}><CloseIcon />\n                                                        </Button>\n                                                        <Button onClick={async ()=>{\n                                                                let staffImageEdit = await fetch(\"/api/staffapi\",{\n                                                                    body: JSON.stringify(\n                                                                        {\n                                                                            staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                            imageEditValue:state.imagedataBack\n                                                                        }),\n                                                                    method:\"PUT\"\n                                                                })\n                                                                setDisplayState((prev)=>({\n                                                                    ...prev,\n                                                                    staffImageEditOff:\"none\",\n                                                                    staffImageEditOn:\"inline\"\n                                                                }))\n                                                            }}><DoneIcon />         \n                                                        </Button>\n                                                    </div>\n\n                                                    <div className=\"bg-info text-center\">\n                                                        <TextField \n                                                            // component={TextField}\n                                                            // error={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? true : false }\n                                                            \n                                                            // label={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? errors.imageholder : \"image\" }\n                                                            disabled\n                                                            name=\"imageholder\"\n                                                            id=\"imageholder\"\n                                                            style={{width:\"100%\"}}\n                                                            // {...getFieldProps(\"imageholder\")}\n                                                            value={state.filename} />\n                                                        <div style={{display:state.imagesizeError,color:\"red\"}} className=\"text-center\">Image size less than 1MB</div>\n                                                        <Field\n                                                            // width=\"200cm\"\n                                                            // height=\"200cm\"\n                                                            className=\"border border-info rounded-circle m-0 p-0 bg-secondary\"\n                                                            // onerror=\"this.onerror=null;this.src='./default.jpg';\"\n                                                            // component={(params)=><img {...params} src={state}/>}\n                                                            component={params=>{\n                                                            if(state.imagedataBack){\n                                                                return <img {...params} src={state.imagedataBack}/>\n                                                            }\n                                                            else{\n                                                                \n                                                                return <img  {...params} src={defaultImage}/>\n                                                            }\n                                                            }\n                                                        }\n                                                            />\n                                                    </div> \n                                                    \n                                                    <Field\n                                                        id=\"image\"\n                                                        name=\"image\"\n                                                        component={Input}\n                                                        className=\"w-100 d-none\"\n                                                        variant=\"filled\"\n                                                        type=\"file\"\n                                                        accept=\".jpg, .jpeg, .png\"\n                                                        // multiple\n                                                        onChange={(event)=>{\n                                                            // handleChange\n                                                            let fileList = event.target.files\n\n                                                            const formData = new FormData()\n                                                            \n                                                            for(const file of fileList){\n                                                                const name = file.name ? file.name : 'NOT SUPPORTED';\n\n                                                                const type = file.type ? file.type : 'NOT SUPPORTED';\n\n                                                                const size = file.size ? file.size : 'NOT SUPPORTED';\n\n                                                                        if (file.type && file.type.indexOf('image') === -1) {\n                                                                            console.log('File is not an image.', file.type, file,file.type.indexOf('image'));\n                                                                            return;\n                                                                        }\n                                                                        if(file.size > 1000000){\n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                filename:null,\n                                                                                imagedataBack:null,\n                                                                                imagesizeError:\"inline\"\n                                                                            }))\n                                                                            return\n                                                                        }\n                                                                        const reader = new FileReader();\n                                                                        \n                                                                        reader.addEventListener('load', (event) => {\n                                                                            \n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                imagedataBack:event.target.result,\n                                                                                filename:file.name,\n                                                                                imagesizeError:\"none\"\n                                                                            }))\n                                                                            \n                                                                        });\n                                                                        reader.readAsDataURL(file)\n\n                                                                        formData.append(\"file\",file)\n                                                                    \n                                                            }\n                                                        }}\n                                                        />\n                                                    </div>     \n                                                </Grid>\n                                                \n                                        \n                                            <Grid item container  xs={12} md={8} spacing={0}>\n                                                \n                                                <TableContainer >\n                                                    <Table size=\"small\" stickyHeader={true} padding=\"default\" >\n                                                        <TableHead>\n                                                        </TableHead>\n                                                        <TableBody>\n                                                            <TableRow hover role=\"checkbox\" tabIndex={-1} >\n                                                                <TableCell colSpan=\"2\"className=\"bg-info\" >\n                                                                    <div className=\"bolder\">Staff Personal Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover role=\"checkbox\" tabIndex={-1} >\n                                                                <TableCell colSpan=\"2\">\n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    shortBioIconEditOff:\"inline\"\n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                shortBioIconEditOff:\"none\"\n                                                                            }))\n                                                                    } >\n                                                                        <div className=\"bolder\">\n                                                                            Biography\n                                                                        </div>\n                                                                            <span style={{display:displayState.shortBioEditOn}}>\n                                                                                <span >\n                                                                                    {oneStaffdata ? oneStaffdata.oneStaff.shortbiography : null}\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.shortBioIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                shortBioEditOff: \"inline\",\n                                                                                                shortBioEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.shortBioEditOff}}>\n                                                                            <Field\n                                                                                // error={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? true : false }\n                                                                                {...getFieldProps(\"shortBio\")}\n                                                                                label={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? errors.shortBio : \"shortBio\" }\n                                                                                value={values.shortBio}\n                                                                                name=\"shortBio\"\n                                                                                id=\"shortBio\"\n                                                                                // component={()=><textarea></textarea>}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                as=\"textarea\"\n                                                                                \n                                                                            />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        shortBioEditOff:\"none\",\n                                                                                        shortBioEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                shortbiography:values.shortBio\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        shortBioEditOff:\"none\",\n                                                                                        shortBioEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                    \n                                                                </TableCell>\n                                                                \n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Title\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    TitleIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                TitleIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.TitleEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.Title.title : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.TitleIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                TitleEditOff: \"inline\",\n                                                                                                TitleEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.TitleEditOff}}>\n                                                                            <Field\n                                                            \n                                                                                    component={Autocomplete}\n                                                                                    // {...getFieldProps(\"Gender\")}\n                                                                                    value={values.Title}\n                                                                                    defaultValue={values.Title}\n                                                                                    onBlur={handleBlur}\n                                                                                    onChange={(e,selectedOption )=>\n                                                                                        {setFieldValue(\"Title\", selectedOption)\n                                                                                        //  setFieldError(\"Gender\",errors.Gender)\n                                                                                            }\n                                                                                    }\n                                                                                    \n                                                                                    // inputValue={values.Gender.title}\n                                                                                    options={titleData}\n                                                                                    name=\"Title\"\n                                                                                    id=\"Title\"\n                                                                                    getOptionSelected = {(option,value)=> option.title == value.title}\n                                                                                    getOptionLabel={option => option.title}\n                                                                                    renderInput={params => (\n                                                                                        <>\n                                                                                        \n                                                                                        <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        \n                                                                                        name=\"Title\"\n                                                                                        error={errors.hasOwnProperty(\"Title\") && touched.hasOwnProperty(\"Title\") ? true : false }\n                                                                                        label={errors.hasOwnProperty(\"Title\") && touched.hasOwnProperty(\"Title\") ? errors.Title : \"Title\" }\n                                                                                        variant=\"filled\"    \n                                                                                        \n                                                                                    />\n                                                                                        </>\n                                                                                    \n                                                                                    )}\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        TitleEditOff:\"none\",\n                                                                                        TitleEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                Title:values.Title\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        TitleEditOff:\"none\",\n                                                                                        TitleEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow>\n                                                                <TableCell>\n                                                                    Family Name\n                                                                </TableCell>\n                                                                <TableCell >\n                                                                    \n                                                                    \n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    \n                                                                                    FamilyNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                FamilyNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.FamilyNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.lastname : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FamilyNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                FamilyNameEditOff: \"inline\",\n                                                                                                FamilyNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.FamilyNameEditOff}}>\n                                                                        <Field\n                                                                            error={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? true : false }\n                                                                            {...getFieldProps(\"FamilyName\")}\n                                                                            label={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? errors.FamilyName : \"Family Name\" }\n                                                                            value={values.FamilyName}\n                                                                            name=\"FamilyName\"\n                                                                            id=\"FamilyName\"\n                                                                            component={TextField}\n                                                                            className=\"w-100\"\n                                                                            variant=\"filled\"\n                                                                            \n                                                                            />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FamilyNameEditOff:\"none\",\n                                                                                        FamilyNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                familyname:values.FamilyName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FamilyNameEditOff:\"none\",\n                                                                                        FamilyNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n\n\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Given Name\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    GivenNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                GivenNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.GivenNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.firstname : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.GivenNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                GivenNameEditOff: \"inline\",\n                                                                                                GivenNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.GivenNameEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? true : false }\n                                                                                {...getFieldProps(\"GivenName\")}\n                                                                                label={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? errors.GivenName : \"Given Name\" }\n                                                                                value={values.GivenName}\n                                                                                name=\"GivenName\"\n                                                                                id=\"GivenName\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GivenNameEditOff:\"none\",\n                                                                                        GivenNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                givenname:values.GivenName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GivenNameEditOff:\"none\",\n                                                                                        GivenNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell >\n                                                                    Date of Birth\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    DateOfBirthIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                DateOfBirthIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.DateOfBirthEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? new Date(oneStaffdata.oneStaff.dateofbirth).toLocaleDateString() : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.DateOfBirthIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                DateOfBirthEditOff: \"inline\",\n                                                                                                DateOfBirthEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.DateOfBirthEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? true : false }\n                                                                                {...getFieldProps(\"DateOfBirth\")}\n                                                                                label={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? errors.DateOfBirth : \"Date Of Birth\" }\n                                                                                value={values.DateOfBirth}\n                                                                                name=\"DateOfBirth\"\n                                                                                id=\"DateOfBirth\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                type=\"date\"\n                                                                                InputLabelProps={{\n                                                                                    shrink:true\n                                                                                }}\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        DateOfBirthEditOff:\"none\",\n                                                                                        DateOfBirthEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                dateofbirth:values.DateOfBirth\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        DateOfBirthEditOff:\"none\",\n                                                                                        DateOfBirthEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>   \n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Age\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    <div className=\"bolder\">{oneStaffdata ? new Date().getFullYear() - new Date(oneStaffdata.oneStaff.dateofbirth).getFullYear() : null}</div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Blood Group\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    BloodGroupIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                BloodGroupIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.BloodGroupEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.bloodgroup : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.BloodGroupIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                BloodGroupEditOff: \"inline\",\n                                                                                                BloodGroupEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.BloodGroupEditOff}}>\n                                                                            <Field\n                                                                \n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={values.BloodGroup}\n                                                                                defaultValue={values.BloodGroup}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(\"BloodGroup\", selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                \n                                                                                options={bloodgroupdata}\n                                                                                name=\"BloodGroup\"\n                                                                                id=\"BloodGroup\"\n                                                                                getOptionSelected={(option,value)=>option.group == value.group}\n                                                                                getOptionLabel={option => option.group}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                    component={TextField}\n                                                                                    {...params}\n                                                                                    \n                                                                                    name=\"BloodGroup\"\n                                                                                    error={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? true : false }\n                                                                                    label={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? errors.BloodGroup : \"BloodGroup\" }\n                                                                                    variant=\"filled\"    \n                                                                                    \n                                                                                />\n                                                                                    </>\n                                                                                \n                                                                                )}\n\n                                                                            />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        BloodGroupEditOff:\"none\",\n                                                                                        BloodGroupEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                bloodgroup:values.BloodGroup\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        BloodGroupEditOff:\"none\",\n                                                                                        BloodGroupEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>   \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Gender\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GenderIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    GenderIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                        \n                                                                            <span style={{display:displayState.GenderEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.Gender.gender : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.GenderIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                GenderEditOff: \"inline\",\n                                                                                                GenderEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.GenderEditOff}}>\n                                                                        <Field\n                                                        \n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={values.Gender}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(\"Gender\", selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                options={genderdata}\n                                                                                name=\"Gender\"\n                                                                                id=\"Gender\"\n                                                                                \n                                                                                getOptionSelected = {(option,value)=> option.gender == value.gender}\n                                                                                getOptionLabel={option => option.gender}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                    component={TextField}\n                                                                                    {...params}\n                                                                                    \n                                                                                    name=\"Gender\"\n                                                                                    error={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? true : false }\n                                                                                    label={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? errors.Gender : \"Gender\" }\n                                                                                    variant=\"filled\"    \n                                                                                    \n                                                                                />\n                                                                                    </>\n                                                                                \n                                                                                )}\n\n                                                                                    \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GenderEditOff:\"none\",\n                                                                                        GenderEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                gender:values.Gender\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GenderEditOff:\"none\",\n                                                                                        GenderEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>  \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Email\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    eMailIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                eMailIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.eMailEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.email : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.eMailIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                eMailEditOff: \"inline\",\n                                                                                                eMailEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.eMailEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? true : false }\n                                                                                {...getFieldProps(\"eMail\")}\n                                                                                label={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? errors.eMail : \"email\" }\n                                                                                value={values.eMail}\n                                                                                name=\"eMail\"\n                                                                                id=\"eMail\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                type=\"email\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        eMailEditOff:\"none\",\n                                                                                        eMailEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                email:values.eMail\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        eMailEditOff:\"none\",\n                                                                                        eMailEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                    \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Religion\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    ReligionIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                ReligionIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.ReligionEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.religion : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.ReligionIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                ReligionEditOff: \"inline\",\n                                                                                                ReligionEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.ReligionEditOff}}>\n                                                                            <Field\n                                                            \n                                                                                    component={Autocomplete}\n                                                                                    // {...getFieldProps(\"Gender\")}\n                                                                                    value={values.Religion}\n                                                                                    defaultValue={values.Religion}\n                                                                                    onBlur={handleBlur}\n                                                                                    onChange={(e,selectedOption )=>\n                                                                                        {setFieldValue(\"Religion\", selectedOption)\n                                                                                        //  setFieldError(\"Gender\",errors.Gender)\n                                                                                            }\n                                                                                    }\n                                                                                    \n                                                                                    // inputValue={values.Gender.title}\n                                                                                    options={religiondata}\n                                                                                    name=\"Religion\"\n                                                                                    id=\"Religion\"\n                                                                                    getOptionSelected = {(option,value)=> option.doctrine == value.doctrine}\n                                                                                    getOptionLabel={option => option.doctrine}\n                                                                                    renderInput={params => (\n                                                                                        <>\n                                                                                        \n                                                                                        <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        \n                                                                                        name=\"Religion\"\n                                                                                        error={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? true : false }\n                                                                                        label={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? errors.Religion : \"Religion\" }\n                                                                                        variant=\"filled\"    \n                                                                                        \n                                                                                    />\n                                                                                        </>\n                                                                                    \n                                                                                    )}\n\n                                                                                    \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        ReligionEditOff:\"none\",\n                                                                                        ReligionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                religion:values.Religion\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        ReligionEditOff:\"none\",\n                                                                                        ReligionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Teacher Address\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    TeacherAddressIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                TeacherAddressIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.TeacherAddressEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.teacherAddress : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.TeacherAddressIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                TeacherAddressEditOff: \"inline\",\n                                                                                                TeacherAddressEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                            <span style={{display:displayState.TeacherAddressEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"TeacherAddress\") && touched.hasOwnProperty(\"TeacherAddress\") ? true : false }\n                                                                                        {...getFieldProps(\"TeacherAddress\")}\n                                                                                        label={errors.hasOwnProperty(\"TeacherAddress\") && touched.hasOwnProperty(\"TeacherAddress\") ? errors.TeacherAddress : \"Teacher Address\" }\n                                                                                        value={values.TeacherAddress}\n                                                                                        name=\"TeacherAddress\"\n                                                                                        id=\"TeacherAddress\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        \n                                                                                        \n                                                                                    />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        TeacherAddressEditOff:\"none\",\n                                                                                        TeacherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                TeacherAddress:values.TeacherAddress\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        TeacherAddressEditOff:\"none\",\n                                                                                        TeacherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n\n                                                            <TableRow hover role=\"checkbox\" tabIndex={-1} >\n                                                                <TableCell colSpan=\"2\"className=\"bg-info\" >\n                                                                    <div className=\"bolder\">Staff Professional Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow>\n                                                                <TableCell  >\n                                                                    Staff ID\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.staffID : null}</span>\n                                                                \n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Phone Number\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        phoneNumberIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    phoneNumberIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                            \n                                                                                <span style={{display:displayState.phoneNumberEditOn}}>\n                                                                                    <span >\n                                                                                        <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.phoneNumber : null}</span>\n                                                                                    </span>\n                                                                                    <span style={{display:displayEditIconState.phoneNumberIconEditOff}}>\n\n                                                                                        <Button  onClick={()=>{\n                                                                                                setDisplayState((prev)=>({\n                                                                                                    ...prev,\n                                                                                                    \n                                                                                                    phoneNumberEditOff: \"inline\",\n                                                                                                    phoneNumberEditOn:\"none\"\n                                                                                                }))\n                                                                                            }}><EditIcon />\n                                                                                        </Button>\n\n                                                                                        <Button>\n                                                                                            <DeleteForeverIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                            \n                                                                                    \n                                                                                </span>\n                                                                            <span style={{display:displayState.phoneNumberEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"phoneNumber\") && touched.hasOwnProperty(\"phoneNumber\") ? true : false }\n                                                                                        {...getFieldProps(\"phoneNumber\")}\n                                                                                        label={errors.hasOwnProperty(\"phoneNumber\") && touched.hasOwnProperty(\"phoneNumber\") ? errors.phoneNumber : \"phoneNumber\" }\n                                                                                        value={values.phoneNumber}\n                                                                                        name=\"phoneNumber\"\n                                                                                        id=\"phoneNumber\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        type=\"tel\"\n                                                                                        \n                                                                                        \n                                                                                        />\n                                                                                <Button onClick={()=>{\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            phoneNumberEditOff:\"none\",\n                                                                                            phoneNumberEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><CloseIcon />\n                                                                                </Button>\n                                                                                <Button onClick={async ()=>{\n                                                                                        let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                            body: JSON.stringify(\n                                                                                                {\n                                                                                                    staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                    phoneNumber:values.phoneNumber\n                                                                                                }),\n                                                                                            method:\"PUT\"\n                                                                                        })\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            phoneNumberEditOff:\"none\",\n                                                                                            phoneNumberEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><DoneIcon />\n                                                                                </Button>\n                                                                            </span>\n                                                                        </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                speciality\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    specialityIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                specialityIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.specialityEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.Subjects.subject : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.specialityIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                specialityEditOff: \"inline\",\n                                                                                                specialityEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.specialityEditOff}}>\n                                                                            <Field\n                                                            \n                                                                                    component={Autocomplete}\n                                                                                    // {...getFieldProps(\"Gender\")}\n                                                                                    value={values.speciality}\n                                                                                    defaultValue={values.speciality}\n                                                                                    onBlur={handleBlur}\n                                                                                    onChange={(e,selectedOption )=>\n                                                                                        {setFieldValue(\"speciality\", selectedOption)\n                                                                                        //  setFieldError(\"Gender\",errors.Gender)\n                                                                                            }\n                                                                                    }\n                                                                                    \n                                                                                    // inputValue={values.Gender.title}\n                                                                                    options={specialityData}\n                                                                                    name=\"speciality\"\n                                                                                    id=\"speciality\"\n                                                                                    getOptionSelected = {(option,value)=> option.subject == value.subject}\n                                                                                    getOptionLabel={option => option.subject}\n                                                                                    renderInput={params => (\n                                                                                        <>\n                                                                                        \n                                                                                        <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        \n                                                                                        name=\"speciality\"\n                                                                                        error={errors.hasOwnProperty(\"speciality\") && touched.hasOwnProperty(\"speciality\") ? true : false }\n                                                                                        label={errors.hasOwnProperty(\"speciality\") && touched.hasOwnProperty(\"speciality\") ? errors.speciality : \"speciality\" }\n                                                                                        variant=\"filled\"    \n                                                                                        \n                                                                                    />\n                                                                                        </>\n                                                                                    \n                                                                                    )}\n\n                                                                                    \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        specialityEditOff:\"none\",\n                                                                                        specialityEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                Subjects:values.speciality\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        specialityEditOff:\"none\",\n                                                                                        specialityEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                Grade\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    GradeIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                GradeIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.GradeEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.staffgrade.grade : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.GradeIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                GradeEditOff: \"inline\",\n                                                                                                GradeEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.GradeEditOff}}>\n                                                                            <Field\n                                                            \n                                                                                    component={Autocomplete}\n                                                                                    // {...getFieldProps(\"Gender\")}\n                                                                                    value={values.Grade}\n                                                                                    defaultValue={values.Grade}\n                                                                                    onBlur={handleBlur}\n                                                                                    onChange={(e,selectedOption )=>\n                                                                                        {setFieldValue(\"Grade\", selectedOption)\n                                                                                        //  setFieldError(\"Gender\",errors.Gender)\n                                                                                            }\n                                                                                    }\n                                                                                    \n                                                                                    // inputValue={values.Gender.title}\n                                                                                    options={staffGradeData}\n                                                                                    name=\"Grade\"\n                                                                                    id=\"Grade\"\n                                                                                    getOptionSelected = {(option,value)=> option.grade == value.grade}\n                                                                                    getOptionLabel={option => option.grade}\n                                                                                    renderInput={params => (\n                                                                                        <>\n                                                                                        \n                                                                                        <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        \n                                                                                        name=\"Grade\"\n                                                                                        error={errors.hasOwnProperty(\"Grade\") && touched.hasOwnProperty(\"Grade\") ? true : false }\n                                                                                        label={errors.hasOwnProperty(\"Grade\") && touched.hasOwnProperty(\"Grade\") ? errors.Grade : \"Grade\" }\n                                                                                        variant=\"filled\"    \n                                                                                        \n                                                                                    />\n                                                                                        </>\n                                                                                    \n                                                                                    )}\n\n                                                                                    \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GradeEditOff:\"none\",\n                                                                                        GradeEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                Grade:values.Grade\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GradeEditOff:\"none\",\n                                                                                        GradeEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Position\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    positionIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                positionIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.positionEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.staffPosition.position : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.positionIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                positionEditOff: \"inline\",\n                                                                                                positionEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.positionEditOff}}>\n                                                                            <Field\n                                                            \n                                                                                    component={Autocomplete}\n                                                                                    // {...getFieldProps(\"Gender\")}\n                                                                                    value={values.position}\n                                                                                    defaultValue={values.position}\n                                                                                    onBlur={handleBlur}\n                                                                                    onChange={(e,selectedOption )=>\n                                                                                        {setFieldValue(\"position\", selectedOption)\n                                                                                        //  setFieldError(\"Gender\",errors.Gender)\n                                                                                            }\n                                                                                    }\n                                                                                    \n                                                                                    // inputValue={values.Gender.title}\n                                                                                    options={positionData}\n                                                                                    name=\"position\"\n                                                                                    id=\"position\"\n                                                                                    getOptionSelected = {(option,value)=> option.position == value.position}\n                                                                                    getOptionLabel={option => option.position}\n                                                                                    renderInput={params => (\n                                                                                        <>\n                                                                                        \n                                                                                        <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        \n                                                                                        name=\"position\"\n                                                                                        error={errors.hasOwnProperty(\"position\") && touched.hasOwnProperty(\"position\") ? true : false }\n                                                                                        label={errors.hasOwnProperty(\"position\") && touched.hasOwnProperty(\"position\") ? errors.position : \"position\" }\n                                                                                        variant=\"filled\"    \n                                                                                        \n                                                                                    />\n                                                                                        </>\n                                                                                    \n                                                                                    )}\n\n                                                                                    \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        positionEditOff:\"none\",\n                                                                                        positionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                position:values.position\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        positionEditOff:\"none\",\n                                                                                        positionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Matricle\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        matricleIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    matricleIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                            \n                                                                                <span style={{display:displayState.matricleEditOn}}>\n                                                                                    <span >\n                                                                                        <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.matricle : null}</span>\n                                                                                    </span>\n                                                                                    <span style={{display:displayEditIconState.matricleIconEditOff}}>\n\n                                                                                        <Button  onClick={()=>{\n                                                                                                setDisplayState((prev)=>({\n                                                                                                    ...prev,\n                                                                                                    \n                                                                                                    matricleEditOff: \"inline\",\n                                                                                                    matricleEditOn:\"none\"\n                                                                                                }))\n                                                                                            }}><EditIcon />\n                                                                                        </Button>\n\n                                                                                        <Button>\n                                                                                            <DeleteForeverIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                            \n                                                                                    \n                                                                                </span>\n                                                                            <span style={{display:displayState.matricleEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"matricle\") && touched.hasOwnProperty(\"matricle\") ? true : false }\n                                                                                        {...getFieldProps(\"matricle\")}\n                                                                                        label={errors.hasOwnProperty(\"matricle\") && touched.hasOwnProperty(\"matricle\") ? errors.matricle : \"matricle\" }\n                                                                                        value={values.matricle}\n                                                                                        name=\"matricle\"\n                                                                                        id=\"matricle\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        type=\"tel\"\n                                                                                        \n                                                                                        \n                                                                                        />\n                                                                                <Button onClick={()=>{\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            matricleEditOff:\"none\",\n                                                                                            matricleEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><CloseIcon />\n                                                                                </Button>\n                                                                                <Button onClick={async ()=>{\n                                                                                        let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                            body: JSON.stringify(\n                                                                                                {\n                                                                                                    staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                    matricle:values.matricle\n                                                                                                }),\n                                                                                            method:\"PUT\"\n                                                                                        })\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            matricleEditOff:\"none\",\n                                                                                            matricleEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><DoneIcon />\n                                                                                </Button>\n                                                                            </span>\n                                                                        </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow>\n                                                            <TableCell  >\n                                                                    Former Post\n                                                                </TableCell>\n                                                            <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        formerPostIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    formerPostIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                            \n                                                                                <span style={{display:displayState.formerPostEditOn}}>\n                                                                                    <span >\n                                                                                        <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.formerPost : null}</span>\n                                                                                    </span>\n                                                                                    <span style={{display:displayEditIconState.formerPostIconEditOff}}>\n\n                                                                                        <Button  onClick={()=>{\n                                                                                                setDisplayState((prev)=>({\n                                                                                                    ...prev,\n                                                                                                    \n                                                                                                    formerPostEditOff: \"inline\",\n                                                                                                    formerPostEditOn:\"none\"\n                                                                                                }))\n                                                                                            }}><EditIcon />\n                                                                                        </Button>\n\n                                                                                        <Button>\n                                                                                            <DeleteForeverIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                            \n                                                                                    \n                                                                                </span>\n                                                                            <span style={{display:displayState.formerPostEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"formerPost\") && touched.hasOwnProperty(\"formerPost\") ? true : false }\n                                                                                        {...getFieldProps(\"formerPost\")}\n                                                                                        label={errors.hasOwnProperty(\"formerPost\") && touched.hasOwnProperty(\"formerPost\") ? errors.formerPost : \"formerPost\" }\n                                                                                        value={values.formerPost}\n                                                                                        name=\"formerPost\"\n                                                                                        id=\"formerPost\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        type=\"tel\"\n                                                                                        \n                                                                                        \n                                                                                        />\n                                                                                <Button onClick={()=>{\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            formerPostEditOff:\"none\",\n                                                                                            formerPostEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><CloseIcon />\n                                                                                </Button>\n                                                                                <Button onClick={async ()=>{\n                                                                                        let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                            body: JSON.stringify(\n                                                                                                {\n                                                                                                    staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                    formerPost:values.formerPost\n                                                                                                }),\n                                                                                            method:\"PUT\"\n                                                                                        })\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            formerPostEditOff:\"none\",\n                                                                                            formerPostEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><DoneIcon />\n                                                                                </Button>\n                                                                            </span>\n                                                                        </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow>\n                                                            <TableCell  >\n                                                                    Location of Former Post\n                                                                </TableCell>\n                                                            <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        locationOfFomerPostIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    locationOfFomerPostIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                            \n                                                                                <span style={{display:displayState.locationOfFomerPostEditOn}}>\n                                                                                    <span >\n                                                                                        <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.locationOfFomerPost : null}</span>\n                                                                                    </span>\n                                                                                    <span style={{display:displayEditIconState.locationOfFomerPostIconEditOff}}>\n\n                                                                                        <Button  onClick={()=>{\n                                                                                                setDisplayState((prev)=>({\n                                                                                                    ...prev,\n                                                                                                    \n                                                                                                    locationOfFomerPostEditOff: \"inline\",\n                                                                                                    locationOfFomerPostEditOn:\"none\"\n                                                                                                }))\n                                                                                            }}><EditIcon />\n                                                                                        </Button>\n\n                                                                                        <Button>\n                                                                                            <DeleteForeverIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                            \n                                                                                    \n                                                                                </span>\n                                                                            <span style={{display:displayState.locationOfFomerPostEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"locationOfFomerPost\") && touched.hasOwnProperty(\"locationOfFomerPost\") ? true : false }\n                                                                                        {...getFieldProps(\"locationOfFomerPost\")}\n                                                                                        label={errors.hasOwnProperty(\"locationOfFomerPost\") && touched.hasOwnProperty(\"locationOfFomerPost\") ? errors.locationOfFomerPost : \"location Of Fomer Post\" }\n                                                                                        value={values.locationOfFomerPost}\n                                                                                        name=\"locationOfFomerPost\"\n                                                                                        id=\"locationOfFomerPost\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        type=\"tel\"\n                                                                                        \n                                                                                        \n                                                                                        />\n                                                                                <Button onClick={()=>{\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            locationOfFomerPostEditOff:\"none\",\n                                                                                            locationOfFomerPostEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><CloseIcon />\n                                                                                </Button>\n                                                                                <Button onClick={async ()=>{\n                                                                                        let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                            body: JSON.stringify(\n                                                                                                {\n                                                                                                    staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                    locationOfFomerPost:values.locationOfFomerPost\n                                                                                                }),\n                                                                                            method:\"PUT\"\n                                                                                        })\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            locationOfFomerPostEditOff:\"none\",\n                                                                                            locationOfFomerPostEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><DoneIcon />\n                                                                                </Button>\n                                                                            </span>\n                                                                        </div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow>\n                                                            <TableCell  >\n                                                                    Decision/Decree Number\n                                                                </TableCell>\n                                                            <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        decisionNoIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    decisionNoIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                            \n                                                                                <span style={{display:displayState.decisionNoIconEditOff}}>\n                                                                                    <span >\n                                                                                        <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.decisionNo : null}</span>\n                                                                                    </span>\n                                                                                    <span style={{display:displayEditIconState.decisionNoIconEditOff}}>\n\n                                                                                        <Button  onClick={()=>{\n                                                                                                setDisplayState((prev)=>({\n                                                                                                    ...prev,\n                                                                                                    \n                                                                                                    decisionNoEditOff: \"inline\",\n                                                                                                    decisionNoEditOn:\"none\"\n                                                                                                }))\n                                                                                            }}><EditIcon />\n                                                                                        </Button>\n\n                                                                                        <Button>\n                                                                                            <DeleteForeverIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                            \n                                                                                    \n                                                                                </span>\n                                                                            <span style={{display:displayState.decisionNoEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"decisionNo\") && touched.hasOwnProperty(\"decisionNo\") ? true : false }\n                                                                                        {...getFieldProps(\"decisionNo\")}\n                                                                                        label={errors.hasOwnProperty(\"decisionNo\") && touched.hasOwnProperty(\"decisionNo\") ? errors.decisionNo : \"decisionNo\" }\n                                                                                        value={values.decisionNo}\n                                                                                        name=\"decisionNo\"\n                                                                                        id=\"decisionNo\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        type=\"tel\"\n                                                                                        \n                                                                                        \n                                                                                        />\n                                                                                <Button onClick={()=>{\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            decisionNoEditOff:\"none\",\n                                                                                            decisionNoEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><CloseIcon />\n                                                                                </Button>\n                                                                                <Button onClick={async ()=>{\n                                                                                        let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                            body: JSON.stringify(\n                                                                                                {\n                                                                                                    staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                    decisionNo:values.decisionNo\n                                                                                                }),\n                                                                                            method:\"PUT\"\n                                                                                        })\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            decisionNoEditOff:\"none\",\n                                                                                            decisionNoEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><DoneIcon />\n                                                                                </Button>\n                                                                            </span>\n                                                                        </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Decision Date\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        decisionDateIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    decisionDateIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                            \n                                                                                <span style={{display:displayState.decisionDateEditOn}}>\n                                                                                    <span >\n                                                                                        <span className=\"bolder\">{oneStaffdata ? new Date(oneStaffdata.oneStaff.decisionDate).toLocaleDateString() : null}</span>\n                                                                                    </span>\n                                                                                    <span style={{display:displayEditIconState.decisionDateIconEditOff}}>\n\n                                                                                        <Button  onClick={()=>{\n                                                                                                setDisplayState((prev)=>({\n                                                                                                    ...prev,\n                                                                                                    \n                                                                                                    decisionDateEditOff: \"inline\",\n                                                                                                    decisionDateEditOn:\"none\"\n                                                                                                }))\n                                                                                            }}><EditIcon />\n                                                                                        </Button>\n\n                                                                                        <Button>\n                                                                                            <DeleteForeverIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                            \n                                                                                    \n                                                                                </span>\n                                                                            <span style={{display:displayState.decisionDateEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"decisionDate\") && touched.hasOwnProperty(\"decisionDate\") ? true : false }\n                                                                                        {...getFieldProps(\"decisionDate\")}\n                                                                                        label={errors.hasOwnProperty(\"decisionDate\") && touched.hasOwnProperty(\"decisionDate\") ? errors.decisionDate : \"decisionDate\" }\n                                                                                        value={values.decisionDate}\n                                                                                        name=\"decisionDate\"\n                                                                                        id=\"decisionDate\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        type=\"date\"\n                                                                                        \n                                                                                        \n                                                                                        />\n                                                                                <Button onClick={()=>{\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            decisionDateEditOff:\"none\",\n                                                                                            decisionDateEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><CloseIcon />\n                                                                                </Button>\n                                                                                <Button onClick={async ()=>{\n                                                                                        let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                            body: JSON.stringify(\n                                                                                                {\n                                                                                                    staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                    decisionDate:values.decisionDate\n                                                                                                }),\n                                                                                            method:\"PUT\"\n                                                                                        })\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            decisionDateEditOff:\"none\",\n                                                                                            decisionDateEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><DoneIcon />\n                                                                                </Button>\n                                                                            </span>\n                                                                        </div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    diploma\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        diplomaIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    diplomaIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                            \n                                                                                <span style={{display:displayState.diplomaEditOn}}>\n                                                                                    <span >\n                                                                                        <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.diploma : null}</span>\n                                                                                    </span>\n                                                                                    <span style={{display:displayEditIconState.diplomaIconEditOff}}>\n\n                                                                                        <Button  onClick={()=>{\n                                                                                                setDisplayState((prev)=>({\n                                                                                                    ...prev,\n                                                                                                    \n                                                                                                    diplomaEditOff: \"inline\",\n                                                                                                    diplomaEditOn:\"none\"\n                                                                                                }))\n                                                                                            }}><EditIcon />\n                                                                                        </Button>\n\n                                                                                        <Button>\n                                                                                            <DeleteForeverIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                            \n                                                                                    \n                                                                                </span>\n                                                                            <span style={{display:displayState.diplomaEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"diploma\") && touched.hasOwnProperty(\"diploma\") ? true : false }\n                                                                                        {...getFieldProps(\"diploma\")}\n                                                                                        label={errors.hasOwnProperty(\"diploma\") && touched.hasOwnProperty(\"diploma\") ? errors.decisionDate : \"diploma\" }\n                                                                                        value={values.decisionDate}\n                                                                                        name=\"diploma\"\n                                                                                        id=\"diploma\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        type=\"tel\"\n                                                                                        \n                                                                                        \n                                                                                        />\n                                                                                <Button onClick={()=>{\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            diplomaEditOff:\"none\",\n                                                                                            diplomaEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><CloseIcon />\n                                                                                </Button>\n                                                                                <Button onClick={async ()=>{\n                                                                                        let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                            body: JSON.stringify(\n                                                                                                {\n                                                                                                    staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                    diploma:values.diploma\n                                                                                                }),\n                                                                                            method:\"PUT\"\n                                                                                        })\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            diplomaEditOff:\"none\",\n                                                                                            diplomaEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><DoneIcon />\n                                                                                </Button>\n                                                                            </span>\n                                                                        </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell >\n                                                                    date Of Assumption\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    dateOfAssumptionIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                dateOfAssumptionIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.dateOfAssumptionEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? new Date(oneStaffdata.oneStaff.dateOfAssumption).toLocaleDateString() : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.dateOfAssumptionIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                dateOfAssumptionEditOff: \"inline\",\n                                                                                                dateOfAssumptionEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.dateOfAssumptionEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"dateOfAssumption\") && touched.hasOwnProperty(\"dateOfAssumption\") ? true : false }\n                                                                                {...getFieldProps(\"dateOfAssumption\")}\n                                                                                label={errors.hasOwnProperty(\"dateOfAssumption\") && touched.hasOwnProperty(\"dateOfAssumption\") ? errors.dateOfAssumption : \"date Of Assumption\" }\n                                                                                value={values.dateOfAssumption}\n                                                                                name=\"dateOfAssumption\"\n                                                                                id=\"dateOfAssumption\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                type=\"date\"\n                                                                                InputLabelProps={{\n                                                                                    shrink:true\n                                                                                }}\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        dateOfAssumptionEditOff:\"none\",\n                                                                                        dateOfAssumptionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                dateOfAssumption:values.dateOfAssumption\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        dateOfAssumptionEditOff:\"none\",\n                                                                                        dateOfAssumptionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>   \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover role=\"checkbox\" tabIndex={-1} >\n                                                                <TableCell colSpan=\"2\"className=\"bg-info\" >\n                                                                    <div className=\"bolder\">Emergency Contact Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            \n\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    E-contact Name\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    EcontactNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                EcontactNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.EcontactNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.emergencyContactName : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.EcontactNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                EcontactNameEditOff: \"inline\",\n                                                                                                EcontactNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.EcontactNameEditOff}}>\n                                                                            <Field\n                                                                                    error={errors.hasOwnProperty(\"EcontactName\") && touched.hasOwnProperty(\"EcontactName\") ? true : false }\n                                                                                    {...getFieldProps(\"EcontactName\")}\n                                                                                    label={errors.hasOwnProperty(\"EcontactName\") && touched.hasOwnProperty(\"EcontactName\") ? errors.EcontactName : \"E-contact Name\" }\n                                                                                    value={values.EcontactName}\n                                                                                    name=\"EcontactName\"\n                                                                                    id=\"EcontactName\"\n                                                                                    component={TextField}\n                                                                                    className=\"w-100\"\n                                                                                    variant=\"filled\"\n                                                                                    \n                                                                                    />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EcontactNameEditOff:\"none\",\n                                                                                        EcontactNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                EcontactName:values.EcontactName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EcontactNameEditOff:\"none\",\n                                                                                        EcontactNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    E-contactOccupation\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    EcontactOccupationIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                EcontactOccupationIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.EcontactOccupationEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.EcontactOccupation : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.EcontactOccupationIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                EcontactOccupationEditOff: \"inline\",\n                                                                                                EcontactOccupationEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.EcontactOccupationEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"EcontactOccupation\") && touched.hasOwnProperty(\"EcontactOccupation\") ? true : false }\n                                                                                {...getFieldProps(\"EcontactOccupation\")}\n                                                                                label={errors.hasOwnProperty(\"EcontactOccupation\") && touched.hasOwnProperty(\"EcontactOccupation\") ? errors.EcontactOccupation : \"EcontactOccupation\" }\n                                                                                value={values.EcontactOccupation}\n                                                                                name=\"EcontactOccupation\"\n                                                                                id=\"EcontactOccupation\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EcontactOccupationEditOff:\"none\",\n                                                                                        EcontactOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                EcontactOccupation:values.EcontactOccupation\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EcontactOccupationEditOff:\"none\",\n                                                                                        EcontactOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    E-contact Address\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    EcontactAddressIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                EcontactAddressIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.EcontactAddressEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.emergencyContactAddress : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.EcontactAddressIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                EcontactAddressEditOff: \"inline\",\n                                                                                                EcontactAddressEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.EcontactAddressEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"EcontactAddress\") && touched.hasOwnProperty(\"EcontactAddress\") ? true : false }\n                                                                                {...getFieldProps(\"EcontactAddress\")}\n                                                                                label={errors.hasOwnProperty(\"EcontactAddress\") && touched.hasOwnProperty(\"EcontactAddress\") ? errors.EcontactAddress : \"EcontactAddress\" }\n                                                                                value={values.EcontactAddress}\n                                                                                name=\"EcontactAddress\"\n                                                                                id=\"EcontactAddress\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EcontactAddressEditOff:\"none\",\n                                                                                        EcontactAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                EcontactAddress:values.EcontactAddress\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EcontactAddressEditOff:\"none\",\n                                                                                        EcontactAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    E-Mobile Contact\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    EcontactContactMobileIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                EcontactContactMobileIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.EcontactContactMobileEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.emergencyContactPhone : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.EcontactContactMobileIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                EcontactContactMobileEditOff: \"inline\",\n                                                                                                EcontactContactMobileEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.EcontactContactMobileEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"EcontactContactMobile\") && touched.hasOwnProperty(\"EcontactContactMobile\") ? true : false }\n                                                                                {...getFieldProps(\"EcontactContactMobile\")}\n                                                                                label={errors.hasOwnProperty(\"EcontactContactMobile\") && touched.hasOwnProperty(\"EcontactContactMobile\") ? errors.EcontactContactMobile : \"E-Mobile Contact\" }\n                                                                                value={values.EcontactContactMobile}\n                                                                                name=\"EcontactContactMobile\"\n                                                                                id=\"EcontactContactMobile\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EcontactContactMobileEditOff:\"none\",\n                                                                                        EcontactContactMobileEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                EcontactContactMobile:values.EcontactContactMobile\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EcontactContactMobileEditOff:\"none\",\n                                                                                        EcontactContactMobileEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    E-Contact Email\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    EContactEmailIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                EContactEmailIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.EContactEmailEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStaffdata ? oneStaffdata.oneStaff.emergencyContactEmail : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.EContactEmailIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                EContactEmailEditOff: \"inline\",\n                                                                                                EContactEmailEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.EContactEmailEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"EContactEmail\") && touched.hasOwnProperty(\"EContactEmail\") ? true : false }\n                                                                                {...getFieldProps(\"EContactEmail\")}\n                                                                                label={errors.hasOwnProperty(\"EContactEmail\") && touched.hasOwnProperty(\"EContactEmail\") ? errors.EContactEmail : \"E-Contact Email\" }\n                                                                                value={values.EContactEmail}\n                                                                                name=\"EContactEmail\"\n                                                                                id=\"EContactEmail\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EContactEmailEditOff:\"none\",\n                                                                                        EContactEmailEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/staffapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                staffID: staffID, // THIS VALUE WILL BE entered with cookies\n                                                                                                EContactEmail:values.EContactEmail\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        EContactEmailEditOff:\"none\",\n                                                                                        EContactEmailEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        </TableBody>\n                                                        \n                                                    </Table>\n                                                </TableContainer>\n                                            </Grid>\n                                            \n                                        </Grid>\n                                    {/* </PdfConverter> */}\n                                    \n                                </Card>\n\n                            </Form>\n\n                            )\n                        }\n                    }\n                   \n                </Formik>\n              \n            </div>\n        </Wrapper>    \n    )\n    \n}\n\n\n","// import StudentDatabase from \"../../database/studentDatabase\"\nimport React, {useState} from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport useSWR from \"swr\"\nimport {Link} from \"react-router-dom\"\nimport Table from \"@material-ui/core/Table\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport TableHead from \"@material-ui/core/TableHead\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport Card from \"@material-ui/core/Card\"\nimport TableContainer from '@material-ui/core/TableContainer';\n// import dynamic from \"next/dynamic\"\n// import Link from \"next/link\"\n// const BrowserSiteOutput = dynamic(\n//     ()=>import(\"../../components/browserSiteOutput\").then((mod)=>mod.BrowserSiteOutput),\n//         {ssr:false}\n//         )\n\nexport const StaffTable  = ()=>{\n\n    let {data:AllStaff, error:AllStudentsError} = useSWR(\"/api/staffapi?AllstaffInSChool=true\")\n    let [AllStaffstate, setStudentState] = useState(undefined)\n    \n        \n    let handleRefresh = async ()=>{\n        let data = await fetch(\"/api/staffapi?AllstaffInSChool=true\")\n        let responces = await data.json()\n        setStudentState(responces)\n        AllStaff = AllStaffstate\n    }\n        \n    //     fetch(\"/api/staffapi?AllstaffInSChool=true\",{\n    //                 method:\"GET\"\n    //             }).then((data)=>data.json()).then((Staff)=>{\n    //                 AllStaff = Staff\n    //                 console.log(\"data daata::\",Staff)\n    //             })\n            \n       \n    //     // // AllStudentsError = result.error\n    //     console.log(\"allStudents:\",AllStaff)\n    // },[AllStaff])\n\n    let tablehead = [\n        {header:\"number\"},\n        {header:\"staff id\"},\n        {header:\"Family Name\"},\n        {header:\"Given Name\"},\n        {header:\"speciality\"},\n        {header:\"Gender\"},\n        {header:\"staffgrade\"},\n        {header:\"diploma\"},\n        {header:\"dateOfAssumption\"},\n        {header:\"Blood Group\"},\n        {header:\"grade\"},\n        {header:\"matricle\"},\n        {header:\"PhoneNumber\"}\n\n    ]\n\n    return(\n        <React.Fragment>\n            \n                <Button onClick = {handleRefresh}>Refresh</Button>\n                <div>\n                    <div className=\"mt-4 mb-4 ml-3\">\n                        <h3 className=\"whitesnow mr-3 p-1 \">Student Details</h3>\n                        \n                    </div>\n                    <Card className=\"m-3\">\n                        <TableContainer>\n                            <Table stickyHeader size=\"small\">\n                                <TableHead>\n                                    <TableRow className=\"bg-dark\">\n                                        {tablehead.map((data,index)=>\n                                            {\n                                                return <TableCell key={index}>{data.header}</TableCell>\n                                            }\n                                            )\n                                        }\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    \n                                    {AllStaff ? AllStaff.map((data,index)=>{\n                                        return(\n                                            <TableRow hover key={data.staffID}>\n                                                <TableCell>\n                                                    <Link as={`/Staff/staffDetails?staffID=${data.staffID}&&staffToken`} href={`/Staff/staffDetails?staffID=${data.staffID}&&staffToken`}>\n                                                        <a>\n                                                            {index+1}\n                                                        </a>\n                                                    </Link>\n                                                </TableCell>\n                                                <TableCell>\n                                                    <Link as={`/Staff/staffDetails?staffID=${data.staffID}&&staffToken`} href={`/Staff/staffDetails?staffID=${data.staffID}&&staffToken`}>\n                                                        <a>\n                                                            {data.staffID}\n                                                        </a>\n                                                    </Link>\n                                                </TableCell>\n                                                <TableCell>\n                                                <Link as={`/Staff/staffDetails?staffID=${data.staffID}&&staffToken`} href={`/Staff/staffDetails?staffID=${data.staffID}&&staffToken`}>\n                                                        <a>\n                                                            {data.lastname}\n                                                        </a>\n                                                    </Link>\n                                                    \n                                                </TableCell>\n                                                <TableCell>{data.firstname}</TableCell>\n                                                <TableCell>{data.Subjects.subject}</TableCell>\n                                                \n                                                <TableCell>{data.Gender.gender}</TableCell>\n                                                <TableCell>{data.staffgrade.grade}</TableCell>\n                                                <TableCell>{data.diploma}</TableCell>\n                                                <TableCell>\n                                                    <div>{new Date(data.dateOfAssumption).toLocaleDateString()}</div>\n                                                    <div>{new Date(data.dateOfAssumption).toLocaleTimeString()}</div>\n                                                </TableCell>\n                                                \n                                                \n                                                <TableCell>{/* {data.bloodgroup} */}/</TableCell>\n                                                <TableCell>{data.staffgrade.grade}</TableCell>\n                                                <TableCell>{data.matricle}</TableCell>\n                                                <TableCell>{data.phoneNumber}</TableCell>\n                                                {/* <TableCell>{data.StudentAddress}</TableCell> */}\n                                            </TableRow>\n                                        )\n                                    })\n                                    :null\n                                }\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Card>\n                </div>\n            \n        </React.Fragment>\n    )\n}\n// export async function getStaticProps(){\n//     return{\n//         props:{\n\n//         }\n//     }\n// }\n","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    margin:2%;\n    .w-100{\n        width:100%;\n    }\n    .display_none{\n        display:none;\n    }\n    .text-center{\n        text-align:center;\n    }\n    .bg-light{\n        background-color:white;\n    } \n    .text-danger{\n        color:red;\n    }\n    .bg-info{\n        background-color:skyblue;\n    }\n    .image_box{\n        border:solid;\n        border:skyblue;\n        border-radius:100%;\n        margin:0;\n        padding:0;\n    }\n    .label_box{\n        background-color:grey;\n\n    }\n    .profileImageContainer{\n        padding:2% 0 2% 0;\n    }\n    .margin-2{\n        /* margin:2rem; */\n    }\n    button{\n        width:25%;\n        margin:2%\n    }\n`","import * as Yup from \"yup\"\n\nlet initialValueTeacher=(genderdata,bloodgroupdata,religiondata,speciality,titleData,positionData,staffGradeData)=>({\n    FamilyName:\"\",\n    GivenName:\"\",\n    DateOfBirth:\"\",\n    Gender: genderdata[0],\n    TeacherAddress:\"\",\n    BloodGroup:bloodgroupdata[0],\n    Religion:religiondata[0],\n    eMail:\"\",\n    shortBio:\"\",\n\n\n    speciality:speciality[0],\n    staffID:\"\",\n    phoneNumber:\"\",\n    Grade:staffGradeData[0],\n    position:positionData[0],\n    matricle:\"\",\n    formerPost:\"\",\n    locationOfFomerPost:\"\",\n    decisionNo:\"\",\n    decisionDate:\"\",\n    diploma:\"\",\n    // speciality:\"\",\n    dateOfAssumption:\"\",\n    // professional address\n    Title:titleData[0],\n\n    // Emergecy Contact\n    EcontactName:\"\",\n    EcontactOccupation:\"\",\n    EcontactAddress:\"\",\n    EcontactContactMobile:\"\",\n    EContactEmail:\"\",\n    \n    })\n\nlet ValidationSchemaTeacher = Yup.object({\n    FamilyName: Yup.string().nullable().uppercase().trim().required(\"Enter Last Name\"),\n    GivenName: Yup.string().nullable().uppercase().trim().required(\"Enter First Name\"),\n    DateOfBirth: Yup.date().nullable().required(\"enter Date of Birth\"),\n    Gender: Yup.object().nullable().required(\"are you an Alien\"),\n    TeacherAddress: Yup.string().nullable().required(\"Enter Your Student Address\"),\n    BloodGroup:Yup.object().nullable(),\n    Religion: Yup.object().nullable().required(\"Enter you religion\"),\n    eMail: Yup.string().nullable().email().required(\"Enter your email\"),\n    speciality: Yup.object().nullable().required(\"choose speciality\"),\n    staffID: Yup.string().nullable().required(\"User id\"),\n    phoneNumber: Yup.string().nullable().required(\"Enter phone number\").max(15),\n    shortBio: Yup.string().nullable().required(\"short biography\"),\n    position:Yup.string().nullable().required(\"Principal,vp etc\"),\n    // imageholder: Yup.string().nullable().notRequired(\"user photo\"),\n    Grade:Yup.string().nullable().required(\"Grade\"),\n    matricle:Yup.string().nullable().required(\"Matricle\"),\n    formerPost:Yup.string().nullable().required(\"Former Post\"),\n    locationOfFomerPost:Yup.string().nullable().required(\"Location of Former Post\"),\n    decisionNo:Yup.string().nullable().required(\"decision Number\"),\n    decisionDate:Yup.date().nullable().required(\"enter decision Date\"),\n    diploma:Yup.string().nullable().required(\"User DIPLOMA\"),\n    //Professional info\n    Title: Yup.string().nullable().required(\"Title, Mr, Mrs,Chief..\"),\n\n    // Emergency Contact\n    EcontactName:Yup.string().nullable().notRequired(\"needed\"),\n    EcontactOccupation:Yup.string().nullable().notRequired(\"needed\"),\n    EcontactAddress:Yup.string().nullable().notRequired(\"needed\"),\n    EcontactContactMobile:Yup.string().nullable().notRequired(\"needed\"),\n\n    EContactEmail: Yup.string().nullable().email().notRequired(\"needed\")\n    \n\n})\n\nexport {ValidationSchemaTeacher, initialValueTeacher}","\nimport React,{useContext} from \"react\"\nimport {image_box_color,image_label_color} from \"assets/colorsPallete\"\nimport defaultImage from \"assets/defaultImages/defaultImage.png\"\nimport { ThemeContext } from 'providers/ThemeProvider'\n\nlet StaffPersonalInformation = ({\n    \n    values,\n    getFieldProps,\n    setFieldValue,\n    errors,\n    handleBlur,\n    touched,\n    Grid,\n    Field,\n   \n    TextField,\n    FastField,\n    \n    Autocomplete,\n    Card,\n    InputAdornment,\n    AlternateEmail,\n    AddCircleOutlineIcon,\n    AccountCircle,\n    HomeIcon,\n\n    Input,\n    state,\n    setstate,\n    genderdata,\n    religiondata,\n    bloodgroupdata,\n    \n})=>{\n    const { theme, toggleTheme } = useContext(ThemeContext);\n    return(\n        \n            <Card  >\n                <h5 >Personal Information</h5>\n                <Grid container item xs={12} spacing={2} className=\"bg-secondary profileImageContainer \" >\n                    <Grid item xs={12}  sm={6}  className=\"text-center label_box\">\n                            <label htmlFor=\"image\" className=\"w-100\">\n                                <AddCircleOutlineIcon fontSize=\"large\" />\n                            </label>\n                            <Field\n                                id=\"image\"\n                                component={Input}\n                                className=\"display_none\"\n                                variant=\"filled\"\n                                type=\"file\"\n                                accept=\".jpg, .jpeg, .png\"\n                                // multiple\n                                onChange={(event)=>{\n                                    // handleChange\n                                    let fileList = event.target.files\n\n                                    const formData = new FormData()\n                                    \n                                    for(const file of fileList){\n                                        const name = file.name ? file.name : 'NOT SUPPORTED';\n                                        // Not supported in Firefox for Android or Opera for Android.\n                                        const type = file.type ? file.type : 'NOT SUPPORTED';\n                                        // Unknown cross-browser support.\n                                        const size = file.size ? file.size : 'NOT SUPPORTED';\n                                                if (file.type && file.type.indexOf('image') === -1) {\n                                                    console.log('File is not an image.', file.type, file,file.type.indexOf('image'));\n                                                    setstate((prev)=>({\n                                                        ...prev,\n                                                        filename:null,\n                                                        imagedataBack:null,\n                                                        imagesizeError:\"inline\"\n                                                    }))\n                                                    return;\n                                                }\n                                                if(file.size > 1000000){\n                                                    setstate((prev)=>({\n                                                        ...prev,\n                                                        filename:null,\n                                                        imagedataBack:null,\n                                                        imagesizeError:\"inline\"\n                                                    }))\n                                                    return\n                                                }\n                                                const reader = new FileReader();\n                                                // reader.onload\n                                                // reader.onloadend\n                                                // reader.onloadstart\n                                                // reader.onabort\n                                                // reader.onerror\n                                                // reader.onprogress\n                                                \n                                                reader.addEventListener('load', (event) => {\n                                                    \n                                                    setstate((prev)=>({\n                                                        ...prev,\n                                                        imagedataBack:event.target.result,\n                                                        filename:file.name,\n                                                        imagesizeError:\"none\"\n                                                    }))\n                                                    console.log(\"filename::\",state.filename)\n                                                    \n                                                });\n                                                reader.readAsDataURL(file)\n                                                formData.append(\"file\",file)\n                                                console.log(\"formData::\", formData)\n                                            \n                                    }\n                                }}\n                                />\n                                \n                                \n                        </Grid>\n                        <Grid item xs={12}  sm={6} className=\"bg-info text-center\" >\n                            {/* <FastField */}\n                            <TextField \n                                    // component={TextField}\n                                    // error={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? true : false }\n                                    \n                                    // label={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? errors.imageholder : \"image\" }\n                                    disabled\n                                    name=\"imageholder\"\n                                    id=\"imageholder\"\n                                    className=\"w-100 bg-light text-danger\"\n                                    // {...getFieldProps(\"imageholder\")}\n                                    value={state.filename} \n                                    \n                                    />\n                            <h4 style={{display:state.imagesizeError,color:\"red\"}} >Image size less than 1MB</h4>\n                            <Field\n                                width=\"200cm\"\n                                height=\"200cm\"\n                                className=\"image_box bg-secondary\"\n                                // onerror=\"this.onerror=null;this.src='./default.jpg';\"\n                                // component={(params)=><img {...params} src={state}/>}\n                                component={params=>{\n                                if(state.imagedataBack){\n                                    return <img {...params} src={state.imagedataBack}/>\n                                }\n                                else{\n                                    return <img  {...params} src={defaultImage}/>\n                                }\n                                }\n                            }\n                                />\n\n                            \n                        </Grid>\n                        \n                </Grid>\n                <Grid container item xs={12} spacing={2} >\n                    <React.Fragment>\n                        <Grid item xs={12} sm={6} >\n                            {console.log(\"error::\",errors)}\n                            <FastField\n                                error={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? true : false }\n                                {...getFieldProps(\"FamilyName\")}\n                                label={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? errors.FamilyName : \"Family Name\" }\n                                value={values.FamilyName}\n                                name=\"FamilyName\"\n                                id=\"FamilyName\"\n                                component={TextField}\n                                className=\"w-100\"\n                                variant=\"filled\"\n                                \n                                InputProps={{\n                                    startAdornment:(\n                                        <InputAdornment position=\"start\" >\n                                            <AccountCircle/>\n                                        </InputAdornment>\n                                    ),\n                                    style: { \n                                        fontFamily: 'Arial', color: 'white'}\n                                }}\n                                />\n                                {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                        </Grid>\n                        <Grid item xs={12} sm={6}  >\n                            <FastField\n                                error={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? true : false }\n                                {...getFieldProps(\"GivenName\")}\n                                label={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? errors.GivenName : \"Given Name\" }\n                                value={values.GivenName}\n                                name=\"GivenName\"\n                                id=\"GivenName\"\n                                component={TextField}\n                                className=\"w-100\"\n                                variant=\"filled\"\n                                InputProps={{\n                                    startAdornment:(\n                                        <InputAdornment position=\"start\">\n                                            <AccountCircle/>\n                                        </InputAdornment>\n                                    )\n                                }}\n                                />\n                        </Grid>\n                        <Grid item xs={12}  sm={6}  >\n                            <FastField\n                                error={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? true : false }\n                                {...getFieldProps(\"DateOfBirth\")}\n                                label={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? errors.DateOfBirth : \"Date Of Birth\" }\n                                value={values.DateOfBirth}\n                                name=\"DateOfBirth\"\n                                id=\"DateOfBirth\"\n                                component={TextField}\n                                className=\"w-100\"\n                                variant=\"filled\"\n                                type=\"date\"\n                                InputLabelProps={{\n                                    shrink:true\n                                }}\n                                \n                                />\n                        </Grid>\n                        <Grid item xs={12} sm={6} className=\"w-100\" >\n                            {console.log(\"valueGender::\",values.Gender)}\n                        <Field\n                                \n                                component={Autocomplete}\n                                // {...getFieldProps(\"Gender\")}\n                                value={values.Gender}\n                                onBlur={handleBlur}\n                                onChange={(e,selectedOption )=>\n                                    {setFieldValue(\"Gender\", selectedOption)\n                                    //  setFieldError(\"Gender\",errors.Gender)\n                                        }\n                                }\n                                \n                                // inputValue={values.Gender.title}\n                                options={genderdata}\n                                name=\"Gender\"\n                                id=\"Gender\"\n                                \n                                getOptionSelected = {(option,value)=> option.gender == value.gender}\n                                getOptionLabel={option => option.gender}\n                                renderInput={params => (\n                                    <>\n                                    \n                                    <Field \n                                    component={TextField}\n                                    {...params}\n                                    \n                                    name=\"Gender\"\n                                    error={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? true : false }\n                                    label={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? errors.Gender : \"Gender\" }\n                                    variant=\"filled\"    \n                                    \n                                />\n                                    </>\n                                \n                                )}\n                            />\n                                \n                        </Grid>\n                        \n                        <Grid item xs={12} sm={6} >\n                            <FastField\n                                error={errors.hasOwnProperty(\"TeacherAddress\") && touched.hasOwnProperty(\"TeacherAddress\") ? true : false }\n                                {...getFieldProps(\"TeacherAddress\")}\n                                label={errors.hasOwnProperty(\"TeacherAddress\") && touched.hasOwnProperty(\"TeacherAddress\") ? errors.TeacherAddress : \"TeacherAddress\" }\n                                value={values.TeacherAddress}\n                                name=\"TeacherAddress\"\n                                id=\"TeacherAddress\"\n                                component={TextField}\n                                className=\"w-100\"\n                                variant=\"filled\"\n                                \n                                InputProps={{\n                                    startAdornment:(\n                                        <InputAdornment position=\"start\" >\n                                            <HomeIcon/>\n                                        </InputAdornment>\n                                    )\n                                }}\n                                />\n                                {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                        </Grid>\n                        <Grid item xs={12} sm={6}  >\n                            <Field\n                                    \n                                    component={Autocomplete}\n                                    // {...getFieldProps(\"Gender\")}\n                                    value={values.Religion}\n                                    defaultValue={values.Religion}\n                                    onBlur={handleBlur}\n                                    onChange={(e,selectedOption )=>\n                                        {setFieldValue(\"Religion\", selectedOption)\n                                        //  setFieldError(\"Gender\",errors.Gender)\n                                            }\n                                    }\n                                    \n                                    // inputValue={values.Gender.title}\n                                    options={religiondata}\n                                    name=\"Religion\"\n                                    id=\"Religion\"\n                                    getOptionSelected = {(option,value)=> option.doctrine == value.doctrine}\n                                    getOptionLabel={option => option.doctrine}\n                                    renderInput={params => (\n                                        <>\n                                        \n                                        <Field \n                                        component={TextField}\n                                        {...params}\n                                        \n                                        name=\"Religion\"\n                                        error={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? true : false }\n                                        label={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? errors.Religion : \"Religion\" }\n                                        variant=\"filled\"    \n                                        \n                                    />\n                                        </>\n                                    \n                                    )}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}  >\n                                <Field\n                                        \n                                        component={Autocomplete}\n                                        // {...getFieldProps(\"Gender\")}\n                                        value={values.BloodGroup}\n                                        defaultValue={values.BloodGroup}\n                                        onBlur={handleBlur}\n                                        onChange={(e,selectedOption )=>\n                                            {setFieldValue(\"BloodGroup\", selectedOption)\n                                            //  setFieldError(\"Gender\",errors.Gender)\n                                                }\n                                        }\n                                        \n                                        // inputValue={values.Gender.title}\n                                        \n                                        options={bloodgroupdata}\n                                        name=\"BloodGroup\"\n                                        id=\"BloodGroup\"\n                                        getOptionSelected={(option,value)=>option.group == value.group}\n                                        getOptionLabel={option => option.group}\n                                        renderInput={params => (\n                                            <>\n                                            \n                                            <Field \n                                            component={TextField}\n                                            {...params}\n                                            \n                                            name=\"BloodGroup\"\n                                            error={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? true : false }\n                                            label={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? errors.BloodGroup : \"BloodGroup\" }\n                                            variant=\"filled\"    \n                                            \n                                        />\n                                            </>\n                                        \n                                        )}\n                                    />\n                        </Grid>\n                        <Grid item xs={12}  sm={6}  >\n                            <FastField\n                                error={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? true : false }\n                                {...getFieldProps(\"eMail\")}\n                                label={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? errors.eMail : \"email\" }\n                                value={values.eMail}\n                                name=\"eMail\"\n                                id=\"eMail\"\n                                component={TextField}\n                                className=\"w-100\"\n                                variant=\"filled\"\n                                type=\"email\"\n                                InputProps={{\n                                    startAdornment:(\n                                        <InputAdornment position=\"start\" >\n                                            <AlternateEmail />\n                                        </InputAdornment>\n                                    )\n                                }}\n                                \n                                />\n                        </Grid>\n                        \n                    </React.Fragment>\n                </Grid>\n            </Card>\n            \n    )\n}\nexport default StaffPersonalInformation","\nimport React from \"react\"\n\n\nlet StaffProffessionalInformation = (\n    {\n        values,\n        getFieldProps,\n        setFieldValue,\n        errors,\n        handleBlur,\n        touched,\n        Grid,\n        Field,\n       \n        TextField,\n        FastField,\n        \n        Autocomplete,\n        Card,\n        Input,\n        InputAdornment,\n        FingerprintIcon,\n        ContactPhoneIcon,\n        LocalLibraryIcon,\n        CardMembershipIcon,\n        titleData,\n        specialityData,\n        positionData,\n        staffGradeData,\n        \n    }\n)=>{\n    return(\n        <Card  className=\"whitesnow mt-2 p-2 pr-0 mb-4 ml-3 mr-3\">\n            <h5 className=\"text-info\">Professional Information</h5>\n                                <Grid container item xs={12} spacing={2}>\n                                <React.Fragment>\n                                        <Grid item xs={12} sm={6} >\n                                            <Field\n                                                            \n                                                component={Autocomplete}\n                                                // {...getFieldProps(\"Gender\")}\n                                                value={values.speciality}\n                                                onBlur={handleBlur}\n                                                onChange={(e,selectedOption )=>\n                                                    {setFieldValue(\"speciality\", selectedOption)\n                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                        }\n                                                }\n                                                \n                                                // inputValue={values.Gender.title}\n                                                options={specialityData}\n                                                name=\"speciality\"\n                                                id=\"speciality\"\n                                                getOptionSelected={(option, value) => option.subject == value.subject}\n                                                getOptionLabel={option => option.subject}\n                                                renderInput={params => (\n                                                    <>\n                                                    \n                                                    <Field \n                                                        component={TextField}\n                                                        {...params}\n                                                        name=\"speciality\"\n                                                        error={errors.hasOwnProperty(\"speciality\") && touched.hasOwnProperty(\"speciality\") ? true : false }\n                                                        label={errors.hasOwnProperty(\"speciality\") && touched.hasOwnProperty(\"speciality\") ? errors.speciality : \"speciality\" }\n                                                        variant=\"filled\"    \n                                                        \n                                                    />\n                                                    </>\n                                                \n                                                )}\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={12} sm={6} >\n                                                        <Field\n                                                                        \n                                                            component={Autocomplete}\n                                                            // {...getFieldProps(\"Gender\")}\n                                                            value={values.position}\n                                                            onBlur={handleBlur}\n                                                            onChange={(e,selectedOption )=>\n                                                                {setFieldValue(\"position\", selectedOption)\n                                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                                    }\n                                                            }\n                                                            \n                                                            // inputValue={values.Gender.title}\n                                                            options={positionData}\n                                                            name=\"position\"\n                                                            id=\"position\"\n                                                            getOptionSelected={(option, value) => option.position === value.position}\n                                                            getOptionLabel={option => option.position}\n                                                            renderInput={params => (\n                                                                <>\n                                                                \n                                                                <Field \n                                                                    component={TextField}\n                                                                    {...params}\n                                                                    name=\"position\"\n                                                                    error={errors.hasOwnProperty(\"position\") && touched.hasOwnProperty(\"position\") ? true : false }\n                                                                    label={errors.hasOwnProperty(\"position\") && touched.hasOwnProperty(\"position\") ? errors.position : \"position\" }\n                                                                    variant=\"filled\"    \n                                                                    \n                                                                />\n                                                                </>\n                                                            \n                                                            )}\n                                                                    />\n                                                    </Grid>\n                                        <Grid item xs={12} sm={6}  >\n                                                    \n                                                    <FastField\n                                                        error={errors.hasOwnProperty(\"staffID\") && touched.hasOwnProperty(\"staffID\") ? true : false }\n                                                        {...getFieldProps(\"staffID\")}\n                                                        label={errors.hasOwnProperty(\"staffID\") && touched.hasOwnProperty(\"staffID\") ? errors.staffID : \"staffID\" }\n                                                        value={values.staffID}\n                                                        name=\"staffID\"\n                                                        id=\"staffID\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <FingerprintIcon/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        \n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                \n                                                <Grid item xs={12} sm={6}  >\n                                                    \n                                                    <FastField\n                                                        error={errors.hasOwnProperty(\"phoneNumber\") && touched.hasOwnProperty(\"phoneNumber\") ? true : false }\n                                                        {...getFieldProps(\"phoneNumber\")}\n                                                        label={errors.hasOwnProperty(\"phoneNumber\") && touched.hasOwnProperty(\"phoneNumber\") ? errors.phoneNumber : \"phoneNumber\" }\n                                                        value={values.phoneNumber}\n                                                        name=\"phoneNumber\"\n                                                        id=\"phoneNumber\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"tel\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <ContactPhoneIcon/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <FastField\n                                                        error={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? true : false }\n                                                        {...getFieldProps(\"shortBio\")}\n                                                        label={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? errors.shortBio : \"shortBio\" }\n                                                        value={values.shortBio}\n                                                        name=\"shortBio\"\n                                                        id=\"shortBio\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"textArea\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <LocalLibraryIcon/> \n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                </Grid>\n\n                                                <Grid item xs={12} sm={6} className=\"w-100\" >\n                                                    <Field\n                                                         \n                                                        component={Autocomplete}\n                                                        // {...getFieldProps(\"Gender\")}\n                                                        value={values.Grade}\n                                                        onBlur={handleBlur}\n                                                        onChange={(e,selectedOption )=>\n                                                            {setFieldValue(\"Grade\", selectedOption)\n                                                            //  setFieldError(\"Gender\",errors.Gender)\n                                                                }\n                                                        }\n                                                        \n                                                        // inputValue={values.Gender.title}\n                                                        options={staffGradeData}\n                                                        name=\"Grade\"\n                                                        id=\"Grade\"\n                                                        \n                                                        getOptionSelected = {(option,value)=> option.grade == value.grade}\n                                                        getOptionLabel={option => option.grade}\n                                                        renderInput={params => (\n                                                            <>\n                                                            \n                                                            <Field \n                                                            component={TextField}\n                                                            {...params}\n                                                            \n                                                            name=\"Grade\"\n                                                            error={errors.hasOwnProperty(\"Grade\") && touched.hasOwnProperty(\"Grade\") ? true : false }\n                                                            label={errors.hasOwnProperty(\"Grade\") && touched.hasOwnProperty(\"Grade\") ? errors.Grade : \"Grade\" }\n                                                            variant=\"filled\"    \n                                                            \n                                                        />\n                                                            </>\n                                                        \n                                                        )}\n\n                                                        \n                                                    />\n                                                        \n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <FastField\n                                                        error={errors.hasOwnProperty(\"matricle\") && touched.hasOwnProperty(\"matricle\") ? true : false }\n                                                        {...getFieldProps(\"matricle\")}\n                                                        label={errors.hasOwnProperty(\"matricle\") && touched.hasOwnProperty(\"matricle\") ? errors.matricle : \"matricle\" }\n                                                        value={values.matricle}\n                                                        name=\"matricle\"\n                                                        id=\"matricle\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"textArea\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <LocalLibraryIcon/> \n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <FastField\n                                                        error={errors.hasOwnProperty(\"formerPost\") && touched.hasOwnProperty(\"formerPost\") ? true : false }\n                                                        {...getFieldProps(\"formerPost\")}\n                                                        label={errors.hasOwnProperty(\"formerPost\") && touched.hasOwnProperty(\"formerPost\") ? errors.formerPost : \"formerPost\" }\n                                                        value={values.formerPost}\n                                                        name=\"formerPost\"\n                                                        id=\"formerPost\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"textArea\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <LocalLibraryIcon/> \n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <FastField\n                                                        error={errors.hasOwnProperty(\"locationOfFomerPost\") && touched.hasOwnProperty(\"locationOfFomerPost\") ? true : false }\n                                                        {...getFieldProps(\"locationOfFomerPost\")}\n                                                        label={errors.hasOwnProperty(\"locationOfFomerPost\") && touched.hasOwnProperty(\"locationOfFomerPost\") ? errors.locationOfFomerPost : \"location Of Fomer Post\" }\n                                                        value={values.locationOfFomerPost}\n                                                        name=\"locationOfFomerPost\"\n                                                        id=\"locationOfFomerPost\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"textArea\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <LocalLibraryIcon/> \n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <FastField\n                                                        error={errors.hasOwnProperty(\"decisionNo\") && touched.hasOwnProperty(\"decisionNo\") ? true : false }\n                                                        {...getFieldProps(\"decisionNo\")}\n                                                        label={errors.hasOwnProperty(\"decisionNo\") && touched.hasOwnProperty(\"decisionNo\") ? errors.decisionNo : \"decisionNo\" }\n                                                        value={values.decisionNo}\n                                                        name=\"decisionNo\"\n                                                        id=\"decisionNo\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"textArea\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <LocalLibraryIcon/> \n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <FastField\n                                                        error={errors.hasOwnProperty(\"decisionDate\") && touched.hasOwnProperty(\"decisionDate\") ? true : false }\n                                                        {...getFieldProps(\"decisionDate\")}\n                                                        label={errors.hasOwnProperty(\"decisionDate\") && touched.hasOwnProperty(\"decisionDate\") ? errors.decisionDate : \"decisionDate\" }\n                                                        value={values.decisionDate}\n                                                        name=\"decisionDate\"\n                                                        id=\"decisionDate\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"date\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <LocalLibraryIcon/> \n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                </Grid>\n                                                <Grid item xs={12} sm={6} className=\"w-100\" >\n                                                    <Field\n                                                        \n                                                        component={Autocomplete}\n                                                        // {...getFieldProps(\"Gender\")}\n                                                        value={values.Title}\n                                                        onBlur={handleBlur}\n                                                        onChange={(e,selectedOption )=>\n                                                            {setFieldValue(\"Title\", selectedOption)\n                                                            //  setFieldError(\"Gender\",errors.Gender)\n                                                                }\n                                                        }\n                                                        \n                                                        // inputValue={values.Gender.title}\n                                                        options={titleData}\n                                                        name=\"Title\"\n                                                        id=\"Title\"\n                                                        getOptionSelected={(option, value) => option.title === value.title}\n                                                        getOptionLabel={option => option.title}\n                                                        renderInput={params => (\n                                                            <>\n                                                    \n                                                            <Field \n                                                                component={TextField}\n                                                                {...params}\n                                                                    \n                                                                    name=\"Title\"\n                                                                    error={errors.hasOwnProperty(\"Title\") && touched.hasOwnProperty(\"Title\") ? true : false }\n                                                                    label={errors.hasOwnProperty(\"Title\") && touched.hasOwnProperty(\"Title\") ? errors.Title : \"Title\" }\n                                                                    variant=\"filled\"    \n                                                                    \n                                                                    />\n                                                            </>\n                                                        \n                                                        )}\n\n                                                        \n                                                    />\n                                                        \n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <FastField\n                                                        error={errors.hasOwnProperty(\"diploma\") && touched.hasOwnProperty(\"diploma\") ? true : false }\n                                                        {...getFieldProps(\"diploma\")}\n                                                        label={errors.hasOwnProperty(\"diploma\") && touched.hasOwnProperty(\"diploma\") ? errors.diploma : \"diploma\" }\n                                                        value={values.diploma}\n                                                        name=\"diploma\"\n                                                        id=\"diploma\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"                                                  InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <CardMembershipIcon/> \n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                        \n                                                </Grid>\n                                                \n                                        </React.Fragment>\n                                </Grid>\n                            </Card>\n    )\n}\nexport default StaffProffessionalInformation","\nimport React from \"react\"\n\n\nlet StaffEmergencyContact = (\n    {\n        values,\n        getFieldProps,\n        errors,\n        touched,\n        Grid,\n        TextField,\n        FastField,\n        Card,\n        InputAdornment,\n\n        AccountCircle,\n        HomeIcon,\n        ContactPhoneIcon,\n        WorkIcon\n        \n    }\n)=>{\n    return (\n        <Card  className=\"whitesnow mt-2 p-2 pr-0 mb-4 ml-3 mr-3\">\n            <h5 className=\"text-info\">Emergency Contact</h5>\n            <Grid container item xs={12} spacing={2}>\n                    <Grid item xs={12}  sm={6}  >\n                        <FastField\n                            error={errors.hasOwnProperty(\"EcontactName\") && touched.hasOwnProperty(\"EcontactName\") ? true : false }\n                            {...getFieldProps(\"EcontactName\")}\n                            label={errors.hasOwnProperty(\"EcontactName\") && touched.hasOwnProperty(\"EcontactName\") ? errors.EcontactName : \"EcontactName\" }\n                            value={values.EcontactName}\n                            name=\"EcontactName\"\n                            id=\"EcontactName\"\n                            component={TextField}\n                            className=\"w-100\"\n                            variant=\"filled\"\n                            InputProps={{\n                                startAdornment:(\n                                    <InputAdornment position=\"start\" >\n                                        <AccountCircle/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            />\n                    </Grid>\n            \n            \n                    <Grid item xs={12}  sm={6}  >\n                        <FastField\n                            error={errors.hasOwnProperty(\"EcontactOccupation\") && touched.hasOwnProperty(\"EcontactOccupation\") ? true : false }\n                            {...getFieldProps(\"EcontactOccupation\")}\n                            label={errors.hasOwnProperty(\"EcontactOccupation\") && touched.hasOwnProperty(\"EcontactOccupation\") ? errors.EcontactOccupation : \"EcontactOccupation\" }\n                            value={values.EcontactOccupation}\n                            name=\"EcontactOccupation\"\n                            id=\"EcontactOccupation\"\n                            component={TextField}\n                            className=\"w-100\"\n                            variant=\"filled\"\n                            InputProps={{\n                                startAdornment:(\n                                    <InputAdornment position=\"start\" >\n                                        <WorkIcon/>\n                                    </InputAdornment> \n                                )\n                            }}\n                            />\n                    </Grid>\n            \n            \n                    <Grid item xs={12}  sm={6}  >\n                        <FastField\n                            error={errors.hasOwnProperty(\"EcontactAddress\") && touched.hasOwnProperty(\"EcontactAddress\") ? true : false }\n                            {...getFieldProps(\"EcontactAddress\")}\n                            label={errors.hasOwnProperty(\"EcontactAddress\") && touched.hasOwnProperty(\"EcontactAddress\") ? errors.EcontactAddress : \"EcontactAddress\" }\n                            value={values.EcontactAddress}\n                            name=\"EcontactAddress\"\n                            id=\"EcontactAddress\"\n                            component={TextField}\n                            className=\"w-100\"\n                            variant=\"filled\"\n                            InputProps={{\n                                startAdornment:(\n                                    <InputAdornment position=\"start\" >\n                                        <HomeIcon/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            />\n                    </Grid>\n                    <Grid item xs={12}  sm={6}  >\n                        <FastField\n                            error={errors.hasOwnProperty(\"EcontactContactMobile\") && touched.hasOwnProperty(\"EcontactContactMobile\") ? true : false }\n                            {...getFieldProps(\"EcontactContactMobile\")}\n                            label={errors.hasOwnProperty(\"EcontactContactMobile\") && touched.hasOwnProperty(\"EcontactContactMobile\") ? errors.EcontactContactMobile : \"EcontactContactMobile\" }\n                            value={values.EcontactContactMobile}\n                            name=\"EcontactContactMobile\"\n                            id=\"EcontactContactMobile\"\n                            component={TextField}\n                            className=\"w-100\"\n                            variant=\"filled\"\n                            InputProps={{\n                                startAdornment:(\n                                    <InputAdornment position=\"start\" >\n                                        <ContactPhoneIcon/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            />\n                    </Grid>\n                    <Grid item xs={12}  sm={6}  >\n                        <FastField\n                            error={errors.hasOwnProperty(\"EContactEmail\") && touched.hasOwnProperty(\"EContactEmail\") ? true : false }\n                            {...getFieldProps(\"EContactEmail\")}\n                            label={errors.hasOwnProperty(\"EContactEmail\") && touched.hasOwnProperty(\"EContactEmail\") ? errors.EContactEmail : \"E Contact Email\" }\n                            value={values.EContactEmail}\n                            name=\"EContactEmail\"\n                            id=\"EContactEmail\"\n                            component={TextField}\n                            className=\"w-100\"\n                            variant=\"filled\"\n                            InputProps={{\n                                startAdornment:(\n                                    <InputAdornment position=\"start\" >\n                                        <ContactPhoneIcon/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            />\n                    </Grid>\n        </Grid>\n    </Card>\n    )\n}\nexport default StaffEmergencyContact","import React,{useState} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\"\nimport {FastField,Formik,Form,Field} from \"formik\"\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\n// import parse from 'autosuggest-highlight/parse';\n// import match from 'autosuggest-highlight/match';\nimport AccountCircle from \"@material-ui/icons/AccountCircle\"\n// import WcIcon from '@material-ui/icons/Wc';\n// import CalendarTodayIcon from '@material-ui/icons/CalendarToday'\nimport HomeIcon from '@material-ui/icons/Home';\nimport AlternateEmail from '@material-ui/icons/AlternateEmail';\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\nimport ContactPhoneIcon from '@material-ui/icons/ContactPhone';\nimport LocalLibraryIcon from '@material-ui/icons/LocalLibrary';\nimport WorkIcon from '@material-ui/icons/Work';\nimport CardMembershipIcon from '@material-ui/icons/CardMembership';\n\nimport {Wrapper} from \"../styles\"\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\n// import {errorFieldMessage} from \"../../components/error/errorFieldMessage\"\nimport Button  from '@material-ui/core/Button';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\n// import GenderDatabase from \"../../database/GeneralDatabase\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\nimport useSWR from \"swr\"\n\nimport {ValidationSchemaTeacher, initialValueTeacher} from \"../teacherFile/teacherSchema\"\nimport StaffPersonalInformation from \"../teacherFile/personalInfo\"\nimport StaffProffessionalInformation from \"../teacherFile/professionalInfo\"\nimport StaffEmergencyContact from \"../teacherFile/EmergencyInfo\"\n\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from \"@material-ui/core/Step\"\nimport StepLabel from \"@material-ui/core/StepLabel\"\n\nimport {UrlTitle} from \"components/common\"\n// let genderdata = [{id:1,gender:\"Male\"},{id:2,gender:\"Female\"},{id:3,gender:\"unknow\"}]\nlet religiondata =[{id:1,doctrine:\"Christain\"},{id:2,doctrine:\"Muslim\"},{id:3,doctrine:\"Pegan\"},{id:4,doctrine:\"Traditionalist\"}]\nlet bloodgroupdata =[{id:1,group:\"A+\"},{id:2,group:\"A-\"},{id:3,group:\"B+\"},{id:4,group:\"B-\"},{id:5,group:\"AB\"},{id:6,group:\"0+\"},{id:7,group:\"O-\"}]\n// let sectiondata =[{speciality:\"English\"},{speciality:\"FRENCH\"},{speciality:\"CHINESSE\"},{speciality:\"GERMAN\"}]\n\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     flexGrow: 1,\n//   },\n//   paper: {\n//     padding: theme.spacing(1),\n//     textAlign: 'center',\n//     width:\"100%\",\n//     color: theme.palette.text.secondary,\n//   },\n// }));\nlet initialStateValues = {\n    imagesizeError:\"none\",\n    imagedataBack:null,\n    filename:\"\"\n}\nexport const  StaffForm = ({genderFindAll,sectionFindAll}) => {\n\n    \n\n    let [state , setstate] = useState(initialStateValues)\n    let {data:subjectGetData, error:sectionGetError} =  useSWR(\"/api/subjectapi\")\n    let {data:genderGetData, error:genderGetError} =  useSWR(\"/api/generalapi?gender=true\")\n    let {data:titleGetData, error:errorTitleData} = useSWR(\"/api/generalapi?title=true\")\n    let {data:positionGetData, error:errorpositionData} = useSWR(\"/api/generalapi?position=true\")\n    let {data:staffGradeGetData, error:errorstaffGradeData} = useSWR(\"/api/generalapi?staffGrade=true\")\n\n\n    // let specialityData = (subjectGetData ? subjectGetData.length != 0 && subjectGetData :undefined) || [{id:\"\",subject:\"\",sectionId:\"\"}]\n    // let genderdata = (genderGetData ? genderGetData.length != 0 && genderGetData :undefined) || (genderFindAll.length == 0 ? [{id:\"\",gender:\"\"}]: genderFindAll)\n    // let titleData = (titleGetData ? titleGetData.length != 0 && titleGetData :undefined ) || [{id:\"\",title:\"\"}] // (genderFindAll.length == 0 ? [{id:\"\",gender:\"\"}]: genderFindAll)\n    // let positionData = (positionGetData ? positionGetData.length != 0 && positionGetData :undefined ) || [{id:\"\",position:\"\"}]\n    // let staffGradeData = (staffGradeGetData ? staffGradeGetData.length != 0 && staffGradeGetData :undefined ) || [{id:\"\",grade:\"\"}]\n    \n\n    let specialityData = []\n    let genderdata = []\n    let titleData = []\n    let positionData = []\n    let staffGradeData  = []\n\n    // const classes = useStyles();\n\n    let initialValues=initialValueTeacher(genderdata,bloodgroupdata,religiondata,specialityData,titleData,positionData,staffGradeData)\n\nlet onsubmit = async (values,submittingProps)=>{\n    let data = await fetch(\"/api/staffapi\",{\n        method:\"POST\",\n        body:JSON.stringify({\n            values,\n            imagedataBack: state.imagedataBack\n        })\n     })\n     console.log(\"data::\",data.status)\n     if(data.status==409){\n         alert(`${values.FamilyName} ${values.GivenName} with student id ${values.staffID} exist already`)\n     }\n     if(data.status==415){\n        alert(`${window.navigator.userAgent} \\n stop trying out attacks on my system`)\n    }\n    else if(data.status ==200){\n        setstate((prev)=>({\n            ...initialStateValues\n        }))\n        submittingProps.resetForm()\n    }\n     \n\n}\n    // let onreset = ()=>{\n    //     setstate((prev)=>({\n    //         ...initialStateValues\n    //     }))\n    // }\n  \n\nfunction getSteps() {\n    return ['Personal Information', 'Professional Information', 'Emergency Contact'];\n  }\n  \n  function getStepContent(stepIndex,\n                        values,\n                        getFieldProps,\n                        setFieldValue,\n                        errors,\n                        handleBlur,\n                        handleChange,\n                        touched){                    \n    switch (stepIndex) {\n      case 0:\n        return <StaffPersonalInformation \n        \n        values={values}\n        getFieldProps={getFieldProps}\n        setFieldValue={setFieldValue}\n        errors={errors}\n        handleBlur={handleBlur}\n        touched={touched}\n        Grid ={Grid}\n        Field={Field}\n        \n        TextField={TextField}\n        FastField={FastField}\n        Autocomplete={Autocomplete}\n        Card={Card}\n        Input={Input}\n        InputAdornment={InputAdornment}\n        AlternateEmail={AlternateEmail}\n        AddCircleOutlineIcon={AddCircleOutlineIcon}\n        AccountCircle={AccountCircle}\n        HomeIcon={HomeIcon}\n        state={state}\n        setstate = {setstate}\n        \n        titleData={titleData}\n        specialityData={specialityData}\n        genderdata={genderdata}\n        religiondata={religiondata}\n        bloodgroupdata={bloodgroupdata}\n        />\n            \n      case 1:\n        return (\n            <StaffProffessionalInformation\n                values={values}\n                getFieldProps={getFieldProps}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                handleBlur={handleBlur}\n                touched={touched}\n                Grid ={Grid}\n                Field={Field}\n                \n                TextField={TextField}\n                FastField={FastField}\n                Autocomplete={Autocomplete}\n                Card={Card}\n                Input={Input}\n                InputAdornment={InputAdornment}\n                FingerprintIcon={FingerprintIcon}\n                CardMembershipIcon={CardMembershipIcon}\n                LocalLibraryIcon={LocalLibraryIcon}\n                ContactPhoneIcon={ContactPhoneIcon}\n                titleData={titleData}\n                positionData={positionData}\n                specialityData={specialityData}\n                staffGradeData={staffGradeData}\n            />\n            )\n      case 2:\n        return (\n            <StaffEmergencyContact\n                values={values}\n                getFieldProps={getFieldProps}\n                errors={errors}\n                touched={touched}\n                Grid ={Grid}\n                TextField={TextField}\n                FastField={FastField}\n                Card={Card}\n                Input={Input}\n                InputAdornment={InputAdornment}\n\n                AccountCircle={AccountCircle}\n                HomeIcon={HomeIcon}\n                ContactPhoneIcon={ContactPhoneIcon}\n                WorkIcon={WorkIcon}\n            />\n\n            )\n      default:\n        return 'Unknown stepIndex';\n    }\n  }\n  \n\n    const [activeStep, setActiveStep] = React.useState(0);\n\n    const steps = getSteps();\n  \n    const handleNext = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n  \n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n  \n    const handleResetsteps = () => {\n      setActiveStep(0);\n    };\n  \n    \n\n\n  return(\n    <Wrapper>\n    \n      {/* <div className=\"overflow-visualHeight w-100\"> */}\n    <div>\n      <UrlTitle>\n          Teacher\n      </UrlTitle>\n          \n            <Formik\n                initialValues={initialValues}\n                validationSchema={ValidationSchemaTeacher}\n                \n                onSubmit = {onsubmit}\n                // onReset = {onreset}\n                // enableReinitialize\n                >\n                    {\n                        ({\n                            values,\n                            getFieldProps,\n                            setFieldValue,\n                            setFieldError,\n                            errors,\n                            validateOnBlur,\n                            handleSubmit,\n                            handleBlur,\n                            handleReset,\n                            handleChange,\n                            isValid,\n                            dirty,\n                            touched\n                        })=>{\n                            return(\n                            <Form>\n                            <div >\n                <Stepper activeStep={activeStep} alternativeLabel>\n                    {steps.map((label) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                <div>\n                {activeStep === steps.length ? (\n                    <div>\n                        <StaffPersonalInformation \n        \n                                values={values}\n                                getFieldProps={getFieldProps}\n                                setFieldValue={setFieldValue}\n                                errors={errors}\n                                handleBlur={handleBlur}\n                                touched={touched}\n                                Grid ={Grid}\n                                Field={Field}\n                                \n                                TextField={TextField}\n                                FastField={FastField}\n                                Autocomplete={Autocomplete}\n                                Card={Card}\n                                Input={Input}\n                                InputAdornment={InputAdornment}\n                                AlternateEmail={AlternateEmail}\n                                AddCircleOutlineIcon={AddCircleOutlineIcon}\n                                AccountCircle={AccountCircle}\n                                HomeIcon={HomeIcon}\n                                state={state}\n                                setstate = {setstate}\n\n                                titleData={titleData}\n                                specialityData={specialityData}\n                                genderdata={genderdata}\n                                religiondata={religiondata}\n                                bloodgroupdata={bloodgroupdata}\n                            />\n                            <StaffProffessionalInformation\n                                values={values}\n                                getFieldProps={getFieldProps}\n                                setFieldValue={setFieldValue}\n                                errors={errors}\n                                handleBlur={handleBlur}\n                                touched={touched}\n                                Grid ={Grid}\n                                Field={Field}\n                                \n                                TextField={TextField}\n                                FastField={FastField}\n                                Autocomplete={Autocomplete}\n                                Card={Card}\n                                Input={Input}\n                                InputAdornment={InputAdornment}\n                                FingerprintIcon={FingerprintIcon}\n                                CardMembershipIcon={CardMembershipIcon}\n                                LocalLibraryIcon={LocalLibraryIcon}\n                                ContactPhoneIcon={ContactPhoneIcon}\n                                titleData={titleData}\n                                positionData={positionData}\n                                specialityData={specialityData}\n                                staffGradeData={staffGradeData}\n                            />\n                            <StaffEmergencyContact\n                                values={values}\n                                getFieldProps={getFieldProps}\n                                errors={errors}\n                                touched={touched}\n                                Grid ={Grid}\n                                TextField={TextField}\n                                FastField={FastField}\n                                Card={Card}\n                                Input={Input}\n                                InputAdornment={InputAdornment}\n\n                                AccountCircle={AccountCircle}\n                                HomeIcon={HomeIcon}\n                                ContactPhoneIcon={ContactPhoneIcon}\n                                WorkIcon={WorkIcon}\n                            />\n                                    \n                    \n                    \n                        <Card className=\"nobackground mb-4 ml-3 mr-3\">\n                                <Grid container item xs={12}>\n                                    <Grid container item xs={12} spacing={2}>\n                                            <Grid sm={12} item className=\"text-center\">\n                                                <Button onClick={handleResetsteps} style={{backgroundColor:\"yellow\"}}>Restart</Button>\n                                                {isValid && dirty && state.imagedataBack ? <Button  type=\"submit\" color=\"primary\" className=\" margin-2\">submit</Button>:<Button disabled  type=\"submit\" className=\"bg-secondary p-2 p-2 pl-4 pr-4 m-2\">submit</Button>}\n                                                <Button type=\"reset\" onClick={()=>{\n                                                    handleResetsteps()\n                                                    handleReset()\n                                                }}\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                className=\"margin-2\">reset</Button>\n                                            </Grid> \n                                        </Grid>\n                                </Grid>\n                        </Card>\n                        \n                    </div>\n                ) : (\n                    <div>\n                        {getStepContent(\n                            activeStep,\n                            values,\n                            getFieldProps,\n                            setFieldValue,\n                            // setFieldError,\n                            errors,\n                            // validateOnBlur,\n                            // handleSubmit,\n                            handleBlur,\n                            handleChange,\n                            touched)}\n                    <div className=\"text-center\">\n                        <Button variant=\"contained\" color=\"secondary\"\n                            disabled={activeStep === 0}\n                            onClick={handleBack}\n                            className=\"margin-2\"\n                            // className={classes.backButton}\n                            >\n                         Back\n                        </Button>\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleNext} className=\"margin-2\">\n                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                        </Button>\n                        </div>\n                    </div>\n                )}\n                </div>\n            </div>\n                            \n                            </Form>\n                            )\n                        }\n                    }\n                   \n                </Formik>\n          \n        </div>\n\n      {/* </div> */}\n    </Wrapper>\n        \n  );\n}\n// export async function getStaticProps(){\n//     let Gender = new GenderDatabase()\n//     let speciality = new SectionDatabase()\n//     let genderFindAll = await Gender.getGender()\n//     let sectionFindAll = await speciality.getSection()\n//     return{\n//         props:{\n//             genderFindAll,\n//             sectionFindAll\n//         }\n//     }\n// }\n\n\n","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    padding:1%;\n    background-color:rgb(236, 236, 236);\n    form{\n        padding:1%;\n    }\n    h3{\n        background-color:white;\n        padding:1%;\n        margin:1% 0  1% 0;\n    }\n    label{\n        margin:0 1% 0 1%;\n    }\n    #subjectOffered{\n        padding:1% 0 1% 0;\n        background-color:rgb(236, 236, 236);\n    }\n`","import React,{useState} from \"react\"\n\n\nimport Button from \"@material-ui/core/Button\"\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\"\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\nimport * as Yup from \"yup\"\nimport {Formik,Field,Form,FieldArray} from \"formik\"\nimport Card from \"@material-ui/core/Card\"\nimport {Wrapper} from \"./styles\"\n\nconst year = [\n    {id:1,year:\"2019\"},\n    {id:2,year:\"2020\"},\n    {id:3,year:\"2021\"}\n]\n\nconst clas = [\n    {id:1,clas:\"Form 1\"},\n    {id:2,clas:\"Form 2\"},\n    {id:3,clas:\"Form 3\"}\n]\n\nconst Teacher = [\n    {id:1,Teacher:\"Peter\",name:\"john\"},\n    {id:2,Teacher:\"John\",name:\"go\"},\n    {id:3,Teacher:\"Samuel\",name:\"java\"}\n]\nconst subject = [\n    {id:1,subject:\"physic\"},\n    {id:2,subject:\"Biology\"},\n    {id:3,subject:\"chemistry\"},\n    {id:1,subject:\"physic\"},\n    {id:2,subject:\"Biology\"},\n    {id:3,subject:\"chemistry\"},\n    {id:1,subject:\"physic\"},\n    {id:2,subject:\"Biology\"},\n    {id:3,subject:\"chemistry\"},\n    {id:3,subject:\"chemistry\"},\n    {id:1,subject:\"physic\"},\n    {id:2,subject:\"Biology\"},\n    {id:3,subject:\"chemistry\"}\n]\n\n\n\nexport const TeacherClassSubject = ()=>{\n    \n    const initialValue = {\n        year:{id:1,year:\"2019\"},\n        \n        Teacher:{id:1,Teacher:\"Samuel\",name:\"john\"},\n\n        \n        // subject:{id:1,subject:\"All\"},\n        ClassSubjectTeacher: [{\n            clas:{id:1,clas:\"Form 1\"},\n            subjectCheck:[]}\n        ]\n        \n    }\n    let onsubmit = (values)=>{\n        console.log(\"values:\",values)\n    }\n    let onreset = ()=>{\n        \n    }\n    let validationSchema = Yup.object({\n        year: Yup.string().nullable().required(),\n        \n        Teacher: Yup.string().nullable().required(\"choose Teacher\").trim(),\n        // subject: Yup.string().nullable().trim(),\n        ClassSubjectTeacher: Yup.array().nullable().of(\n            Yup.object({\n                clas:Yup.string().nullable().required().trim(),\n                subjectCheck : Yup.array().nullable()\n            })\n        )\n        \n    })\n    return(\n        <Wrapper>\n            \n                <h3>Assign Class and Subject to a Teacher  </h3>\n            \n            <Card>\n                <Formik\n                    initialValues={initialValue}\n                    onSubmit={onsubmit}\n                    onReset={onreset}\n                    validationSchema = {validationSchema}\n                >\n                {\n                    ({\n                        values,\n                        errors,\n                        touched,\n                        isValid,\n                        dirty,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                        setFieldValue,\n                        getFieldProps\n                    })=>{\n                        return(\n                            <Form>\n                                <Grid container  xs={12} item spacing={1}>\n                                    <Grid item xs={12}  >\n                                        <Field\n                                            \n                                            component={Autocomplete}\n                                            // {...getFieldProps(\"Gender\")}\n                                            value={values.year}\n                                            onBlur={handleBlur}\n                                            onChange={(e,selectedOption )=>\n                                                {setFieldValue(\"year\", selectedOption)\n                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                    }\n                                            }\n                                            \n                                            // inputValue={values.Gender.title}\n                                            options={year}\n                                            name=\"year\"\n                                            id=\"year\"\n                                            \n                                            getOptionSelected = {(option,value)=> option.id == value.id}\n                                            getOptionLabel={option => option.year}\n                                            renderInput={params => (\n                                                <>\n                                                \n                                                <Field \n                                                    component={TextField}\n                                                    {...params}\n                                                    \n                                                    name=\"year\"\n                                                    \n                                                    error={errors.hasOwnProperty(\"year\") && touched.hasOwnProperty(\"year\") ? true : false }\n                                                    label={errors.hasOwnProperty(\"year\") && touched.hasOwnProperty(\"year\") ? errors.year : \"year\" }\n                                                    variant=\"filled\"\n                                                />\n                                                </>\n                                            \n                                            )}\n\n                                            \n                                        />\n\n                                    </Grid>\n                                  \n\n\n                                    <Grid item xs={12}  >\n                                        \n                                        <Field\n                                            \n                                            component={Autocomplete}\n                                            // {...getFieldProps(\"Gender\")}\n                                            value={values.Teacher }\n                                            onBlur={handleBlur}\n                                            onChange={(e,selectedOption )=>\n                                                {setFieldValue(\"Teacher\", selectedOption)\n                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                    }\n                                            }\n                                            \n                                            // inputValue={values.Gender.title}\n                                            options={Teacher}\n                                            name=\"Teacher\"\n                                            id=\"Teacher\"\n                                            \n                                            getOptionSelected = {(option,value)=> option.id == value.id}\n                                            getOptionLabel={option => option.Teacher + \" \" + option.name}\n                                            renderInput={params => (\n                                                <>\n                                                <Field \n                                                    component={TextField}\n                                                    {...params}\n                                                    \n                                                    name=\"Teacher\"\n                                                    \n                                                    error={errors.hasOwnProperty(\"Teacher\") && touched.hasOwnProperty(\"Teacher\") ? true : false }\n                                                    label={errors.hasOwnProperty(\"Teacher\") && touched.hasOwnProperty(\"Teacher\") ? errors.Teacher : \"Teacher\" }\n                                                    variant=\"filled\"\n                                                />\n                                                </>\n                                            )}\n\n                                            \n                                        />\n                                        \n                                        \n                                    </Grid>\n                                    {/* <Grid item xs={12} >\n                                        <div>For the field below If the Teacher Offers all the subjects In that class Leave this field empty, an empty field signifies \n                                            He/she offers every subject in that class\n                                        </div>\n                                        <Field\n                                            \n                                            component={Autocomplete}\n                                            // {...getFieldProps(\"Gender\")}\n                                            // value={[values.clas]}\n                                            onBlur={handleBlur}\n                                            onChange={(e,selectedOption )=>\n                                                {setFieldValue(\"subject\", selectedOption)\n                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                    }\n                                            }\n                                            multiple\n                                            // inputValue={values.Gender.title}\n                                            options={subject}\n                                            name=\"subject\"\n                                            id=\"subject\" \n                                            filterSelectedOptions\n                                            // getOptionSelected = {(option,value)=> option.id == value.id}\n                                            getOptionLabel={option => option.subject}\n                                            renderInput={params => (\n                                                <>\n                                                \n                                                <Field \n                                                    component={TextField}\n                                                    {...params}\n                                                    \n                                                    name=\"subject\"\n                                                    \n                                                    error={errors.hasOwnProperty(\"subject\") && touched.hasOwnProperty(\"subject\") ? true : false }\n                                                    label={errors.hasOwnProperty(\"subject\") && touched.hasOwnProperty(\"subject\") ? errors.subject : \"subject\" }\n                                                    variant=\"filled\"\n                                                />\n                                                </>\n                                            \n                                            )}\n\n                                            \n                                        />\n\n                                    </Grid> */}\n                                    \n                                    \n\n                                    \n\n                                    <Grid item xs={12} >\n                                    <FieldArray name=\"ClassSubjectTeacher\">\n                                        {   \n                                            (fieldprops,index)=>{\n                                                let {push,remove,form} = fieldprops\n                                                const {values} = form\n                                                const {ClassSubjectTeacher} = values \n                                            return(\n                                                <div key={index}>\n                                                {\n                                                    ClassSubjectTeacher.map((value,index)=>{\n                                                        return(\n                                                            <div key={index}>\n                                                                <Grid item xs={12} >\n                                                                    <Field\n                                                                        \n                                                                        component={Autocomplete}\n                                                                        // {...getFieldProps(\"Gender\")}\n                                                                        value={value.clas}\n                                                                        onBlur={handleBlur}\n                                                                        onChange={(e,selectedOption )=>\n                                                                            {setFieldValue(`ClassSubjectTeacher[${index}].clas`, selectedOption)\n                                                                            //  setFieldError(\"Gender\",errors.Gender)\n                                                                                }\n                                                                        }\n                                                                        options={clas}\n                                                                        name= {`ClassSubjectTeacher[${index}].clas`}\n                                                                        id= {`ClassSubjectTeacher[${index}].clas`}\n                                                                        \n                                                                        getOptionSelected = {(option,value)=> option.id == value.id}\n                                                                        getOptionLabel={option => option.clas}\n                                                                        renderInput={params => (\n                                                                            <>\n                                                                            \n                                                                            <Field \n                                                                                component={TextField}\n                                                                                {...params}\n                                                                                \n                                                                                name={`ClassSubjectTeacher[${index}].clas`}\n                                                                                \n                                                                                error={(((errors || {})[\"ClassSubjectTeacher\"] || {})[index] ||{})[\"clas\"] && ((((touched || {})[\"ClassSubjectTeacher\"] || {})[index] ||{})[\"clas\"])  ? true : false }\n                                                                                label={((((errors || {})[\"ClassSubjectTeacher\"] || {})[index] ||{})[\"clas\"]) && ((((touched || {})[\"ClassSubjectTeacher\"] || {})[index] ||{})[\"clas\"]) ? errors[\"ClassSubjectTeacher\"][index][\"clas\"] : \"Class\" }\n                                                                                variant=\"filled\"\n                                                                            />\n                                                                            </>\n                                                                        \n                                                                        )}\n\n                                                                        \n                                                                    />\n\n                                                                </Grid>\n                                                                <Grid item xs={12} >\n                                    \n                                                                        <div id=\"subjectOffered\">Subject offerded</div>\n                                                                        <Field\n                                                                            label=\"checkbox subject\"\n                                                                            name={`ClassSubjectTeacher[${index}].subjectCheck`}\n                                                                            >\n                                                                                {\n                                                                                    ({field})=>{\n                                                                                        return subject.map(option=>{\n                                                                                            return(\n                                                                                                <React.Fragment >\n                                                                                                    <div>\n                                                                                                        <input\n                                                                                                            type=\"checkbox\"\n                                                                                                            id={`ClassSubjectTeacher[${index}].subjectCheck`}\n                                                                                                            {...field}\n                                                                                                            value={option.subject}\n                                                                                                            checked={field.value.includes(option.subject)}\n                                                                                                            />\n                                                                                                        <label htmlFor={option.id}>{option.subject}</label>\n                                                                                                    \n                                                                                                    </div>\n                                                                                                </React.Fragment>\n                                                                                            )\n                                                                                        })\n                                                                                    }\n                                                                                }\n                                                                        </Field>\n                                                                    </Grid>\n                                                                        \n                                                                    <Grid xs={2} md={4} style={{margin:\"1% 0 1% 0\"}}>\n                                                                        {index >= 1 ? <Button color=\"secondary\" style={{margin:\"0 1% 0 0%\"}}  type=\"button\" variant=\"contained\" onClick={()=>remove(index)}>X</Button> :null}\n                                                                        <Button color=\"primary\" variant=\"contained\"   type=\"button\" onClick={\n                                                                            ()=>push({\n                                                                                    clas:\"\",\n                                                                                    subjectCheck:\"\",\n                                                                                })} disabled={!(dirty && isValid )\n                                                                            }>\n                                                                                +\n                                                                        </Button>\n                                                                    </Grid>\n                                                                        {/* </Card> */}\n                                                                        \n                                                                    \n                                                            </div>\n                                                        )\n                                                    })\n                                                }\n                                                \n                                                </div>\n                                            )  \n                                            }\n                                        }\n                                    </FieldArray>\n                                    </Grid>\n\n\n\n                                    <Grid item xs={12} sm={6} md={3}>\n                                        <Button style={{margin:\"0 2% 0 0\"}} variant=\"contained\" disabled={!(dirty && isValid )} color=\"primary\" type=\"submit\"  >submit</Button>    \n                                        <Button  type=\"reset\" variant=\"contained\">reset</Button>\n                                    </Grid>\n\n                                    \n                                    {/* <Grid xs={12} sm={6} md={2}>\n                                        <PDFDownloadLink \n                                            document={<ReportCardTemplate/>}\n                                            fileName={\"className\"}\n                                            >\n                                                {({ blob, url, loading, error }) => (loading ? 'Loading document...' : \"<CloudDownloadIcon />\")}\n                                        </PDFDownloadLink>\n                                    </Grid> */}\n                                </Grid>\n                                \n\n                            </Form>\n                        )\n                    }\n                }\n                </Formik>\n            </Card>\n        </Wrapper>\n    )\n}","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    padding:1%;\n    background-color:rgb(236, 236, 236);\n    \n    #Card{\n        padding:1%;\n        border:solid  outset ;\n    }\n    .cardheader{\n        background-color:rgb(236, 236, 236);\n    }\n    .blue{\n        background-color:skyblue;\n    }\n    .orange{\n        background-color:orange;\n    }\n`","import * as Yup from \"yup\"\n\nlet initialValue=(genderdata,bloodgroupdata,religiondata)=>({\n    FamilyName:\"\",\n    GivenName:\"\",\n    DateOfBirth:\"\",\n    Gender: genderdata[0],\n    StudentAddress:\"\",\n    BloodGroup:bloodgroupdata[0],\n    Religion:religiondata[0],\n    eMail:\"\",\n    \n    // section:sectiondata[0],\n    AdmissionID:\"\",\n    Phone:\"\",\n    shortBio:\"\",\n    // imageholder:state.filename\n\n    FatherName:\"\",\n    FatherOccupation:\"\",\n    FatherAddress:\"\",\n    FatherContact:\"\",\n    // Mother info\n    MotherName:\"\",\n    MotherOccupation:\"\",\n    MotherAddress:\"\",\n    MotherContact:\"\",\n    })\n\nlet ValidationSchema = Yup.object({\n    FamilyName: Yup.string().nullable().uppercase().trim().required(\"Enter Last Name\"),\n    GivenName: Yup.string().nullable().uppercase().trim().required(\"Enter First Name\"),\n    DateOfBirth: Yup.date().nullable().required(\"enter Date of Birth\"),\n    Gender: Yup.object().nullable().required(\"are you an Alien\"),\n    StudentAddress: Yup.string().nullable().required(\"Enter Your Student Address\"),\n    BloodGroup:Yup.object().nullable(),\n    Religion: Yup.object().nullable().required(\"Enter you religion\"),\n    eMail: Yup.string().nullable().email().required(\"Enter your email\"),\n    // section: Yup.object().nullable().required(\"choose section\"),\n    AdmissionID: Yup.string().nullable().required(\"User id\"),\n    Phone: Yup.string().nullable().required(\"Enter phone number\").max(15),\n    shortBio: Yup.string().nullable().required(\"short biography\"),\n    // imageholder: Yup.string().nullable().notRequired(\"user photo\"),\n    FatherName:Yup.string().nullable().notRequired(\"needed\"),\n    FatherOccupation:Yup.string().nullable().notRequired(\"needed\"),\n    FatherAddress:Yup.string().nullable().notRequired(\"needed\"),\n    FatherContact:Yup.string().nullable().notRequired(\"needed\"),\n    // Mother info\n    MotherName:Yup.string().nullable().notRequired(\"needed\"),\n    MotherOccupation:Yup.string().nullable().notRequired(\"needed\"),\n    MotherAddress:Yup.string().nullable().notRequired(\"needed\"),\n    MotherContact:Yup.string().nullable().notRequired(\"needed\")\n\n})\n\nexport {ValidationSchema, initialValue}","// import {useRouter} from \"next/router\"\nimport React,{useState,useEffect} from \"react\"\n\nimport Card from \"@material-ui/core/Card\"\nimport useSWR from \"swr\"\n// import StudentDatabase from \"../../database/studentDatabase\"\nimport Button from \"@material-ui/core/Button\"\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from \"@material-ui/core/Grid\"\nimport  CardHeader  from \"@material-ui/core/CardHeader\"\nimport { Avatar } from \"@material-ui/core\"\n\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DoneIcon from '@material-ui/icons/Done';\n// import StudentTemplate from \"../../components/topdfContainer/studentTemplate\"\n\n// import { PDFDownloadLink } from '@react-pdf/renderer';\n\n// import MyDocument from \"../../components/topdfContainer/studentTemplate\"\nimport PrintIcon from '@material-ui/icons/Print';\n\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\n\n\n\nimport TextField from \"@material-ui/core/TextField\"\nimport {Field,Formik,Form,ErrorMessage, FastField} from \"formik\"\n// import Styles from \"../../components/studentComponent/student.module.css\"\nimport Input from '@material-ui/core/Input';\n// import parse from 'autosuggest-highlight/parse';\n// import match from 'autosuggest-highlight/match';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport defaultImage from \"assets/defaultImages/defaultImage.png\"\nimport {Wrapper } from \"./styles\"\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\n// import {errorFieldMessage} from \"../../components/error/errorFieldMessage\"\n// import GenderDatabase from \"../../database/GeneralDatabase\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\n\n\n\n\n\nimport {ImageConverter} from \"components/imageConverter/imageconvert\"\n\nimport {ValidationSchema, initialValue} from \"../studentFormschema\"\n// import GenderDatabase from \"../../database/GeneralDatabase\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\n\n\n        // const initialState = {\n        //     stuImage: null\n        // }\n\nlet religiondata =[{id:1,doctrine:\"Christain\"},{id:2,doctrine:\"Muslim\"},{id:3,doctrine:\"Pegan\"},{id:4,doctrine:\"Traditionalist\"}]\nlet bloodgroupdata =[{id:1,group:\"A+\"},{id:2,group:\"A-\"},{id:3,group:\"B+\"},{id:4,group:\"B-\"},{id:5,group:\"AB\"},{id:6,group:\"0+\"},{id:7,group:\"O-\"}]\n\nlet initialStateImageValues = {\n    \n    imagesizeError:\"none\",\n    imagedataBack:null,\n    filename:\"\"\n}\nlet initialEditIcons = {\n\n        studentImageIconEditOff:\"none\",\n        FamilyNameIconEditOff:\"none\",\n        GivenNameIconEditOff:\"none\",\n        DateOfBirthIconEditOff:\"none\",\n        GenderIconEditOff: \"none\",\n        StudentAddressIconEditOff:\"none\",\n        BloodGroupIconEditOff:\"none\",\n        ReligionIconEditOff:\"none\",\n        eMailIconEditOff:\"none\",\n        \n        // sectionIconEditOff:\"none\",\n        AdmissionIDIconEditOff:\"none\",\n        PhoneIconEditOff:\"none\",\n        shortBioIconEditOff:\"none\",\n        // imageholder:state.filename\n\n        FatherNameIconEditOff:\"none\",\n        FatherOccupationIconEditOff:\"none\",\n        FatherAddressIconEditOff:\"none\",\n        FatherContactIconEditOff:\"none\",\n        // Mother info\n        MotherNameIconEditOff:\"none\",\n        MotherOccupationIconEditOff:\"none\",\n        MotherAddressIconEditOff:\"none\",\n        MotherContactIconEditOff:\"none\",\n}\n\nlet initialDisplay = {\n        studentImageEditon:\"inline\",\n        FamilyNameEditOn:\"inline\",\n        GivenNameEditOn:\"inline\",\n        DateOfBirthEditOn:\"inline\",\n        GenderEditOn: \"inline\",\n        StudentAddressEditOn:\"inline\",\n        BloodGroupEditOn:\"inline\",\n        ReligionEditOn:\"inline\",\n        eMailEditOn:\"inline\",\n        \n        // sectionEditOn:\"inline\",\n        AdmissionIDEditOn:\"inline\",\n        PhoneEditOn:\"inline\",\n        shortBioEditOn:\"inline\",\n        // imageholder:state.filename\n\n        FatherNameEditOn:\"inline\",\n        FatherOccupationEditOn:\"inline\",\n        FatherAddressEditOn:\"inline\",\n        FatherContactEditOn:\"inline\",\n        // Mother info\n        MotherNameEditOn:\"inline\",\n        MotherOccupationEditOn:\"inline\",\n        MotherAddressEditOn:\"inline\",\n        MotherContactEditOn:\"inline\",\n// \n// \n// \n        studentImageEditOff:\"none\",\n        FamilyNameEditOff:\"none\",\n        GivenNameEditOff:\"none\",\n        DateOfBirthEditOff:\"none\",\n        GenderEditOff: \"none\",\n        StudentAddressEditOff:\"none\",\n        BloodGroupEditOff:\"none\",\n        ReligionEditOff:\"none\",\n        eMailEditOff:\"none\",\n        \n        sectionEditOff:\"none\",\n        AdmissionIDEditOff:\"none\",\n        PhoneEditOff:\"none\",\n        shortBioEditOff:\"none\",\n        // imageholder:state.filename\n\n        FatherNameEditOff:\"none\",\n        FatherOccupationEditOff:\"none\",\n        FatherAddressEditOff:\"none\",\n        FatherContactEditOff:\"none\",\n        // Mother info\n        MotherNameEditOff:\"none\",\n        MotherOccupationEditOff:\"none\",\n        MotherAddressEditOff:\"none\",\n        MotherContactEditOff:\"none\",\n}\n\nlet n = 0\nexport const StudentPersonalDetails =  ()=>{\n    // n = n+1\n    let [stateDownloadIcon,setStateDownloadIcon] = useState(null)\n    let [displayState , setDisplayState] = useState(initialDisplay)\n    let [displayEditIconState , setDisplayEditIconState] = useState(initialEditIcons)\n\n    let [state , setstate] = useState(initialStateImageValues)\n\n    let {data:sectionGetData, error:sectionGetError} =  useSWR(\"/api/sectionapi\")\n    let {data:genderGetData, error:genderGetError} =  useSWR(\"/api/generalapi?gender=true\")\n    // let sectiondata = (sectionGetData ? sectionGetData.length != 0 && sectionGetData :undefined) || [{id_:\"\",section:\"\", languages:\"\"}]\n    let genderdata = (genderGetData ? genderGetData.length != 0 && genderGetData :undefined) || [{id:\"\",gender:\"\"}]\n\n    // let initialValues=initialValue(genderdata,bloodgroupdata,religiondata,sectiondata)\n    \n\n    // let router = useRouter()\n    // console.log(\"router::\",router.query)\n\n\n    // let [state , setstate] = useState(initialState)\n    // // let router = useRouter()\n    // oneStudent = JSON.parse(oneStudent)\n    // // console.log(\"router::\",router)\n    // console.log(\"students:::\",oneStudent)\n\n    // let {AdmissionID:studentAdmissionID} = router.query\n    let {AdmissionID:studentAdmissionID} = 1\n\n    // const {data:oneStudentdata, error:onStudentError} = useSWR(\"/api/studentapi?AdmissionID=GO10&student=GO11\")\n    const {data:oneStudentdata, error:onStudentError} = useSWR(`/api/studentapi?AdmissionID=${studentAdmissionID}`)\n   \n     // student=GO11 NOT USEFUL JUST TESTING the end point\n    let initialValues={\n        FamilyName:oneStudentdata ? oneStudentdata.oneStudent.familyname:\"\",\n        GivenName:oneStudentdata ? oneStudentdata.oneStudent.givenname:\"\",\n        DateOfBirth:oneStudentdata ? new Date(oneStudentdata.oneStudent.dateofbirth).toISOString().slice(0,10):new Date().toISOString().slice(0,10),\n        Gender: genderdata[0],\n        StudentAddress:oneStudentdata ? oneStudentdata.oneStudent.StudentAddress:\"\",\n        BloodGroup:bloodgroupdata[0],\n        Religion:religiondata[0],\n        eMail:oneStudentdata ? oneStudentdata.oneStudent.email:\"\",\n        \n        // section:sectiondata[0],\n        // AdmissionID:\"\",\n        Phone:oneStudentdata ? oneStudentdata.oneStudent.phonenumber:\"\",\n        shortBio:oneStudentdata ? oneStudentdata.oneStudent.shortbiography:\"\",\n        // imageholder:state.filename\n    \n        FatherName:oneStudentdata ? oneStudentdata.oneStudent.FatherName:\"\",\n        FatherOccupation:oneStudentdata ? oneStudentdata.oneStudent.FatherOccupation:\"\",\n        FatherAddress:oneStudentdata ? oneStudentdata.oneStudent.FatherAddress:\"\",\n        FatherContact:oneStudentdata ? oneStudentdata.oneStudent.FatherContact:\"\",\n        // Mother info\n        MotherName:oneStudentdata ? oneStudentdata.oneStudent.MotherName:\"\",\n        MotherOccupation:oneStudentdata ? oneStudentdata.oneStudent.MotherOccupation:\"\",\n        MotherAddress:oneStudentdata ? oneStudentdata.oneStudent.MotherAddress:\"\",\n        MotherContact:oneStudentdata ? oneStudentdata.oneStudent.MotherContact:\"\",\n        }\n    // const {data:oneStudentdata, error:onStudentError} = useSWR(\"public/uploads/Student/images/GO10_photo.jpeg\")\n    // // console.log(\"check\",oneStudentdata)\n    // console.log(\"onestudent\",oneStudentdata)\n    useEffect(()=>{\n        setStateDownloadIcon(true)\n      },[])\n    \n        // console.log(\"type::\",typeof(oneStudentdata.studentImage))\n        // let responce =  URL.createObjectURL(oneStudentdata.studentImage)\n        // console.log(responce)\n        // const b64toBlob = (b64Data, contentType='', sliceSize=512) => {\n        //     const byteCharacters = atob(b64Data);\n        //     const byteArrays = [];\n\n        //     for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        //         const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n        //         const byteNumbers = new Array(slice.length);\n        //         for (let i = 0; i < slice.length; i++) {\n        //         byteNumbers[i] = slice.charCodeAt(i);\n        //         }\n\n        //         const byteArray = new Uint8Array(byteNumbers);\n        //         byteArrays.push(byteArray);\n        //     }\n                \n        //     const blob = new Blob(byteArrays, {type: contentType});\n        //     return blob;\n        //     }\n\n        //     const contentType = 'image/png';\n\n        //     const b64Data = oneStudentdata.studentImage\n\n        //     const blob = b64toBlob(b64Data, contentType);\n        //     const blobUrl = URL.createObjectURL(blob);\n        //      setstate((prev)=>({\n        //         stuImage: blobUrl\n        //      }))\n        let imageState = ImageConverter(oneStudentdata)\n       \n        \n        \n    // if(oneStudent){\n        // const imageURL = new Image()    \n        // imageURL.src = oneStudent.studentImage\n        // document.body.appendChild(imageURL)\n        // console.log(oneStudent.studentImage)\n        // const imageURL = reader.readAsBinaryString(oneStudent.studentImage)\n        \n    // }\n    \n    \n    return (\n            <Wrapper>\n                {/* <Button onClick={pdfConverter}>help</Button> */}\n                \n                <div >\n                    <h3 >Student Details</h3>\n                </div>\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={ValidationSchema}\n                    enableReinitialize\n                >\n                    {\n                        ({\n                            values,\n                            getFieldProps,\n                            setFieldValue,\n                            setFieldError,\n                            errors,\n                            validateOnBlur,\n                            handleSubmit,\n                            handleBlur,\n                            handleChange,\n                            isValid,\n                            dirty,\n                            touched\n                        })=>{\n                            return(\n                        \n                            <Form>\n                                <Card id=\"Card\">\n                                        {/* <div className=\"float-right\">\n                                            <ul className=\"listStyle\"> */}\n                                                {/* <li className=\"p-2\">\n                                                    {stateDownloadIcon ? <PDFDownloadLink   document={<MyDocument \n                                                            help={oneStudentdata ? oneStudentdata.oneStudent.familyname : null}\n                                                        />} fileName=\"studentID.pdf\">\n                                                        {({ blob, url, loading, error }) => (loading ? '' : <CloudDownloadIcon />)}\n                                                    </PDFDownloadLink>: null}\n                                                </li> */}\n                                                {/* <li className=\"p-2\">{stateDownloadIcon?<a href=\"#\"  download target=\"_blank\" rel=\"noopener noreferrer\"> <PrintIcon /> </a>:null}</li>\n                                            </ul>\n                                            \n                                        </div> */}\n                                        <CardHeader\n                                            className=\"cardheader\"\n                                            avatar = {\n                                                <Avatar >\n                                                    {` ${oneStudentdata ?  oneStudentdata.oneStudent.givenname.substring(0,1).toUpperCase() : null}`}\n                                                </Avatar>\n                                            }\n                                            \n                                            title = {`${oneStudentdata ? \"ABOUT\".concat(\" \",oneStudentdata.oneStudent.familyname,\" \",oneStudentdata.oneStudent.givenname).toUpperCase() : null}`}\n                                            subheader={`${new Date().toLocaleDateString()}`}\n                                        />\n                                        \n                                    \n                                        <Grid container  spacing={0} >\n\n                                                <Grid item xs={12}  md={4}  className=\"text-center\" >\n                                                \n                                                <div style={{display:displayState.studentImageEditon}} className=\"centralize\" \n                                                    \n                                                    onMouseOver={\n                                                        ()=>setDisplayEditIconState((prev)=>({\n                                                                ...prev,\n                                                                studentImageIconEditOff:\"inline\"\n                                                                \n                                                            }))\n                                                        }\n                                                    onMouseOut={\n                                                        ()=>setDisplayEditIconState((prev)=>({\n                                                            ...prev,\n                                                            studentImageIconEditOff:\"none\"\n                                                            \n                                                        }))\n                                                    }    \n                                                        > \n                                                    <div style={{display:displayEditIconState.studentImageIconEditOff}} >\n\n                                                        <Button  onClick={()=>{\n                                                                setDisplayState((prev)=>({\n                                                                    ...prev,\n                                                                    studentImageEditOff:\"inline\",\n                                                                    studentImageEditon:\"none\"\n                                                                }))\n                                                            }}><EditIcon />\n                                                        </Button>\n\n                                                        <Button>\n                                                            <DeleteForeverIcon />\n                                                        </Button>\n                                                    </div>\n                                                    {imageState ? <img  src={imageState} className=\"studentImage\"/> : <img  src={defaultImage} className=\"studentImage\"/>}\n                                                </div>\n                                                <div style={{display:displayState.studentImageEditOff}}>\n                                                    <div>  \n                                                        <label htmlFor=\"image\" className=\"bg-info\">\n                                                            \n                                                                <AddIcon fontSize=\"large\" color=\"primary\"/>\n                                                            \n                                                        </label>\n                                                        <Button onClick={()=>{\n                                                                setDisplayState((prev)=>({\n                                                                    ...prev,\n                                                                    studentImageEditOff:\"none\",\n                                                                    studentImageEditon:\"inline\"\n                                                                }))\n                                                            }}><CloseIcon />\n                                                        </Button>\n                                                        <Button onClick={async ()=>{\n                                                                let studentImageEdit = await fetch(\"/api/studentapi\",{\n                                                                    body: JSON.stringify(\n                                                                        {\n                                                                            studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                            imageEditValue:state.imagedataBack\n                                                                        }),\n                                                                    method:\"PUT\"\n                                                                })\n                                                                setDisplayState((prev)=>({\n                                                                    ...prev,\n                                                                    studentImageEditOff:\"none\",\n                                                                    studentImageEditon:\"inline\"\n                                                                }))\n                                                            }}><DoneIcon />         \n                                                        </Button>\n                                                    </div>\n\n                                                    <div className=\"bg-info text-center\">\n                                                        <TextField \n                                                            // component={TextField}\n                                                            // error={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? true : false }\n                                                            \n                                                            // label={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? errors.imageholder : \"image\" }\n                                                            disabled\n                                                            name=\"imageholder\"\n                                                            id=\"imageholder\"\n                                                            className=\"w-100 bg-light text-danger\"\n                                                            // {...getFieldProps(\"imageholder\")}\n                                                            value={state.filename} />\n                                                        <h4 style={{display:state.imagesizeError,color:\"red\"}} >Image size less than 1MB</h4>\n                                                        <Field\n                                                            // width=\"200cm\"\n                                                            // height=\"200cm\"\n                                                            className=\"border border-info rounded-circle m-0 p-0 bg-secondary\"\n                                                            // onerror=\"this.onerror=null;this.src='./default.jpg';\"\n                                                            // component={(params)=><img {...params} src={state}/>}\n                                                            component={params=>{\n                                                            if(state.imagedataBack){\n                                                                return <img {...params} src={state.imagedataBack}/>\n                                                            }\n                                                            else{\n                                                                return <img  {...params} src={defaultImage}/>\n                                                            }\n                                                            }\n                                                        }\n                                                            />\n                                                    </div> \n                                                    \n                                                    <Field\n                                                        // error={errors.hasOwnProperty(\"image\") && touched.hasOwnProperty(\"image\") ? true : false }\n                                                        // {...getFieldProps(\"image\")}\n                                                        // label={errors.hasOwnProperty(\"image\") && touched.hasOwnProperty(\"image\") ? errors.DateOfBirth : \"image\" }\n                                                        // value={values.image}\n                                                        // name=\"image\"\n                                                        id=\"image\"\n                                                        component={Input}\n                                                        className=\"w-100 d-none\"\n                                                        variant=\"filled\"\n                                                        type=\"file\"\n                                                        accept=\".jpg, .jpeg, .png\"\n                                                        // multiple\n                                                        onChange={(event)=>{\n                                                            // handleChange\n                                                            let fileList = event.target.files\n\n                                                            const formData = new FormData()\n                                                            \n                                                            for(const file of fileList){\n                                                                const name = file.name ? file.name : 'NOT SUPPORTED';\n\n                                                                const type = file.type ? file.type : 'NOT SUPPORTED';\n\n                                                                const size = file.size ? file.size : 'NOT SUPPORTED';\n\n                                                                        if (file.type && file.type.indexOf('image') === -1) {\n                                                                            console.log('File is not an image.', file.type, file,file.type.indexOf('image'));\n                                                                            return;\n                                                                        }\n                                                                        if(file.size > 1000000){\n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                filename:null,\n                                                                                imagedataBack:null,\n                                                                                imagesizeError:\"inline\"\n                                                                            }))\n                                                                            return\n                                                                        }\n                                                                        const reader = new FileReader();\n                                                                        \n                                                                        reader.addEventListener('load', (event) => {\n                                                                            \n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                imagedataBack:event.target.result,\n                                                                                filename:file.name\n                                                                            }))\n                                                                            console.log(\"filename::\",state.filename)\n                                                                            \n                                                                        });\n                                                                        reader.readAsDataURL(file)\n\n                                                                        formData.append(\"file\",file)\n                                                                    \n                                                            }\n                                                            // setFieldValue(\"image\",fileList[0].name)\n                                                            \n                                                            \n                                                            // handleChange(event)\n                                                        }}\n                                                        />\n                                                        \n                                                    \n                                                      \n                                                    </div>     \n                                                </Grid>\n                                                {/* <Grid item xs={12}  md={4} className=\"bg-info text-center\" style={{display:displayState.studentImageEditOff}}> */}\n                                                    {/* <FastField */}\n                                                    \n\n                                                        \n                                                {/* </Grid> */}\n                                                \n                                        \n                                            <Grid item container  xs={12} md={8} spacing={0}>\n                                                \n                                                <TableContainer >\n                                                    <Table size=\"small\" stickyHeader={true} padding=\"default\" >\n                                                        {/* <TableHead> */}\n                                                        <TableBody>\n                                                            <TableRow hover role=\"checkbox\" tabIndex={-1} >\n                                                                <TableCell colSpan=\"2\"className=\" blue\" >\n                                                                    <div className=\"\">Student Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover role=\"checkbox\" tabIndex={-1} >\n                                                                <TableCell colSpan=\"2\">\n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    shortBioIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                shortBioIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        <div className=\"bolder\">\n                                                                            Biography\n                                                                        </div>\n                                                                            <span style={{display:displayState.shortBioEditOn}}>\n                                                                                <span >\n                                                                                    {oneStudentdata ? oneStudentdata.oneStudent.shortbiography : null}\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.shortBioIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                shortBioEditOff: \"inline\",\n                                                                                                shortBioEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.shortBioEditOff}}>\n                                                                            <Field\n                                                                                // error={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? true : false }\n                                                                                {...getFieldProps(\"shortBio\")}\n                                                                                label={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? errors.shortBio : \"shortBio\" }\n                                                                                value={values.shortBio}\n                                                                                name=\"shortBio\"\n                                                                                id=\"shortBio\"\n                                                                                // component={()=><textarea></textarea>}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                as=\"textarea\"\n                                                                                \n                                                                            />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        shortBioEditOff:\"none\",\n                                                                                        shortBioEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                shortbiography:values.shortBio\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        shortBioEditOff:\"none\",\n                                                                                        shortBioEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                    \n                                                                </TableCell>\n                                                                \n                                                            </TableRow>\n                                                            <TableRow>\n                                                                <TableCell>\n                                                                    Family Name\n                                                                </TableCell>\n                                                                <TableCell >\n                                                                    \n                                                                    \n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    \n                                                                                    FamilyNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                FamilyNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.FamilyNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.familyname : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FamilyNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                FamilyNameEditOff: \"inline\",\n                                                                                                FamilyNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.FamilyNameEditOff}}>\n                                                                        <Field\n                                                                            error={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? true : false }\n                                                                            {...getFieldProps(\"FamilyName\")}\n                                                                            label={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? errors.FamilyName : \"Family Name\" }\n                                                                            value={values.FamilyName}\n                                                                            name=\"FamilyName\"\n                                                                            id=\"FamilyName\"\n                                                                            component={TextField}\n                                                                            className=\"w-100\"\n                                                                            variant=\"filled\"\n                                                                            \n                                                                            />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FamilyNameEditOff:\"none\",\n                                                                                        FamilyNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                familyname:values.FamilyName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FamilyNameEditOff:\"none\",\n                                                                                        FamilyNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n\n\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Given Name\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    GivenNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                GivenNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.GivenNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.givenname : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.GivenNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                GivenNameEditOff: \"inline\",\n                                                                                                GivenNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.GivenNameEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? true : false }\n                                                                                {...getFieldProps(\"GivenName\")}\n                                                                                label={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? errors.GivenName : \"Given Name\" }\n                                                                                value={values.GivenName}\n                                                                                name=\"GivenName\"\n                                                                                id=\"GivenName\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GivenNameEditOff:\"none\",\n                                                                                        GivenNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                givenname:values.GivenName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GivenNameEditOff:\"none\",\n                                                                                        GivenNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow>\n                                                                <TableCell  >\n                                                                    Admision ID\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.AdmissionID : null}</span>\n                                                                {/* <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    AdmissionIDIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                AdmissionIDIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.AdmissionIDEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.AdmissionID : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.AdmissionIDIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                AdmissionIDEditOff: \"inline\",\n                                                                                                AdmissionIDEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.AdmissionIDEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? true : false }\n                                                                                {...getFieldProps(\"GivenName\")}\n                                                                                label={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? errors.GivenName : \"Given Name\" }\n                                                                                value={values.GivenName}\n                                                                                name=\"GivenName\"\n                                                                                id=\"GivenName\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        AdmissionIDEditOff:\"none\",\n                                                                                        AdmissionIDEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                AdmissionID:values.AdmissionID\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        AdmissionIDEditOff:\"none\",\n                                                                                        AdmissionIDEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>  */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell >\n                                                                    Date of Birth\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    DateOfBirthIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                DateOfBirthIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.DateOfBirthEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? new Date(oneStudentdata.oneStudent.dateofbirth).toLocaleDateString() : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.DateOfBirthIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                DateOfBirthEditOff: \"inline\",\n                                                                                                DateOfBirthEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.DateOfBirthEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? true : false }\n                                                                                {...getFieldProps(\"DateOfBirth\")}\n                                                                                label={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? errors.DateOfBirth : \"Date Of Birth\" }\n                                                                                value={values.DateOfBirth}\n                                                                                name=\"DateOfBirth\"\n                                                                                id=\"DateOfBirth\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                type=\"date\"\n                                                                                InputLabelProps={{\n                                                                                    shrink:true\n                                                                                }}\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        DateOfBirthEditOff:\"none\",\n                                                                                        DateOfBirthEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                dateofbirth:values.DateOfBirth\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        DateOfBirthEditOff:\"none\",\n                                                                                        DateOfBirthEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>   \n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Age\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    <div className=\"bolder\">{oneStudentdata ?new Date().getFullYear() - new Date(oneStudentdata.oneStudent.dateofbirth).getFullYear()  : null}</div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Blood Group\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    BloodGroupIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                BloodGroupIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.BloodGroupEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.bloodgroup : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.BloodGroupIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                BloodGroupEditOff: \"inline\",\n                                                                                                BloodGroupEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.BloodGroupEditOff}}>\n                                                                            <Field\n                                                                \n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={values.BloodGroup}\n                                                                                defaultValue={values.BloodGroup}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(\"BloodGroup\", selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                \n                                                                                options={bloodgroupdata}\n                                                                                name=\"BloodGroup\"\n                                                                                id=\"BloodGroup\"\n                                                                                getOptionSelected={(option,value)=>option.group == value.group}\n                                                                                getOptionLabel={option => option.group}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                    component={TextField}\n                                                                                    {...params}\n                                                                                    \n                                                                                    name=\"BloodGroup\"\n                                                                                    error={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? true : false }\n                                                                                    label={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? errors.BloodGroup : \"BloodGroup\" }\n                                                                                    variant=\"filled\"    \n                                                                                    \n                                                                                />\n                                                                                    </>\n                                                                                \n                                                                                )}\n                                                                            />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        BloodGroupEditOff:\"none\",\n                                                                                        BloodGroupEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                bloodgroup:values.BloodGroup\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        BloodGroupEditOff:\"none\",\n                                                                                        BloodGroupEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>   \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Gender\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GenderIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    GenderIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                        \n                                                                            <span style={{display:displayState.GenderEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.GenderIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                GenderEditOff: \"inline\",\n                                                                                                GenderEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.GenderEditOff}}>\n                                                                        <Field\n                                                        \n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={values.Gender}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(\"Gender\", selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                options={genderdata}\n                                                                                name=\"Gender\"\n                                                                                id=\"Gender\"\n                                                                                \n                                                                                getOptionSelected = {(option,value)=> option.gender == value.gender}\n                                                                                getOptionLabel={option => option.gender}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                    component={TextField}\n                                                                                    {...params}\n                                                                                    \n                                                                                    name=\"Gender\"\n                                                                                    error={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? true : false }\n                                                                                    label={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? errors.Gender : \"Gender\" }\n                                                                                    variant=\"filled\"    \n                                                                                    \n                                                                                />\n                                                                                    </>\n                                                                                \n                                                                                )}\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GenderEditOff:\"none\",\n                                                                                        GenderEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                gender:values.Gender\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GenderEditOff:\"none\",\n                                                                                        GenderEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>  \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Email\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    eMailIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                eMailIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.eMailEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.email : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.eMailIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                eMailEditOff: \"inline\",\n                                                                                                eMailEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.eMailEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? true : false }\n                                                                                {...getFieldProps(\"eMail\")}\n                                                                                label={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? errors.eMail : \"email\" }\n                                                                                value={values.eMail}\n                                                                                name=\"eMail\"\n                                                                                id=\"eMail\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                type=\"email\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        eMailEditOff:\"none\",\n                                                                                        eMailEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                email:values.eMail\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        eMailEditOff:\"none\",\n                                                                                        eMailEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                    \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Phone Number\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        PhoneIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    PhoneIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                            \n                                                                                <span style={{display:displayState.PhoneEditOn}}>\n                                                                                    <span >\n                                                                                        <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.phonenumber : null}</span>\n                                                                                    </span>\n                                                                                    <span style={{display:displayEditIconState.PhoneIconEditOff}}>\n\n                                                                                        <Button  onClick={()=>{\n                                                                                                setDisplayState((prev)=>({\n                                                                                                    ...prev,\n                                                                                                    \n                                                                                                    PhoneEditOff: \"inline\",\n                                                                                                    PhoneEditOn:\"none\"\n                                                                                                }))\n                                                                                            }}><EditIcon />\n                                                                                        </Button>\n\n                                                                                        <Button>\n                                                                                            <DeleteForeverIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                            \n                                                                                    \n                                                                                </span>\n                                                                            <span style={{display:displayState.PhoneEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"Phone\") && touched.hasOwnProperty(\"Phone\") ? true : false }\n                                                                                        {...getFieldProps(\"Phone\")}\n                                                                                        label={errors.hasOwnProperty(\"Phone\") && touched.hasOwnProperty(\"Phone\") ? errors.Phone : \"Phone\" }\n                                                                                        value={values.Phone}\n                                                                                        name=\"Phone\"\n                                                                                        id=\"Phone\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        type=\"tel\"\n                                                                                        \n                                                                                        \n                                                                                        />\n                                                                                <Button onClick={()=>{\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            PhoneEditOff:\"none\",\n                                                                                            PhoneEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><CloseIcon />\n                                                                                </Button>\n                                                                                <Button onClick={async ()=>{\n                                                                                        let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                            body: JSON.stringify(\n                                                                                                {\n                                                                                                    studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                    phonenumber:values.Phone\n                                                                                                }),\n                                                                                            method:\"PUT\"\n                                                                                        })\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            PhoneEditOff:\"none\",\n                                                                                            PhoneEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><DoneIcon />\n                                                                                </Button>\n                                                                            </span>\n                                                                        </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Religion\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    ReligionIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                ReligionIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.ReligionEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.religion : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.ReligionIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                ReligionEditOff: \"inline\",\n                                                                                                ReligionEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.ReligionEditOff}}>\n                                                                            <Field\n                                                            \n                                                                                    component={Autocomplete}\n                                                                                    // {...getFieldProps(\"Gender\")}\n                                                                                    value={values.Religion}\n                                                                                    defaultValue={values.Religion}\n                                                                                    onBlur={handleBlur}\n                                                                                    onChange={(e,selectedOption )=>\n                                                                                        {setFieldValue(\"Religion\", selectedOption)\n                                                                                        //  setFieldError(\"Gender\",errors.Gender)\n                                                                                            }\n                                                                                    }\n                                                                                    \n                                                                                    // inputValue={values.Gender.title}\n                                                                                    options={religiondata}\n                                                                                    name=\"Religion\"\n                                                                                    id=\"Religion\"\n                                                                                    getOptionSelected = {(option,value)=> option.doctrine == value.doctrine}\n                                                                                    getOptionLabel={option => option.doctrine}\n                                                                                    renderInput={params => (\n                                                                                        <>\n                                                                                        \n                                                                                        <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        \n                                                                                        name=\"Religion\"\n                                                                                        error={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? true : false }\n                                                                                        label={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? errors.Religion : \"Religion\" }\n                                                                                        variant=\"filled\"    \n                                                                                        \n                                                                                    />\n                                                                                        </>\n                                                                                    \n                                                                                    )}\n\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        ReligionEditOff:\"none\",\n                                                                                        ReligionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                religion:values.Religion\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        ReligionEditOff:\"none\",\n                                                                                        ReligionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Date of errollment\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div className=\"bolder\">\n                                                                        {oneStudentdata ? new Date(oneStudentdata.oneStudent.dateOfEnrollment).toLocaleDateString() : null}\n                                                                        <div>{oneStudentdata ? new Date(oneStudentdata.oneStudent.dateOfEnrollment).toLocaleTimeString() : null}</div>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            {/* <TableRow hover>\n                                                                <TableCell  >\n                                                                    Section\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    sectionIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                sectionIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.sectionEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Section.section : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.sectionIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                sectionEditOff: \"inline\",\n                                                                                                sectionEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.sectionEditOff}}>\n                                                                        <Field\n                                                                            component={Autocomplete}\n                                                                            // {...getFieldProps(\"Gender\")}\n                                                                            value={values.section}\n                                                                            onBlur={handleBlur}\n                                                                            onChange={(e,selectedOption )=>\n                                                                                {setFieldValue(\"section\", selectedOption)\n                                                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                                                    }\n                                                                            }\n                                                                            \n                                                                            // inputValue={values.Gender.title}\n                                                                            options={sectiondata}\n                                                                            name=\"section\"\n                                                                            id=\"section\"\n                                                                            getOptionSelected={(option, value) => option.section == value.section}\n                                                                            getOptionLabel={option => option.section}\n                                                                            renderInput={params => (\n                                                                                <>\n                                                                                \n                                                                                <Field \n                                                                                    component={TextField}\n                                                                                    {...params}\n                                                                                    name=\"section\"\n                                                                                    error={errors.hasOwnProperty(\"section\") && touched.hasOwnProperty(\"section\") ? true : false }\n                                                                                    label={errors.hasOwnProperty(\"section\") && touched.hasOwnProperty(\"section\") ? errors.section : \"section\" }\n                                                                                    variant=\"filled\"    \n                                                                                    \n                                                                                />\n                                                                                </>\n                                                                            \n                                                                            )}\n                            \n                                                                                        renderOption={(option, { inputValue }) => {\n                                                                                        const matches = match(option.section, inputValue);\n                                                                                        const parts = parse(option.section, matches);\n                                                                                \n                                                                                        return (\n                                                                                            <div>\n                                                                                            {parts.map((part, index) => (\n                                                                                                <span key={index} >\n                                                                                                {part.text}\n                                                                                                </span>\n                                                                                            ))}\n                                                                                            </div>\n                                                                                        );\n                                                                                        }}\n                                                                                    />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        sectionEditOff:\"none\",\n                                                                                        sectionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                Section:values.section\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        sectionEditOff:\"none\",\n                                                                                        sectionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow> */}\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Address\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    StudentAddressIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                StudentAddressIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.StudentAddressEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.StudentAddress : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.StudentAddressIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                StudentAddressEditOff: \"inline\",\n                                                                                                StudentAddressEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                            <span style={{display:displayState.StudentAddressEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"StudentAddress\") && touched.hasOwnProperty(\"StudentAddress\") ? true : false }\n                                                                                        {...getFieldProps(\"StudentAddress\")}\n                                                                                        label={errors.hasOwnProperty(\"StudentAddress\") && touched.hasOwnProperty(\"StudentAddress\") ? errors.StudentAddress : \"StudentAddress\" }\n                                                                                        value={values.StudentAddress}\n                                                                                        name=\"StudentAddress\"\n                                                                                        id=\"StudentAddress\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        \n                                                                                        \n                                                                                    />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        StudentAddressEditOff:\"none\",\n                                                                                        StudentAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                StudentAddress:values.StudentAddress\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        StudentAddressEditOff:\"none\",\n                                                                                        StudentAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                            \n                                                                <TableCell  colSpan=\"2\" className=\"blue\">\n                                                                    <div >Guadiant Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Guidant Name\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Relationship\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Occupation\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Address\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Email\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell colSpan=\"2\"  className=\"blue\">\n                                                                    <div >Parents Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell colSpan=\"2\"  className=\"orange\">\n                                                                    <div >Father Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Father Name\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    FatherNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                FatherNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.FatherNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.FatherName : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FatherNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                FatherNameEditOff: \"inline\",\n                                                                                                FatherNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                            <span style={{display:displayState.FatherNameEditOff}}>\n                                                                                <Field\n                                                                                    error={errors.hasOwnProperty(\"FatherName\") && touched.hasOwnProperty(\"FatherName\") ? true : false }\n                                                                                    {...getFieldProps(\"FatherName\")}\n                                                                                    label={errors.hasOwnProperty(\"FatherName\") && touched.hasOwnProperty(\"FatherName\") ? errors.FatherName : \"FatherName\" }\n                                                                                    value={values.FatherName}\n                                                                                    name=\"FatherName\"\n                                                                                    id=\"FatherName\"\n                                                                                    component={TextField}\n                                                                                    className=\"w-100\"\n                                                                                    variant=\"filled\"\n                                                                                    \n                                                                                    />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherNameEditOff:\"none\",\n                                                                                        FatherNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                FatherName:values.FatherName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherNameEditOff:\"none\",\n                                                                                        FatherNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Father occupation\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    FatherOccupationIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                FatherOccupationIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.FatherOccupationEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.FatherOccupation : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FatherOccupationIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                FatherOccupationEditOff: \"inline\",\n                                                                                                FatherOccupationEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.FatherOccupationEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"FatherOccupation\") && touched.hasOwnProperty(\"FatherOccupation\") ? true : false }\n                                                                                {...getFieldProps(\"FatherOccupation\")}\n                                                                                label={errors.hasOwnProperty(\"FatherOccupation\") && touched.hasOwnProperty(\"FatherOccupation\") ? errors.FatherOccupation : \"FatherOccupation\" }\n                                                                                value={values.FatherOccupation}\n                                                                                name=\"FatherOccupation\"\n                                                                                id=\"FatherOccupation\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherOccupationEditOff:\"none\",\n                                                                                        FatherOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                FatherOccupation:values.FatherOccupation\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherOccupationEditOff:\"none\",\n                                                                                        FatherOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Father Address\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                        <div \n                                                                                onMouseOver={\n                                                                                    ()=>setDisplayEditIconState((prev)=>({\n                                                                                            ...prev,\n                                                                                            FatherAddressIconEditOff:\"inline\"\n                                                                                            \n                                                                                        }))\n                                                                                    }\n                                                                                onMouseOut={\n                                                                                    ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherAddressIconEditOff:\"none\"\n                                                                                        \n                                                                                    }))\n                                                                            } >\n                                                                        \n                                                                            <span style={{display:displayState.FatherAddressEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.FatherAddress : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FatherAddressIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                FatherAddressEditOff: \"inline\",\n                                                                                                FatherAddressEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.FatherAddressEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"FatherAddress\") && touched.hasOwnProperty(\"FatherAddress\") ? true : false }\n                                                                                {...getFieldProps(\"FatherAddress\")}\n                                                                                label={errors.hasOwnProperty(\"FatherAddress\") && touched.hasOwnProperty(\"FatherAddress\") ? errors.FatherAddress : \"FatherAddress\" }\n                                                                                value={values.FatherAddress}\n                                                                                name=\"FatherAddress\"\n                                                                                id=\"FatherAddress\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherAddressEditOff:\"none\",\n                                                                                        FatherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                FatherAddress:values.FatherAddress\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherAddressEditOff:\"none\",\n                                                                                        FatherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Father Contact\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    FatherContactIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                FatherContactIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.FatherContactEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.FatherContact : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FatherContactIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                FatherContactEditOff: \"inline\",\n                                                                                                FatherContactEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.FatherContactEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"FatherContact\") && touched.hasOwnProperty(\"FatherContact\") ? true : false }\n                                                                                {...getFieldProps(\"FatherContact\")}\n                                                                                label={errors.hasOwnProperty(\"FatherContact\") && touched.hasOwnProperty(\"FatherContact\") ? errors.FatherContact : \"FatherContact\" }\n                                                                                value={values.FatherContact}\n                                                                                name=\"FatherContact\"\n                                                                                id=\"FatherContact\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherContactEditOff:\"none\",\n                                                                                        FatherContactEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                FatherContact:values.FatherContact\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherContactEditOff:\"none\",\n                                                                                        FatherContactEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell colSpan=\"2\"  className=\"orange\">\n                                                                    <div >Mother Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Mother Name\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    MotherNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                MotherNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.MotherNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.MotherName : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.MotherNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                MotherNameEditOff: \"inline\",\n                                                                                                MotherNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.MotherNameEditOff}}>\n                                                                            <Field\n                                                                                    error={errors.hasOwnProperty(\"MotherName\") && touched.hasOwnProperty(\"MotherName\") ? true : false }\n                                                                                    {...getFieldProps(\"MotherName\")}\n                                                                                    label={errors.hasOwnProperty(\"MotherName\") && touched.hasOwnProperty(\"MotherName\") ? errors.MotherName : \"MotherName\" }\n                                                                                    value={values.MotherName}\n                                                                                    name=\"MotherName\"\n                                                                                    id=\"MotherName\"\n                                                                                    component={TextField}\n                                                                                    className=\"w-100\"\n                                                                                    variant=\"filled\"\n                                                                                    \n                                                                                    />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherNameEditOff:\"none\",\n                                                                                        MotherNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                MotherName:values.MotherName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherNameEditOff:\"none\",\n                                                                                        MotherNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Mother Occupation\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    MotherOccupationIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                MotherOccupationIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.MotherOccupationEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.MotherOccupation : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.MotherOccupationIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                MotherOccupationEditOff: \"inline\",\n                                                                                                MotherOccupationEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.MotherOccupationEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"MotherOccupation\") && touched.hasOwnProperty(\"MotherOccupation\") ? true : false }\n                                                                                {...getFieldProps(\"MotherOccupation\")}\n                                                                                label={errors.hasOwnProperty(\"MotherOccupation\") && touched.hasOwnProperty(\"MotherOccupation\") ? errors.MotherOccupation : \"MotherOccupation\" }\n                                                                                value={values.MotherOccupation}\n                                                                                name=\"MotherOccupation\"\n                                                                                id=\"MotherOccupation\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherOccupationEditOff:\"none\",\n                                                                                        MotherOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                MotherOccupation:values.MotherOccupation\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherOccupationEditOff:\"none\",\n                                                                                        MotherOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Mother Address\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    MotherAddressIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                MotherAddressIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.MotherAddressEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.MotherAddress : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.MotherAddressIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                MotherAddressEditOff: \"inline\",\n                                                                                                MotherAddressEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.MotherAddressEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"MotherAddress\") && touched.hasOwnProperty(\"MotherAddress\") ? true : false }\n                                                                                {...getFieldProps(\"MotherAddress\")}\n                                                                                label={errors.hasOwnProperty(\"MotherAddress\") && touched.hasOwnProperty(\"MotherAddress\") ? errors.MotherAddress : \"MotherAddress\" }\n                                                                                value={values.MotherAddress}\n                                                                                name=\"MotherAddress\"\n                                                                                id=\"MotherAddress\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherAddressEditOff:\"none\",\n                                                                                        MotherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                MotherAddress:values.MotherAddress\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherAddressEditOff:\"none\",\n                                                                                        MotherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Mother Contact\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    MotherContactIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                MotherContactIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.MotherContactEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.MotherContact : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.MotherContactIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                MotherContactEditOff: \"inline\",\n                                                                                                MotherContactEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.MotherContactEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"MotherContact\") && touched.hasOwnProperty(\"MotherContact\") ? true : false }\n                                                                                {...getFieldProps(\"FatherContact\")}\n                                                                                label={errors.hasOwnProperty(\"MotherContact\") && touched.hasOwnProperty(\"MotherContact\") ? errors.MotherContact : \"MotherContact\" }\n                                                                                value={values.MotherContact}\n                                                                                name=\"MotherContact\"\n                                                                                id=\"MotherContact\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherContactEditOff:\"none\",\n                                                                                        MotherContactEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                MotherContact:values.MotherContact\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherContactEditOff:\"none\",\n                                                                                        MotherContactEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        {/* </TableHead> */}\n                                                        \n                                                            \n                                                        </TableBody>\n                                                    </Table>\n                                                </TableContainer>\n                                            </Grid>\n                                            \n                                        </Grid>\n                                    {/* </PdfConverter> */}\n                                    \n                                </Card>\n\n                            </Form>\n\n                            )\n                        }\n                    }\n                   \n                </Formik>\n                \n            </Wrapper>\n       \n    )\n}\n","import {StyleSheet} from \"@react-pdf/renderer\"\nexport const styles = StyleSheet.create({\n    page: {\n        margin:0,\n        // padding:\"3px\",\n        backgroundColor: 'pink',\n        // width:\"500px\",\n    },\n    container: {\n        display: \"flex\",\n        justifyContent:\"space-between\",\n        flexDirection: 'row',\n        padding:\"0\",\n        margin:\"0\",\n        backgroundColor:\"skyblue\",\n        height:\"85px\",\n      },\n      container2: {\n        display: \"flex\",\n        \n        flexDirection: 'row',\n        margin:\"0 10% 0 0\",\n        margin:\"0\",\n        backgroundColor:\"white\",\n        height:\"65px\",\n        \n      },\n    textCenter:{\n        textAlign:\"center\"\n    },\n    heading:{\n        width:\"200px\",\n        textAlign:\"center\",\n        fontSize:6,\n    },\n    headingAcademic:{\n        textAlign:\"center\",\n        fontSize:10,\n        backgroundColor:\"orange\"\n    },\n    image: {\n        objectFit: 'fit-content',\n        textAlign:\"center\",\n        width:\"90px\",\n        height:\"85px\",\n        margin:\"0 0 0 0\"\n        \n    \n    },\n    studentcontainer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-around\",\n        alignContent: \"stretch\",\n        alignItems: \"stretch\",\n        flexGrow: 0,\n        flexShrink: 0,\n        borderWidth:1,\n        borderStyle:\"solid\",\n        borderColor:\"black\",\n        \n        \n\n        \n      },\n\n      \n    studentimage: {\n        objectFit: 'fit-content',\n        width:\"65px\",\n        height:\"65px\",\n        margin:\"0 0 0 0\"\n    },\n    \n\n    testimage:{\n        objectFit: 'fit-content',\n        width:\"65px\",\n        height:\"65px\",\n        // left:\"8px\"\n    },\n\n\n    subjectContainer:{\n        flexDirection:\"row\",\n        margin:0,\n        padding:0,\n        fontSize:8,\n    },\n    sub:{\n        borderStyle:\"black\",\n        borderColor:\"black\",\n        borderWidth:1,\n        \n    },\n    subject:{\n        width:\"140px\",\n        padding:\"3px\"\n        \n    },\n    coef:{\n        width:\"25px\",\n        textAlign:\"center\",\n        padding:\"3px\"\n    },\n    seq:{\n        width:\"30px\",\n        textAlign:\"center\",\n        padding:\"3px\"\n    },\n    Avg:{\n        width:\"45px\",\n        textAlign:\"center\",\n        padding:\"3px\"\n    },\n    minMax:{\n        width:\"30px\",\n        textAlign:\"center\",\n        padding:\"3px\"\n    },\n    rank:{\n        width:\"25px\",\n        textAlign:\"center\",\n        padding:\"3px\"\n    },\n    Comp:{\n        width:\"90px\",\n        padding:\"3px\"\n    },\n    Teacher:{\n        width:\"105px\",\n        padding:\"3px\"\n    },\n    color:{\n        color:\"blue\",\n        paddingLeft:\"3px\"\n    },\n    grey:{\n        color:\"grey\"\n    },\n    backgroundColorHead:{\n        backgroundColor:\"grey\"\n    },\n    white:{\n        backgroundColor:\"white\"\n    },\n    subjectColorHead:{\n        backgroundColor:\"skyblue\"\n    }\n  });\n\n  \n\n\n\n  ","export const data = [\n    {\n        subject:\"physic\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Mathematics\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Geography\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },{\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },{\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },{\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },{\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },{\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    },\n    {\n        subject:\"Religion\",\n        coef:4,\n        seq1:20,\n        seq2:20,\n        avg:20,\n        Navg:60,\n        rank:1,\n        min:5,\n        max:15,\n        comp:\"acquired\",\n        Teacher:\"Landry\"\n    }\n]","import React,{useState} from \"react\"\nimport {styles} from \"./styles\"\n// import {PHOTO} from \"assets/defaultImages/defaultImage.png\"\nimport {Document, Page, Text, View, Image} from \"@react-pdf/renderer\"\nimport {data} from \"./test\"\n\nimport {PDFViewer,PDFDownloadLink} from \"@react-pdf/renderer\"\nimport Button from \"@material-ui/core/Button\"\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\"\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\nimport {sticky}  from \"./styles\"\nimport * as Yup from \"yup\"\nimport {Formik,Field,Form} from \"formik\"\n\n\nconst year = [\n    {id:1,year:\"2019\"},\n    {id:2,year:\"2020\"},\n    {id:3,year:\"2021\"}\n]\n\nconst clas = [\n    {id:1,clas:\"Form 1\"},\n    {id:2,clas:\"Form 2\"},\n    {id:3,clas:\"Form 3\"}\n]\n\nconst exam = [\n    {id:1,exam:\"1seq\"},\n    {id:2,exam:\"2seq\"},\n    {id:3,exam:\"3seq\"}\n]\n\nexport const ReportCardTemplate = ({data2=[1]})=>{\n\n    {console.log(\"class2\",data2)}\n\n    return(\n        <>\n        \n\n         \n            <Document\n                >\n            {data2.map((value, index)=>{\n            return (\n                <React.Fragment key={index}>\n                    <Page size=\"A4\" style={styles.page} wrap={false} >\n                        <View style={styles.container}>\n                            <View style={styles.section1}>\n                                    <Text style={styles.heading}>REPUBLIQUE DU CAMEROUN</Text> \n                                    <Text style={styles.heading}>**************</Text>\n                                    <Text style={styles.heading}>Paix – Travail – Patrie</Text>\n                                    <Text style={styles.heading}>**************</Text>\n                                    <Text style={styles.heading}>MINISTERE DES ENSEIGNEMENTS SECONDAIRES</Text> \n                                    <Text style={styles.heading}>*******************</Text>\n                                    <Text style={styles.heading}>DELEGATION REGIONALE DU CENTRE</Text> \n                                    <Text style={styles.heading}>*******************</Text>\n                                    <Text style={styles.heading}>DELEGATION DEPARTEMENTALE DU NYONG ET SO’O</Text> \n                                    <Text style={styles.heading}>*******************</Text>\n                                    <Text style={styles.heading}>LYCEE BILINGUE DE DZENG</Text> \n                                    <Text style={styles.heading}>**********************</Text>\n                                    <Text style={styles.heading}>B.P.06 Tél. :665 79 16 33 </Text>\n                                    <Text style={styles.heading}>*********************</Text>\n                                    <Text style={styles.heading}>Email : lybidzeng@gmail.com</Text>\n                            \n                                \n                            </View>\n                            <View style={styles.image}>\n                                <Image src=\"/defaultImage.png\" alt=\"student picture\"/>\n                            </View>\n                            \n                            <View style={styles.section2}>\n                                <Text style={styles.heading}>REPUBLIC OF CAMEROON</Text> \n                                <Text style={styles.heading}>**************</Text>\n                                <Text style={styles.heading}>Peace–Work–Fatherland</Text>\n                                <Text style={styles.heading}>**************</Text>\n                                <Text style={styles.heading}>MINISTRY OF SECONDARY EDUCATION</Text> \n                                <Text style={styles.heading}>*******************</Text>\n                                <Text style={styles.heading}>REGIONAL DELAGATION FOR THE CENTRE</Text> \n                                <Text style={styles.heading}>*******************</Text>\n                                <Text style={styles.heading}>DIVISIONAL DELEGATION OF NYONG AND SO’O</Text> \n                                <Text style={styles.heading}>*******************</Text>\n                                <Text style={styles.heading}>GOUVERNEMENT BILINGUAL HIGH SCHOOL OF DZENG</Text> \n                                <Text style={styles.heading}>**********************</Text>\n                                <Text style={styles.heading}>POBOX : 06 Phone : 665 79 16 33 </Text>\n                                <Text style={styles.heading}>*********************</Text>\n                                <Text style={styles.heading}>Email : lybidzeng@gmail.com</Text>\n                            </View>\n                            \n                        </View> \n                        <View style={styles.headingAcademic}>\n                                <Text style={styles.center}>Academic Report Card</Text>\n                        </View>\n\n                        <View style={styles.container2}>\n                            <View style={styles.studentimage}>\n                                <Image src=\"/defaultImage.png\" alt=\"student picture\"/>\n                            </View>\n\n                            <View >\n                                <View style={styles.studentcontainer}>\n                                    {/* <View style={{flexDirection: 'row',}}> */}\n\n                                        <View >\n                                            <Text style={[styles.textCenter,{fontSize:10,width:\"143px\"}]}>Student Academic Profile</Text>\n                                        </View>\n                                        <View >\n                                            <Text style={[styles.textCenter,{fontSize:10,width:\"100px\"}]}>Trimestre</Text>\n                                        </View>\n                                        <View >\n                                            <Text style={[styles.textCenter,{fontSize:10,width:\"100px\"}]}>Premiere Trimestre </Text>\n                                            \n                                        </View>\n                                        <View>\n                                            <Text style={[styles.textCenter,{fontSize:10,width:\"50px\"}]}>annee</Text>\n                                        </View>\n                                        <View>\n                                            <Text style={[styles.textCenter,{fontSize:10,width:\"60px\"}]}>2020/2021</Text>\n                                        </View>\n                                    {/* </View> */}\n                                    \n                                </View>\n                                <View style={styles.studentcontainer}>\n                                    <View >\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"50px\"}]}>First Name</Text>\n                                    </View>\n                                    <View >\n                                        <Text style={[styles.color,{fontSize:10,width:\"180px\"}]}>landry placid </Text>\n                                        \n                                    </View>\n                                    <View>\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"50px\"}]}>Last Name</Text>\n                                    </View>\n                                    <View>\n                                        <Text style={[styles.color,{fontSize:10,width:\"182px\"}]}>Noubissie </Text>\n                                    </View>\n                                    \n                                </View>\n\n                                <View style={styles.studentcontainer}>\n                                    <View>\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"30px\",left:\"-2px\"}]}>DOB</Text>\n                                    </View>\n                                    <View>\n                                        <Text style={[styles.grey,{fontSize:10,width:\"50px\"}]}>01/06/1994</Text>\n                                    </View>\n                                    <View >\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"30px\",textAlign:\"right\"}]}>POB</Text>\n                                    </View>\n                                    <View >\n                                        <Text style={[styles.grey,{fontSize:10,width:\"150px\",textAlign:\"center\"}]}>KUMBA </Text>\n                                        \n                                    </View>\n                                    <View>\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"40px\"}]}>Class</Text>\n                                    </View>\n                                    <View>\n                                        <Text style={[styles.grey,{fontSize:10,width:\"100px\"}]}>Form 1</Text>\n                                    </View>\n                                    <View>\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"30px\"}]}> Sex</Text>\n                                    </View>\n                                    <View>\n                                        <Text style={[styles.grey,{fontSize:10,width:\"10px\"}]}>M</Text>\n                                    </View>\n                                </View>\n\n                                <View style={styles.studentcontainer}>\n                                    <View >\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"100px\",left:\"-15px\"}]}>Registration Code</Text>\n                                    </View>\n                                    <View >\n                                        <Text style={[styles.grey,{fontSize:10,width:\"50px\"}]}>cs345546645 </Text>\n                                        \n                                    </View>\n                                    <View >\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"80px\"}]}>Serial Code</Text>\n                                    </View>\n                                    <View >\n                                        <Text style={[styles.grey,{fontSize:10,width:\"10px\"}]}>100 </Text>\n                                        \n                                    </View>\n                                    <View>\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"40px\"}]}>Repeat</Text>\n                                    </View>\n                                    <View>\n                                        <Text style={[styles.grey,{fontSize:10,width:\"10px\"}]}>No</Text>\n                                    </View>\n                                    \n                                </View>\n\n                                <View style={styles.studentcontainer}>\n                                    <View >\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"100px\",left:\"-15px\"}]}>Registration Code</Text>\n                                    </View>\n                                    <View >\n                                        <Text style={[styles.grey,{fontSize:10,width:\"50px\"}]}>cs345546645 </Text>\n                                        \n                                    </View>\n                                    <View >\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"80px\"}]}>Serial Code</Text>\n                                    </View>\n                                    <View >\n                                        <Text style={[styles.grey,{fontSize:10,width:\"10px\"}]}>100 </Text>\n                                        \n                                    </View>\n                                    <View>\n                                        <Text style={[styles.backgroundColorHead,{fontSize:10,width:\"40px\"}]}>Repeat</Text>\n                                    </View>\n                                    <View>\n                                        <Text style={[styles.grey,{fontSize:10,width:\"10px\"}]}>No</Text>\n                                    </View>\n                                    \n                                </View>\n                                \n                            </View>\n                                \n                                <View style={styles.testimage}>\n                                    <Image src=\"/defaultImage.png\" alt=\"student picture\"/>\n                                </View>\n                        </View>\n                        <View>\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.subject,styles.sub]}>\n                                    <Text>Subject</Text>\n                                </View>\n                                \n                                <View style={[styles.seq,styles.sub]}>\n                                    <Text>1st Seq</Text>\n                                </View>\n                                <View style={[styles.seq,styles.sub]}>\n                                    <Text>2st Seq</Text>\n                                </View>\n                                <View style={[styles.Avg,styles.sub]}>\n                                    <Text>Avg</Text>\n                                </View>\n                                <View style={[styles.coef,styles.sub]}>\n                                    <Text>Coef</Text>\n                                </View>\n                                <View style={[styles.Avg,styles.sub]}>\n                                    <Text>Coef*Avg</Text>\n                                </View>\n                                <View style={[styles.rank,styles.sub]}>\n                                    <Text>Rank</Text>\n                                </View>\n                                <View style={[styles.minMax,styles.sub]}>\n                                    <Text>Min</Text>\n                                </View>\n                                <View style={[styles.minMax,styles.sub]}>\n                                    <Text>Max</Text>\n                                </View>\n                                <View style={[styles.Comp,styles.sub]}>\n                                    <Text>Competence</Text>\n                                </View>\n                                <View style={[styles.Teacher,styles.sub]}>\n                                    <Text>Teacher</Text>\n                                </View>\n                            </View>\n                            {\n                                data.map((value,index)=>{\n                                    return(\n                                        <View style={[styles.white,styles.subjectContainer]} key={index}>\n                                            <View style={[styles.subject,styles.sub]}>\n                                                <Text>{value.subject}</Text>\n                                            </View>\n                                            \n                                            <View style={[styles.seq,styles.sub]}>\n                                                <Text>{value.seq1}</Text>\n                                            </View>\n                                            <View style={[styles.seq,styles.sub]}>\n                                                <Text>{value.seq2}</Text>\n                                            </View>\n                                            <View style={[styles.Avg,styles.sub]}>\n                                                <Text>{value.avg}</Text>\n                                            </View>\n\n                                            <View style={[styles.coef,styles.sub]}>\n                                                <Text>{value.coef}</Text>\n                                            </View>\n\n                                            <View style={[styles.Avg,styles.sub]}>\n                                                <Text>{value.Navg}</Text>\n                                            </View>\n                                            <View style={[styles.rank,styles.sub]}>\n                                                <Text>{value.rank}</Text>\n                                            </View>\n                                            <View style={[styles.minMax,styles.sub]}>\n                                                <Text>{value.min}</Text>\n                                            </View>\n                                            <View style={[styles.minMax,styles.sub]}>\n                                                <Text>{value.max}</Text>\n                                            </View>\n                                            <View style={[styles.Comp,styles.sub]}>\n                                                <Text>{value.comp}</Text>\n                                            </View>\n                                            <View style={[styles.Teacher,styles.sub]}>\n                                                <Text>{value.Teacher}</Text>\n                                            </View>\n                                        </View>\n                                    )\n                                })\n                            }\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.subject,styles.sub,{textAlign:\"center\"}]}>\n                                    <Text>First Term Average</Text>\n                                </View>\n                                \n                                <View style={[styles.seq,styles.sub]}>\n                                    <Text>1000</Text>\n                                </View>\n                                <View style={[styles.seq,styles.sub]}>\n                                    <Text>1000</Text>\n                                </View>\n                                <View style={[styles.Avg,styles.sub]}>\n                                    <Text>2000</Text>\n                                </View>\n                                    <View style={[styles.coef,styles.sub]}>\n                                        <Text>200</Text>\n                                    </View>\n                                <View style={[styles.Avg,styles.sub]}>\n                                    <Text>3000</Text>\n                                </View>\n                                <View style={[{width:\"280px\",textAlign:\"center\"},styles.sub]}>\n                                    <Text></Text>\n                                </View>\n                                \n                            </View>\n\n                            {/* <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.subject,styles.sub]}>\n                                    <Text>Second Term Average</Text>\n                                </View>\n                                \n                                <View style={[styles.seq,styles.sub]}>\n                                    <Text>1000</Text>\n                                </View>\n                                <View style={[styles.seq,styles.sub]}>\n                                    <Text>1000</Text>\n                                </View>\n                                <View style={[styles.Avg,styles.sub]}>\n                                    <Text>2000</Text>\n                                </View>\n                                    <View style={[styles.coef,styles.sub]}>\n                                        <Text>200</Text>\n                                    </View>\n                                <View style={[styles.Avg,styles.sub]}>\n                                    <Text>3000</Text>\n                                </View>\n                                <View style={[{width:\"230px\"},styles.sub]}>\n                                    <Text></Text>\n                                </View>\n                            </View> */}\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.subject,styles.sub,{textAlign:\"center\"}]}>\n                                    <Text>Academic Conduct</Text>\n                                </View>\n                                \n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Class Profile</Text>\n                                </View>\n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Class Average</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"30px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>10.5</Text>\n                                </View>\n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Student Average</Text>\n                                </View>\n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>13.5</Text>\n                                </View>\n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"100px\",padding:\"3px\"}]}>\n                                    <Text>Total Absence(Hrs)</Text>\n                                </View>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"40px\",padding:\"3px\"}]}>\n                                    <Text>1</Text>\n                                </View>\n                                \n                                <View style={[{width:\"70px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Success Rate</Text>\n                                </View>\n                                <View style={[{width:\"30px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>80.90%</Text>\n                                </View>\n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Position</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"30px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>1st</Text>\n                                </View>\n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>out of</Text>\n                                </View>\n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>25</Text>\n                                </View>\n                            </View>\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"100px\",padding:\"3px\"}]}>\n                                    <Text>Justified Absence(Hrs)</Text>\n                                </View>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"40px\",padding:\"3px\"}]}>\n                                    <Text>1</Text>\n                                </View>\n                                \n                                <View style={[{width:\"70px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Failed Rate</Text>\n                                </View>\n                                <View style={[{width:\"30px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>10.90%</Text>\n                                </View>\n                                \n                                <View style={[{width:\"355px\",textAlign:\"center\",padding:\"3px\"},styles.sub,styles.headingAcademic]}>\n                                    <Text>Principal Remark</Text>\n                                </View>\n                                \n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"100px\",padding:\"3px\"}]}>\n                                    <Text>Unjustified Absence(Hrs)</Text>\n                                </View>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"40px\",padding:\"3px\"}]}>\n                                    <Text>1</Text>\n                                </View>\n                                \n                                <View style={[{width:\"70px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Top Average</Text>\n                                </View>\n                                <View style={[{width:\"30px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>1.90%</Text>\n                                </View>\n                                \n                                <View style={[{width:\"355px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>PASSED</Text>\n                                </View>\n                                    \n                                \n                            </View>\n                        </View>\n\n                        <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"140px\",padding:\"3px\"}]}>\n                                    <Text></Text>\n                                </View>\n                                \n                                \n                                <View style={[{width:\"70px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Last Average</Text>\n                                </View>\n                                <View style={[{width:\"30px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>0.90%</Text>\n                                </View>\n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub,styles.headingAcademic]}>\n                                    <Text>Target Evaluation</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"230px\",textAlign:\"center\",padding:\"3px\"},styles.sub,styles.headingAcademic]}>\n                                    <Text>Assesment Type</Text>\n                                </View>\n                                \n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"140px\",padding:\"3px\"}]}>\n                                    <Text></Text>\n                                </View>\n                                \n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Academic Work</Text>\n                                </View>\n                                \n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>knowledge</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"230px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Test = </Text>\n                                </View>\n                                \n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"140px\",padding:\"3px\"}]}>\n                                    <Text>Class Master/Class Mistress Name</Text>\n                                </View>\n                                \n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Keep up!!!</Text>\n                                </View>\n                                \n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>skill</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"230px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Ftse</Text>\n                                </View>\n                                \n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"140px\",padding:\"3px\"}]}>\n                                    <Text>Mr Noubissie Landry</Text>\n                                </View>\n                                \n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text></Text>\n                                </View>\n                                \n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Competence</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"230px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>IA</Text>\n                                </View>\n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"240px\",padding:\"3px\"}]}>\n                                    <Text>For Parent or Guidance use Only</Text>\n                                </View>\n                                \n                                \n                                \n                                \n                                <View style={[{width:\"355px\",textAlign:\"center\",padding:\"3px\"},styles.sub,styles.headingAcademic]}>\n                                    <Text>REMARK</Text>\n                                </View>\n                                \n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"140px\",padding:\"3px\"}]}>\n                                    <Text>Parent or guidance's Name</Text>\n                                </View>\n                                \n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Mr Enow Takang</Text>\n                                </View>\n                                \n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Not Acquired</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"40px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>00-9.9</Text>\n                                </View>\n                                <View style={[{width:\"190px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>THE PRINCIPAL</Text>\n                                </View>\n                                \n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"140px\",padding:\"3px\"}]}>\n                                    <Text>Parent or Guidance's Observation</Text>\n                                </View>\n                                \n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text> </Text>\n                                </View>\n                                \n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>In course of Acquisition</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"40px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>10-13.9</Text>\n                                </View>\n                                <View style={[{width:\"190px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text></Text>\n                                </View>\n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"140px\",padding:\"3px\"}]}>\n                                    <Text>Contact Number</Text>\n                                </View>\n                                \n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text></Text>\n                                </View>\n                                \n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Acquired</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"40px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>14-17.9</Text>\n                                </View>\n                                <View style={[{width:\"190px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text></Text>\n                                </View>\n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"140px\",padding:\"3px\"}]}>\n                                    <Text>Done in _____________ the </Text>\n                                </View>\n                                \n                                <View style={[{width:\"100px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>09/10/2020 19:45</Text>\n                                </View>\n                                \n                                \n                                <View style={[{width:\"125px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>Excellent</Text>\n                                </View>\n                                    \n                                <View style={[{width:\"40px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text>18.0-20.0</Text>\n                                </View>\n                                <View style={[{width:\"190px\",textAlign:\"center\",padding:\"3px\"},styles.sub]}>\n                                    <Text></Text>\n                                </View>\n                            </View>\n\n                            <View style={[styles.subjectColorHead,styles.subjectContainer]}>\n                                <View style={[styles.sub,{textAlign:\"center\",width:\"595px\",padding:\"3px\"}]}>\n                                    <Text>The report should be handed down to parent or Guidance for Endorsement </Text>\n                                </View>\n                                \n                                \n                            </View>\n                    </Page>\n                    </React.Fragment>\n                       )\n                    })}\n        </Document>\n        </>\n    )\n}\n\n\n\n\nexport const ReportCard = ()=>{\n    const [classReportState, setClassState] = useState([1,2,3,4])\n    const initialValue = {\n        year:{id:1,year:\"2019\"},\n        clas:{id:1,clas:\"Form 1\"},\n        exam:{id:1,exam:\"1seq\"},\n    }\n    let onsubmit = (values)=>{\n        console.log(\"values:\",values)\n        setClassState([1,2,3,4,5])\n    }\n    let onreset = ()=>{\n        \n    }\n    let validationSchema = Yup.object({\n        year: Yup.string().nullable().required().min(4),\n        clas:Yup.string().nullable().required().trim(),\n        exam: Yup.string().nullable().required().trim(),\n    })\n    return(\n        <>\n        {console.log(\"class1\",classReportState)}\n            <Formik\n                initialValues={initialValue}\n                onSubmit={onsubmit}\n                onReset={onreset}\n                validationSchema = {validationSchema}\n            >\n            {\n                ({\n                    values,\n                    errors,\n                    touched,\n                    isValid,\n                    dirty,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    setFieldValue,\n                    getFieldProps\n                })=>{\n                    return(\n                        <Form>\n                            <Grid container  xs={12} item spacing={1} style={{position:\"sticky\",top:\"70px\",padding:\"4px\"}}>\n                            <Grid item xs={12} sm={6} md={3}  >\n                                    <Field\n                                        \n                                        component={Autocomplete}\n                                        // {...getFieldProps(\"Gender\")}\n                                        value={values.year}\n                                        onBlur={handleBlur}\n                                        onChange={(e,selectedOption )=>\n                                            {setFieldValue(\"year\", selectedOption)\n                                            //  setFieldError(\"Gender\",errors.Gender)\n                                                }\n                                        }\n                                        \n                                        // inputValue={values.Gender.title}\n                                        options={year}\n                                        name=\"year\"\n                                        id=\"year\"\n                                        \n                                        getOptionSelected = {(option,value)=> option.id == value.id}\n                                        getOptionLabel={option => option.year}\n                                        renderInput={params => (\n                                            <>\n                                            \n                                            <Field \n                                                component={TextField}\n                                                {...params}\n                                                \n                                                name=\"year\"\n                                                \n                                                error={errors.hasOwnProperty(\"year\") && touched.hasOwnProperty(\"year\") ? true : false }\n                                                label={errors.hasOwnProperty(\"year\") && touched.hasOwnProperty(\"year\") ? errors.year : \"year\" }\n                                                variant=\"filled\"\n                                            />\n                                            </>\n                                        \n                                        )}\n\n                                        \n                                    />\n\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={3} >\n                                    <Field\n                                        \n                                        component={Autocomplete}\n                                        // {...getFieldProps(\"Gender\")}\n                                        value={values.clas}\n                                        onBlur={handleBlur}\n                                        onChange={(e,selectedOption )=>\n                                            {setFieldValue(\"clas\", selectedOption)\n                                            //  setFieldError(\"Gender\",errors.Gender)\n                                                }\n                                        }\n                                        \n                                        // inputValue={values.Gender.title}\n                                        options={clas}\n                                        name=\"clas\"\n                                        id=\"clas\"\n                                        \n                                        getOptionSelected = {(option,value)=> option.id == value.id}\n                                        getOptionLabel={option => option.clas}\n                                        renderInput={params => (\n                                            <>\n                                            \n                                            <Field \n                                                component={TextField}\n                                                {...params}\n                                                \n                                                name=\"clas\"\n                                                \n                                                error={errors.hasOwnProperty(\"clas\") && touched.hasOwnProperty(\"clas\") ? true : false }\n                                                label={errors.hasOwnProperty(\"clas\") && touched.hasOwnProperty(\"clas\") ? errors.clas : \"class\" }\n                                                variant=\"filled\"\n                                            />\n                                            </>\n                                        \n                                        )}\n\n                                        \n                                    />\n\n                                </Grid>\n\n\n                                <Grid item xs={12} sm={6} md={3} >\n                                    <Field\n                                        \n                                        component={Autocomplete}\n                                        // {...getFieldProps(\"Gender\")}\n                                        value={values.exam}\n                                        onBlur={handleBlur}\n                                        onChange={(e,selectedOption )=>\n                                            {setFieldValue(\"exam\", selectedOption)\n                                            //  setFieldError(\"Gender\",errors.Gender)\n                                                }\n                                        }\n                                        \n                                        // inputValue={values.Gender.title}\n                                        options={exam}\n                                        name=\"exam\"\n                                        id=\"exam\"\n                                        \n                                        getOptionSelected = {(option,value)=> option.id == value.id}\n                                        getOptionLabel={option => option.exam}\n                                        renderInput={params => (\n                                            <>\n                                            <Field \n                                                component={TextField}\n                                                {...params}\n                                                \n                                                name=\"exam\"\n                                                \n                                                error={errors.hasOwnProperty(\"exam\") && touched.hasOwnProperty(\"exam\") ? true : false }\n                                                label={errors.hasOwnProperty(\"exam\") && touched.hasOwnProperty(\"exam\") ? errors.exam : \"exam\" }\n                                                variant=\"filled\"\n                                            />\n                                            </>\n                                        )}\n\n                                        \n                                    />\n                                    \n\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={3} >\n                                    <Button style={{margin:\"0 2% 0 0\"}} variant=\"contained\" disabled={!(dirty && isValid )} color=\"primary\" type=\"submit\"  >submit</Button>    \n                                    <Button  type=\"reset\" variant=\"contained\">reset</Button>\n                                </Grid>\n\n                                \n                                {/* <Grid xs={12} sm={6} md={2}>\n                                    <PDFDownloadLink \n                                        document={<ReportCardTemplate/>}\n                                        fileName={\"className\"}\n                                        >\n                                            {({ blob, url, loading, error }) => (loading ? 'Loading document...' : \"<CloudDownloadIcon />\")}\n                                    </PDFDownloadLink>\n                                </Grid> */}\n                            </Grid>\n                            \n\n                        </Form>\n                    )\n                }\n            }\n            </Formik>\n            \n            {classReportState.length == 5 ? <PDFViewer style={{width:\"100%\", height:\"100vh\"}}>\n                <ReportCardTemplate data2={classReportState}/>\n            </PDFViewer> : <PDFViewer style={{width:\"100%\", height:\"100vh\"}}>\n                <ReportCardTemplate />\n            </PDFViewer>}\n        </>\n    )\n}","import React from \"react\"\nimport {StudentPersonalDetails} from \"./studentPersonalDetails\"\nimport {ReportCardTemplate} from \"components/modules/Admin/ReportCard\"\nimport Grid from \"@material-ui/core/Grid\"\n\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport {PDFViewer,PDFDownloadLink} from \"@react-pdf/renderer\"\n\nexport const StudentDetails = ()=>{\n\n    return(\n        <React.Fragment>\n        <StudentPersonalDetails />   \n        <Grid item xs={12} sm={6} md={2}>\n            <PDFDownloadLink \n                document={<ReportCardTemplate/>}\n                fileName={\"className\"}\n                >\n                    {({ blob, url, loading, error }) => (loading ? 'Loading document...' : \"<CloudDownloadIcon />\")}\n            </PDFDownloadLink>\n        </Grid>\n            <PDFViewer style={{width:\"100%\", height:\"100vh\"}}>\n                <ReportCardTemplate />\n            </PDFViewer>\n        </React.Fragment>\n    )\n}","// import StudentDatabase from \"../../database/studentDatabase\"\nimport React,{useState} from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport useSWR from \"swr\"\nimport Table from \"@material-ui/core/Table\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport TableHead from \"@material-ui/core/TableHead\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport Card from \"@material-ui/core/Card\"\nimport TableContainer from '@material-ui/core/TableContainer';\n\nimport {Link} from \"react-router-dom\"\n\n\nexport const StudentTable  = ()=>{\n\n    let {data:AllStudents, error:AllStudentsError} = useSWR(\"/api/studentapi?AllstudentInSChool=true\")\n    let [AllStudentsER, setStudentState] = useState(undefined)\n    \n        \n    let handleRefresh = async ()=>{\n        \n        let data = await fetch(\"/api/studentapi?AllstudentInSChool=true\")\n        let responces = await data.json()\n        setStudentState(responces)\n        AllStudents = AllStudentsER\n        \n    }\n        \n    //     fetch(\"/api/studentapi?AllstudentInSChool=true\",{\n    //                 method:\"GET\"\n    //             }).then((data)=>data.json()).then((student)=>{\n    //                 AllStudents = student\n    //                 console.log(\"data daata::\",student)\n    //             })\n            \n       \n    //     // // AllStudentsError = result.error\n    //     console.log(\"allStudents:\",AllStudents)\n    // },[AllStudents])\n\n    let tablehead = [\n        {header:\"number\"},\n        {header:\"Admission id\"},\n        {header:\"Family Name\"},\n        {header:\"Given Name\"},\n        {header:\"DOB\"},\n        {header:\"Gender\"},\n        {header:\"Date of Enrollment\"},\n        {header:\"Age\"},\n        {header:\"Religion\"},\n        {header:\"Blood Group\"},\n        {header:\"Email\"},\n        // {header:\"Section\"},\n        {header:\"PhoneNumber\"},\n        // {header:\"Student Address\"},\n        // {header:\"short biography\"},\n        // {header:\"student Picture\"},\n        // {header:\"Father Name\"},\n        // {header:\"Father Occupation\"},\n        // {header:\"Father Address\"},\n        // {header:\"Father Contact\"},\n        // {header:\"Mother Name\"},\n        // {header:\"Mother Name\"},\n        // {header:\"Mother Occupation\"},\n        // {header:\"Mother Address\"},\n        // {header:\"Mother Contact\"}\n\n    ]\n\n    return(\n        <React.Fragment>\n                <Button onClick = {handleRefresh}>Refresh</Button>\n                <div>\n                    <div className=\"mt-4 mb-4 ml-3\">\n                        <h3 className=\"whitesnow mr-3 p-1 \">Student Details</h3>\n                    </div>\n                    <Card className=\"m-3\">\n                        <TableContainer>\n                            <Table stickyHeader size=\"small\">\n                                <TableHead>\n                                    <TableRow className=\"bg-dark\">\n                                        {tablehead.map((data,index)=>\n                                            {\n                                                return <TableCell key={index}>{data.header}</TableCell>\n                                            }\n                                            )\n                                        }\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    \n                                    {AllStudents ? AllStudents.map((data,index)=>{\n                                        return(\n                                            <TableRow hover key={data.AdmissionID}>\n                                                <TableCell>\n                                                    <Link as={`/student/studentDetails?AdmissionID=${data.AdmissionID}&&studentToken`} href={`/student/studentDetails?AdmissionID=${data.AdmissionID}&&studentToken`}>\n                                                        <a>\n                                                            {index}\n                                                        </a>\n                                                    </Link>\n                                                </TableCell>\n                                                <TableCell>\n                                                    <Link as={`/student/studentDetails?AdmissionID=${data.AdmissionID}&&studentToken`} href={`/student/studentDetails?AdmissionID=${data.AdmissionID}&&studentToken`}>\n                                                        <a>\n                                                            {data.AdmissionID}\n                                                        </a>\n                                                    </Link>\n                                                </TableCell>\n                                                <TableCell>\n                                                <Link as={`/student/studentDetails?AdmissionID=${data.AdmissionID}&&studentToken`} href={`/student/studentDetails?AdmissionID=${data.AdmissionID}&&studentToken`}>\n                                                        <a>\n                                                            {data.familyname}\n                                                        </a>\n                                                    </Link>\n                                                    \n                                                </TableCell>\n                                                <TableCell>{data.givenname}</TableCell>\n                                                <TableCell>{new Date(data.dateofbirth).toLocaleDateString()}</TableCell>\n                                                \n                                                <TableCell>{data.Gender.gender}</TableCell>\n                                                <TableCell>\n                                                    <div>{new Date(data.dateOfEnrollment).toLocaleDateString()}</div>\n                                                    <div>{new Date(data.dateOfEnrollment).toLocaleTimeString()}</div>\n                                                </TableCell>\n                                                <TableCell>{new Date().getFullYear() - new Date(data.dateofbirth).getFullYear() }</TableCell>\n                                                <TableCell>{data.religion}</TableCell>\n                                                <TableCell>{data.bloodgroup}</TableCell>\n                                                <TableCell>{data.email}</TableCell>\n                                                {/* <TableCell>{data.Section.section}</TableCell> */}\n                                                <TableCell>{data.phonenumber}</TableCell>\n                                                {/* <TableCell>{data.StudentAddress}</TableCell> */}\n                                            </TableRow>\n                                        )\n                                    })\n                                    :null\n                                }\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Card>\n                </div>\n            \n        </React.Fragment>\n    )\n}\n// export async function getStaticProps(){\n//     return{\n//         props:{\n            \n//         }\n//     }\n// }\n","import React,{useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\"\nimport {Field,Formik,Form,ErrorMessage, FastField} from \"formik\"\n// import * as Yup from \"yup\"\n\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\n// import parse from 'autosuggest-highlight/parse';\n// import match from 'autosuggest-highlight/match';\nimport AccountCircle from \"@material-ui/icons/AccountCircle\"\n// import WcIcon from '@material-ui/icons/Wc';\n// import CalendarTodayIcon from '@material-ui/icons/CalendarToday'\nimport HomeIcon from '@material-ui/icons/Home';\nimport AlternateEmail from '@material-ui/icons/AlternateEmail';\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\nimport ContactPhoneIcon from '@material-ui/icons/ContactPhone';\nimport LocalLibraryIcon from '@material-ui/icons/LocalLibrary';\nimport WorkIcon from '@material-ui/icons/Work';\n\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\n// import {errorFieldMessage} from \"../../components/error/errorFieldMessage\"\nimport Button  from '@material-ui/core/Button';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\n// import GenderDatabase from \"../../database/GeneralDatabase\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\nimport useSWR from \"swr\"\n\nimport {ValidationSchema, initialValue} from \"../studentFormschema\"\n\nimport {Wrapper } from \"components/modules/Admin/Teacher/styles\"\nimport defaultImage from \"assets/defaultImages/defaultImage.png\"\nimport {UrlTitle} from \"components/common\"\n\n// let genderdata = [{id:1,gender:\"Male\"},{id:2,gender:\"Female\"},{id:3,gender:\"unknow\"}]\nlet religiondata =[{id:1,doctrine:\"Christain\"},{id:2,doctrine:\"Muslim\"},{id:3,doctrine:\"Pegan\"},{id:4,doctrine:\"Traditionalist\"}]\nlet bloodgroupdata =[{id:1,group:\"A+\"},{id:2,group:\"A-\"},{id:3,group:\"B+\"},{id:4,group:\"B-\"},{id:5,group:\"AB\"},{id:6,group:\"0+\"},{id:7,group:\"O-\"}]\n// let sectiondata =[{section:\"English\"},{section:\"FRENCH\"},{section:\"CHINESSE\"},{section:\"GERMAN\"}]\n\n\nlet initialStateValues = {\n    \n    imagesizeError:\"none\",\n    imagedataBack:null,\n    filename:\"\"\n}\nexport const  AdmissionForm = ({genderFindAll}) => {\n\n    \n\n    let [state , setstate] = useState(initialStateValues)\n    // let {data:sectionGetData, error:sectionGetError} =  useSWR(\"/api/sectionapi\")\n    let {data:genderGetData, error:genderGetError} =  useSWR(\"/api/generalapi?gender=true\")\n    // let sectiondata = (sectionGetData ? sectionGetData.length != 0 && sectionGetData :undefined) || (sectionFindAll.length == 0 ? [{id_:\"\",section:\"\", languages:\"\"}]: sectionFindAll)\n\n    // let genderdata = (genderGetData ? genderGetData.length != 0 && genderGetData :undefined) || (genderFindAll.length == 0 ? [{id:\"\",gender:\"\"}]: genderFindAll)\n    \n    let genderdata = []\n    \n    \n    // const classes = useStyles();\n\n    let initialValues=initialValue(genderdata,bloodgroupdata,religiondata)\n\nlet onsubmit = async (values,submittingProps)=>{\n    let data = await fetch(\"/api/studentapi\",{\n        method:\"POST\",\n        body:JSON.stringify({\n            values,\n            imagedataBack: state.imagedataBack\n        })\n     })\n     console.log(\"data::\",data.status)\n     if(data.status==409){\n         alert(`${values.FamilyName} ${values.GivenName} with student id ${values.AdmissionID} exist already`)\n     }\n     if(data.status==415){\n        alert(`${window.navigator.userAgent} \\n stop trying out attacks on my system`)\n    }\n    else if(data.status ==200){\n        setstate((prev)=>({\n            ...initialStateValues\n        }))\n        submittingProps.resetForm()\n    }\n     \n\n}\n    // let onreset = ()=>{\n    //     setstate((prev)=>({\n    //         ...initialStateValues\n    //     }))\n    // }\n  \n\n  return(\n   \n\n    <Wrapper>\n      <UrlTitle>\n          Teacher\n      </UrlTitle>\n          \n            <Formik\n                initialValues={initialValues}\n                validationSchema={ValidationSchema}\n                onSubmit = {onsubmit}\n                // onReset = {onreset}\n                // enableReinitialize\n                >\n                    {\n                        ({\n                            values,\n                            getFieldProps,\n                            setFieldValue,\n                            setFieldError,\n                            errors,\n                            validateOnBlur,\n                            handleSubmit,\n                            handleBlur,\n                            handleChange,\n                            isValid,\n                            dirty,\n                            touched\n                        })=>{\n                            return(\n                        \n                            <Form>\n                            <Card  className=\"whitesnow p-2 pr-0 mb-4 ml-3 mr-3\">\n                            <h5 className=\"text-info\">Student Information</h5>\n                                <div className=\"\">\n                                    <Grid container spacing={2}>\n                                    <Grid container item xs={12} spacing={2} className=\"bg-secondary profileImageContainer \" >\n                                            <Grid item xs={12}  sm={6}  className=\"text-center label_box\">\n                                                    <label htmlFor=\"image\" className=\"w-100\">\n                                                        <AddCircleOutlineIcon fontSize=\"large\" />\n                                                    </label>\n                                                    <Field\n                                                        id=\"image\"\n                                                        component={Input}\n                                                        className=\"display_none\"\n                                                        variant=\"filled\"\n                                                        type=\"file\"\n                                                        accept=\".jpg, .jpeg, .png\"\n                                                        // multiple\n                                                        onChange={(event)=>{\n                                                            // handleChange\n                                                            let fileList = event.target.files\n\n                                                            const formData = new FormData()\n                                                            \n                                                            for(const file of fileList){\n                                                                const name = file.name ? file.name : 'NOT SUPPORTED';\n                                                                // Not supported in Firefox for Android or Opera for Android.\n                                                                const type = file.type ? file.type : 'NOT SUPPORTED';\n                                                                // Unknown cross-browser support.\n                                                                const size = file.size ? file.size : 'NOT SUPPORTED';\n                                                                        if (file.type && file.type.indexOf('image') === -1) {\n                                                                            console.log('File is not an image.', file.type, file,file.type.indexOf('image'));\n                                                                            return;\n                                                                        }\n                                                                        if(file.size > 1000000){\n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                filename:null,\n                                                                                imagedataBack:null,\n                                                                                imagesizeError:\"inline\"\n                                                                            }))\n                                                                            return\n                                                                        }\n                                                                        const reader = new FileReader();\n                                                                        // reader.onload\n                                                                        // reader.onloadend\n                                                                        // reader.onloadstart\n                                                                        // reader.onabort\n                                                                        // reader.onerror\n                                                                        // reader.onprogress\n                                                                        \n                                                                        reader.addEventListener('load', (event) => {\n                                                                            \n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                imagedataBack:event.target.result,\n                                                                                filename:file.name,\n                                                                                imagesizeError:\"none\"\n                                                                            }))\n                                                                            console.log(\"filename::\",state.filename)\n                                                                            \n                                                                        });\n                                                                        reader.readAsDataURL(file)\n                                                                        formData.append(\"file\",file)\n                                                                        console.log(\"formData::\", formData)\n                                                                    \n                                                            }\n                                                        }}\n                                                        />\n                                                        \n                                                        \n                                                </Grid>\n                                                <Grid item xs={12}  sm={6} className=\"bg-info text-center\" >\n                                                    {/* <FastField */}\n                                                    <TextField \n                                                            // component={TextField}\n                                                            // error={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? true : false }\n                                                            \n                                                            // label={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? errors.imageholder : \"image\" }\n                                                            disabled\n                                                            name=\"imageholder\"\n                                                            id=\"imageholder\"\n                                                            className=\"w-100 bg-light text-danger\"\n                                                            // {...getFieldProps(\"imageholder\")}\n                                                            value={state.filename} />\n                                                    <h4 style={{display:state.imagesizeError,color:\"red\"}} >Image size less than 1MB</h4>\n                                                    <Field\n                                                        width=\"200cm\"\n                                                        height=\"200cm\"\n                                                        className=\"image_box bg-secondary\"\n                                                        // onerror=\"this.onerror=null;this.src='./default.jpg';\"\n                                                        // component={(params)=><img {...params} src={state}/>}\n                                                        component={params=>{\n                                                        if(state.imagedataBack){\n                                                            return <img {...params} src={state.imagedataBack}/>\n                                                        }\n                                                        else{\n                                                            return <img  {...params} src={defaultImage}/>\n                                                        }\n                                                        }\n                                                    }\n                                                        />\n\n                                                    \n                                                </Grid>\n                                                \n                                        </Grid>\n                                        <Grid container item xs={12} spacing={2} >\n                                            <React.Fragment>\n                                                <Grid item xs={12} sm={6} >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? true : false }\n                                                        {...getFieldProps(\"FamilyName\")}\n                                                        label={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? errors.FamilyName : \"Family Name\" }\n                                                        value={values.FamilyName}\n                                                        name=\"FamilyName\"\n                                                        id=\"FamilyName\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <AccountCircle/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                <Grid item xs={12} sm={6}  >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? true : false }\n                                                        {...getFieldProps(\"GivenName\")}\n                                                        label={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? errors.GivenName : \"Given Name\" }\n                                                        value={values.GivenName}\n                                                        name=\"GivenName\"\n                                                        id=\"GivenName\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <AccountCircle/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? true : false }\n                                                        {...getFieldProps(\"DateOfBirth\")}\n                                                        label={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? errors.DateOfBirth : \"Date Of Birth\" }\n                                                        value={values.DateOfBirth}\n                                                        name=\"DateOfBirth\"\n                                                        id=\"DateOfBirth\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"date\"\n                                                        InputLabelProps={{\n                                                            shrink:true\n                                                        }}\n                                                        \n                                                        />\n                                                </Grid>\n                                                <Grid item xs={12} sm={6} className=\"w-100\" >\n                                                    <Field\n                                                        \n                                                        component={Autocomplete}\n                                                        // {...getFieldProps(\"Gender\")}\n                                                        value={values.Gender}\n                                                        onBlur={handleBlur}\n                                                        onChange={(e,selectedOption )=>\n                                                            {setFieldValue(\"Gender\", selectedOption)\n                                                            //  setFieldError(\"Gender\",errors.Gender)\n                                                                }\n                                                        }\n                                                        \n                                                        // inputValue={values.Gender.title}\n                                                        options={genderdata}\n                                                        name=\"Gender\"\n                                                        id=\"Gender\"\n                                                        \n                                                        getOptionSelected = {(option,value)=> option.gender == value.gender}\n                                                        getOptionLabel={option => option.gender}\n                                                        renderInput={params => (\n                                                            <>\n                                                            \n                                                            <Field \n                                                            component={TextField}\n                                                            {...params}\n                                                            \n                                                            name=\"Gender\"\n                                                            error={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? true : false }\n                                                            label={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? errors.Gender : \"Gender\" }\n                                                            variant=\"filled\"    \n                                                            \n                                                        />\n                                                            </>\n                                                        \n                                                        )}\n\n                                                        \n                                                    />\n                                                        \n                                                </Grid>\n                                                {console.log(\"values::\",values)}\n                                            </React.Fragment>\n                                        </Grid>\n\n                                        {/* ROW 2 --- STARTS HERE --- */}\n                                        <Grid container item xs={12} spacing={2}>\n                                            <React.Fragment>\n                                                <Grid item xs={12} sm={6} >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"StudentAddress\") && touched.hasOwnProperty(\"StudentAddress\") ? true : false }\n                                                        {...getFieldProps(\"StudentAddress\")}\n                                                        label={errors.hasOwnProperty(\"StudentAddress\") && touched.hasOwnProperty(\"StudentAddress\") ? errors.StudentAddress : \"StudentAddress\" }\n                                                        value={values.StudentAddress}\n                                                        name=\"StudentAddress\"\n                                                        id=\"StudentAddress\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <HomeIcon/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                <Grid item xs={12} sm={6}  >\n                                                    <Field\n                                                            \n                                                            component={Autocomplete}\n                                                            // {...getFieldProps(\"Gender\")}\n                                                            value={values.Religion}\n                                                            defaultValue={values.Religion}\n                                                            onBlur={handleBlur}\n                                                            onChange={(e,selectedOption )=>\n                                                                {setFieldValue(\"Religion\", selectedOption)\n                                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                                    }\n                                                            }\n                                                            \n                                                            // inputValue={values.Gender.title}\n                                                            options={religiondata}\n                                                            name=\"Religion\"\n                                                            id=\"Religion\"\n                                                            getOptionSelected = {(option,value)=> option.doctrine == value.doctrine}\n                                                            getOptionLabel={option => option.doctrine}\n                                                            renderInput={params => (\n                                                                <>\n                                                                \n                                                                <Field \n                                                                component={TextField}\n                                                                {...params}\n                                                                \n                                                                name=\"Religion\"\n                                                                error={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? true : false }\n                                                                label={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? errors.Religion : \"Religion\" }\n                                                                variant=\"filled\"    \n                                                                \n                                                            />\n                                                                </>\n                                                            \n                                                            )}\n\n                                                            \n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={12} sm={6}  >\n                                                        <Field\n                                                                \n                                                                component={Autocomplete}\n                                                                // {...getFieldProps(\"Gender\")}\n                                                                value={values.BloodGroup}\n                                                                defaultValue={values.BloodGroup}\n                                                                onBlur={handleBlur}\n                                                                onChange={(e,selectedOption )=>\n                                                                    {setFieldValue(\"BloodGroup\", selectedOption)\n                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                        }\n                                                                }\n                                                                \n                                                                // inputValue={values.Gender.title}\n                                                                \n                                                                options={bloodgroupdata}\n                                                                name=\"BloodGroup\"\n                                                                id=\"BloodGroup\"\n                                                                getOptionSelected={(option,value)=>option.group == value.group}\n                                                                getOptionLabel={option => option.group}\n                                                                renderInput={params => (\n                                                                    <>\n                                                                    \n                                                                    <Field \n                                                                    component={TextField}\n                                                                    {...params}\n                                                                    \n                                                                    name=\"BloodGroup\"\n                                                                    error={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? true : false }\n                                                                    label={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? errors.BloodGroup : \"BloodGroup\" }\n                                                                    variant=\"filled\"    \n                                                                    \n                                                                />\n                                                                    </>\n                                                                \n                                                                )}\n\n                                                                \n                                                            />\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? true : false }\n                                                        {...getFieldProps(\"eMail\")}\n                                                        label={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? errors.eMail : \"email\" }\n                                                        value={values.eMail}\n                                                        name=\"eMail\"\n                                                        id=\"eMail\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"email\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <AlternateEmail/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        \n                                                        />\n                                                </Grid>\n                                            \n                                            </React.Fragment>\n                                        <React.Fragment>\n                                        {/* <Grid item xs={12} sm={6} >\n                                            <Field\n                                                            \n                                                component={Autocomplete}\n                                                // {...getFieldProps(\"Gender\")}\n                                                value={values.section}\n                                                onBlur={handleBlur}\n                                                onChange={(e,selectedOption )=>\n                                                    {setFieldValue(\"section\", selectedOption)\n                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                        }\n                                                }\n                                                \n                                                // inputValue={values.Gender.title}\n                                                options={sectiondata}\n                                                name=\"section\"\n                                                id=\"section\"\n                                                getOptionSelected={(option, value) => option.section == value.section}\n                                                getOptionLabel={option => option.section}\n                                                renderInput={params => (\n                                                    <>\n                                                    \n                                                    <Field \n                                                        component={TextField}\n                                                        {...params}\n                                                        name=\"section\"\n                                                        error={errors.hasOwnProperty(\"section\") && touched.hasOwnProperty(\"section\") ? true : false }\n                                                        label={errors.hasOwnProperty(\"section\") && touched.hasOwnProperty(\"section\") ? errors.section : \"section\" }\n                                                        variant=\"filled\"    \n                                                        \n                                                    />\n                                                    </>\n                                                \n                                                )}\n\n                                                            renderOption={(option, { inputValue }) => {\n                                                            const matches = match(option.section, inputValue);\n                                                            const parts = parse(option.section, matches);\n                                                    \n                                                            return (\n                                                                <div>\n                                                                {parts.map((part, index) => (\n                                                                    <span key={index} >\n                                                                    {part.text}\n                                                                    </span>\n                                                                ))}\n                                                                </div>\n                                                            );\n                                                            }}\n                                                        />\n                                                    </Grid> */}\n                                        <Grid item xs={12} sm={6}  >\n                                                    \n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"AdmissionID\") && touched.hasOwnProperty(\"AdmissionID\") ? true : false }\n                                                        {...getFieldProps(\"AdmissionID\")}\n                                                        label={errors.hasOwnProperty(\"AdmissionID\") && touched.hasOwnProperty(\"AdmissionID\") ? errors.AdmissionID : \"AdmissionID\" }\n                                                        value={values.AdmissionID}\n                                                        name=\"AdmissionID\"\n                                                        id=\"AdmissionID\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <FingerprintIcon/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        \n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                \n                                                <Grid item xs={12} sm={6}  >\n                                                    \n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"Phone\") && touched.hasOwnProperty(\"Phone\") ? true : false }\n                                                        {...getFieldProps(\"Phone\")}\n                                                        label={errors.hasOwnProperty(\"Phone\") && touched.hasOwnProperty(\"Phone\") ? errors.Phone : \"Phone\" }\n                                                        value={values.Phone}\n                                                        name=\"Phone\"\n                                                        id=\"Phone\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"tel\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <ContactPhoneIcon/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? true : false }\n                                                        {...getFieldProps(\"shortBio\")}\n                                                        label={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? errors.shortBio : \"shortBio\" }\n                                                        value={values.shortBio}\n                                                        name=\"shortBio\"\n                                                        id=\"shortBio\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"textArea\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <LocalLibraryIcon/> \n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                </Grid>\n                                                \n                                                \n                                                {console.log(\"values::\",values.image)}\n                                                \n                                            </React.Fragment>\n                                        </Grid>\n                                        \n\n\n                                    </Grid>\n                                </div>\n                            </Card> \n\n\n                            {/* Father Information */}\n                            <Card  className=\"whitesnow p-2 pr-0 mb-4 ml-3 mr-3\">\n                                <h5 className=\"text-info\">Father Information</h5>\n                                <Grid container item xs={12} spacing={2}>\n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"FatherName\") && touched.hasOwnProperty(\"FatherName\") ? true : false }\n                                                {...getFieldProps(\"FatherName\")}\n                                                label={errors.hasOwnProperty(\"FatherName\") && touched.hasOwnProperty(\"FatherName\") ? errors.FatherName : \"FatherName\" }\n                                                value={values.FatherName}\n                                                name=\"FatherName\"\n                                                id=\"FatherName\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <AccountCircle/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                               \n                                \n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"FatherOccupation\") && touched.hasOwnProperty(\"FatherOccupation\") ? true : false }\n                                                {...getFieldProps(\"FatherOccupation\")}\n                                                label={errors.hasOwnProperty(\"FatherOccupation\") && touched.hasOwnProperty(\"FatherOccupation\") ? errors.FatherOccupation : \"FatherOccupation\" }\n                                                value={values.FatherOccupation}\n                                                name=\"FatherOccupation\"\n                                                id=\"FatherOccupation\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <WorkIcon/>\n                                                        </InputAdornment> \n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                \n                                \n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"FatherAddress\") && touched.hasOwnProperty(\"FatherAddress\") ? true : false }\n                                                {...getFieldProps(\"FatherAddress\")}\n                                                label={errors.hasOwnProperty(\"FatherAddress\") && touched.hasOwnProperty(\"FatherAddress\") ? errors.FatherAddress : \"FatherAddress\" }\n                                                value={values.FatherAddress}\n                                                name=\"FatherAddress\"\n                                                id=\"FatherAddress\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <HomeIcon/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"FatherContact\") && touched.hasOwnProperty(\"FatherContact\") ? true : false }\n                                                {...getFieldProps(\"FatherContact\")}\n                                                label={errors.hasOwnProperty(\"FatherContact\") && touched.hasOwnProperty(\"FatherContact\") ? errors.FatherContact : \"FatherContact\" }\n                                                value={values.FatherContact}\n                                                name=\"FatherContact\"\n                                                id=\"FatherContact\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <ContactPhoneIcon/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                </Grid>\n                            </Card>\n\n                            {/*  Mother Information */}\n                            <Card  className=\"whitesnow p-2 pr-0 mb-4 ml-3 mr-3\">\n                                <h5 className=\"text-info\">Mother Information</h5>\n                                <Grid container item xs={12} spacing={2}>\n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"MotherName\") && touched.hasOwnProperty(\"MotherName\") ? true : false }\n                                                {...getFieldProps(\"MotherName\")}\n                                                label={errors.hasOwnProperty(\"MotherName\") && touched.hasOwnProperty(\"MotherName\") ? errors.MotherName : \"MotherName\" }\n                                                value={values.MotherName}\n                                                name=\"MotherName\"\n                                                id=\"MotherName\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <AccountCircle/>\n                                                        </InputAdornment> \n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                               \n                                \n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"MotherOccupation\") && touched.hasOwnProperty(\"MotherOccupation\") ? true : false }\n                                                {...getFieldProps(\"MotherOccupation\")}\n                                                label={errors.hasOwnProperty(\"MotherOccupation\") && touched.hasOwnProperty(\"MotherOccupation\") ? errors.MotherOccupation : \"MotherOccupation\" }\n                                                value={values.MotherOccupation}\n                                                name=\"MotherOccupation\"\n                                                id=\"MotherOccupation\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <WorkIcon/>\n                                                        </InputAdornment> \n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                \n                                \n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"MotherAddress\") && touched.hasOwnProperty(\"MotherAddress\") ? true : false }\n                                                {...getFieldProps(\"MotherAddress\")}\n                                                label={errors.hasOwnProperty(\"MotherAddress\") && touched.hasOwnProperty(\"MotherAddress\") ? errors.MotherAddress : \"MotherAddress\" }\n                                                value={values.MotherAddress}\n                                                name=\"MotherAddress\"\n                                                id=\"MotherAddress\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <HomeIcon/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"MotherContact\") && touched.hasOwnProperty(\"MotherContact\") ? true : false }\n                                                {...getFieldProps(\"FatherContact\")}\n                                                label={errors.hasOwnProperty(\"MotherContact\") && touched.hasOwnProperty(\"MotherContact\") ? errors.MotherContact : \"MotherContact\" }\n                                                value={values.MotherContact}\n                                                name=\"MotherContact\"\n                                                id=\"MotherContact\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <ContactPhoneIcon/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                </Grid>\n                            </Card>\n                            <Card className=\"nobackground mb-4 ml-3 mr-3\">\n                                <Grid container item xs={12}>\n                                    <Grid container item xs={12} spacing={2}>\n                                            <Grid sm={12} item className=\"text-center\">\n                                                {isValid && dirty && state.imagedataBack ? <Button  type=\"submit\" className=\"bg-danger p-2 pl-4 pr-4 m-2\">submit</Button>:<Button disabled  type=\"submit\" className=\"bg-secondary p-2 p-2 pl-4 pr-4 m-2\">submit</Button>}\n                                                <Button type=\"reset\" className=\"bg-warning p-2 pl-4 pr-4 m-2\">reset</Button>\n                                            </Grid> \n                                        </Grid>\n                                </Grid>\n                            </Card>\n        \n                            </Form>\n                            )\n                        }\n                    }\n                   \n                </Formik>\n          \n        </Wrapper>\n        \n  );\n}\n\n","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    padding:1%;\n    background-color:rgb(236, 236, 236);\n    form{\n        padding:1%;\n    }\n    h3{\n        background-color:white;\n        padding:1%;\n        margin:1% 0  1% 0;\n    }\n    label{\n        margin:0 1% 0 1%;\n    }\n    #subjectOffered{\n        padding:1% 0 1% 0;\n        background-color:rgb(236, 236, 236);\n    }\n`","import React,{useState} from \"react\"\n\n\nimport Button from \"@material-ui/core/Button\"\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\"\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\nimport * as Yup from \"yup\"\nimport {Formik,Field,Form} from \"formik\"\nimport Card from \"@material-ui/core/Card\"\nimport {Wrapper} from \"./styles\"\n\nconst year = [\n    {id:1,year:\"2019\"},\n    {id:2,year:\"2020\"},\n    {id:3,year:\"2021\"}\n]\n\nconst clas = [\n    {id:1,clas:\"Form 1\"},\n    {id:2,clas:\"Form 2\"},\n    {id:3,clas:\"Form 3\"}\n]\n\nconst student = [\n    {id:1,student:\"Peter\",name:\"john\"},\n    {id:2,student:\"John\",name:\"go\"},\n    {id:3,student:\"Samuel\",name:\"java\"}\n]\nconst subject = [\n    {id:1,subject:\"physic\"},\n    {id:2,subject:\"Biology\"},\n    {id:3,subject:\"chemistry\"},\n    {id:1,subject:\"physic\"},\n    {id:2,subject:\"Biology\"},\n    {id:3,subject:\"chemistry\"},\n    {id:1,subject:\"physic\"},\n    {id:2,subject:\"Biology\"},\n    {id:3,subject:\"chemistry\"},\n    {id:3,subject:\"chemistry\"},\n    {id:1,subject:\"physic\"},\n    {id:2,subject:\"Biology\"},\n    {id:3,subject:\"chemistry\"}\n]\n\n\n\nexport const StudentClassSubject = ()=>{\n    \n    const initialValue = {\n        year:{id:1,year:\"2019\"},\n        clas:{id:1,clas:\"Form 1\"},\n        student:{id:1,student:\"Samuel\",name:\"john\"},\n        subject:{id:1,subject:\"All\"},\n        subjectCheck:[]\n    }\n    let onsubmit = (values)=>{\n        console.log(\"values:\",values)\n    }\n    let onreset = ()=>{\n        \n    }\n    let validationSchema = Yup.object({\n        year: Yup.string().nullable().required().min(4),\n        clas:Yup.string().nullable().required().trim(),\n        student: Yup.string().nullable().required(\"choose student\").trim(),\n        subject: Yup.string().nullable().trim(),\n        subjectCheck : Yup.array().nullable()\n    })\n    return(\n        <Wrapper>\n            \n                <h3>Assign Class and Subject to a Student  </h3>\n            \n            <Card>\n                <Formik\n                    initialValues={initialValue}\n                    onSubmit={onsubmit}\n                    onReset={onreset}\n                    validationSchema = {validationSchema}\n                >\n                {\n                    ({\n                        values,\n                        errors,\n                        touched,\n                        isValid,\n                        dirty,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                        setFieldValue,\n                        getFieldProps\n                    })=>{\n                        return(\n                            <Form>\n                                <Grid container  xs={12} item spacing={1}>\n                                <Grid item xs={12}  >\n                                        <Field\n                                            \n                                            component={Autocomplete}\n                                            // {...getFieldProps(\"Gender\")}\n                                            value={values.year}\n                                            onBlur={handleBlur}\n                                            onChange={(e,selectedOption )=>\n                                                {setFieldValue(\"year\", selectedOption)\n                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                    }\n                                            }\n                                            \n                                            // inputValue={values.Gender.title}\n                                            options={year}\n                                            name=\"year\"\n                                            id=\"year\"\n                                            \n                                            getOptionSelected = {(option,value)=> option.id == value.id}\n                                            getOptionLabel={option => option.year}\n                                            renderInput={params => (\n                                                <>\n                                                \n                                                <Field \n                                                    component={TextField}\n                                                    {...params}\n                                                    \n                                                    name=\"year\"\n                                                    \n                                                    error={errors.hasOwnProperty(\"year\") && touched.hasOwnProperty(\"year\") ? true : false }\n                                                    label={errors.hasOwnProperty(\"year\") && touched.hasOwnProperty(\"year\") ? errors.year : \"year\" }\n                                                    variant=\"filled\"\n                                                />\n                                                </>\n                                            \n                                            )}\n\n                                            \n                                        />\n\n                                    </Grid>\n                                    <Grid item xs={12} >\n                                        <Field\n                                            \n                                            component={Autocomplete}\n                                            // {...getFieldProps(\"Gender\")}\n                                            value={values.clas}\n                                            onBlur={handleBlur}\n                                            onChange={(e,selectedOption )=>\n                                                {setFieldValue(\"clas\", selectedOption)\n                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                    }\n                                            }\n                                            options={clas}\n                                            name=\"clas\"\n                                            id=\"clas\" \n                                            \n                                            getOptionSelected = {(option,value)=> option.id == value.id}\n                                            getOptionLabel={option => option.clas}\n                                            renderInput={params => (\n                                                <>\n                                                \n                                                <Field \n                                                    component={TextField}\n                                                    {...params}\n                                                    \n                                                    name=\"clas\"\n                                                    \n                                                    error={errors.hasOwnProperty(\"clas\") && touched.hasOwnProperty(\"clas\") ? true : false }\n                                                    label={errors.hasOwnProperty(\"clas\") && touched.hasOwnProperty(\"clas\") ? errors.clas : \"class\" }\n                                                    variant=\"filled\"\n                                                />\n                                                </>\n                                            \n                                            )}\n\n                                            \n                                        />\n\n                                    </Grid>\n\n\n                                    <Grid item xs={12}  >\n                                        \n                                        <Field\n                                            \n                                            component={Autocomplete}\n                                            // {...getFieldProps(\"Gender\")}\n                                            value={values.student }\n                                            onBlur={handleBlur}\n                                            onChange={(e,selectedOption )=>\n                                                {setFieldValue(\"student\", selectedOption)\n                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                    }\n                                            }\n                                            \n                                            // inputValue={values.Gender.title}\n                                            options={student}\n                                            name=\"student\"\n                                            id=\"student\"\n                                            \n                                            getOptionSelected = {(option,value)=> option.id == value.id}\n                                            getOptionLabel={option => option.student + \" \" + option.name}\n                                            renderInput={params => (\n                                                <>\n                                                <Field \n                                                    component={TextField}\n                                                    {...params}\n                                                    \n                                                    name=\"student\"\n                                                    \n                                                    error={errors.hasOwnProperty(\"student\") && touched.hasOwnProperty(\"student\") ? true : false }\n                                                    label={errors.hasOwnProperty(\"student\") && touched.hasOwnProperty(\"student\") ? errors.student : \"student\" }\n                                                    variant=\"filled\"\n                                                />\n                                                </>\n                                            )}\n\n                                            \n                                        />\n                                        \n                                        \n                                    </Grid>\n                                    {/* <Grid item xs={12} >\n                                        <div>For the field below If the student Offers all the subjects In that class Leave this field empty, an empty field signifies \n                                            He/she offers every subject in that class\n                                        </div>\n                                        <Field\n                                            \n                                            component={Autocomplete}\n                                            // {...getFieldProps(\"Gender\")}\n                                            // value={[values.clas]}\n                                            onBlur={handleBlur}\n                                            onChange={(e,selectedOption )=>\n                                                {setFieldValue(\"subject\", selectedOption)\n                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                    }\n                                            }\n                                            multiple\n                                            // inputValue={values.Gender.title}\n                                            options={subject}\n                                            name=\"subject\"\n                                            id=\"subject\" \n                                            filterSelectedOptions\n                                            // getOptionSelected = {(option,value)=> option.id == value.id}\n                                            getOptionLabel={option => option.subject}\n                                            renderInput={params => (\n                                                <>\n                                                \n                                                <Field \n                                                    component={TextField}\n                                                    {...params}\n                                                    \n                                                    name=\"subject\"\n                                                    \n                                                    error={errors.hasOwnProperty(\"subject\") && touched.hasOwnProperty(\"subject\") ? true : false }\n                                                    label={errors.hasOwnProperty(\"subject\") && touched.hasOwnProperty(\"subject\") ? errors.subject : \"subject\" }\n                                                    variant=\"filled\"\n                                                />\n                                                </>\n                                            \n                                            )}\n\n                                            \n                                        />\n\n                                    </Grid> */}\n                                    <Grid item xs={12} >\n                                    {/* <Grid item xs={3} style={{textAlign:\"center\"}}  > */}\n                                                <div id=\"subjectOffered\">Subject offerded</div>\n                                                <Field\n                                                    label=\"checkbox subject\"\n                                                    name=\"subjectCheck\"\n                                                    >\n                                                        {\n                                                            ({field})=>{\n                                                                return subject.map(option=>{\n                                                                    return(\n                                                                        <React.Fragment >\n                                                                            <div>\n                                                                                <input\n                                                                                    type=\"checkbox\"\n                                                                                    id={option.id}\n                                                                                    {...field}\n                                                                                    value={option.subject}\n                                                                                    checked={field.value.includes(option.subject)}\n                                                                                    />\n                                                                                <label htmlFor={option.id}>{option.subject}</label>\n                                                                            \n                                                                            </div>\n                                                                        </React.Fragment>\n                                                                    )\n                                                                })\n                                                            }\n                                                        }\n                                            </Field>\n                                                {/* </Grid> */}\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} md={3}>\n                                        <Button style={{margin:\"0 2% 0 0\"}} variant=\"contained\" disabled={!(dirty && isValid )} color=\"primary\" type=\"submit\"  >submit</Button>    \n                                        <Button  type=\"reset\" variant=\"contained\">reset</Button>\n                                    </Grid>\n\n                                    \n                                    {/* <Grid xs={12} sm={6} md={2}>\n                                        <PDFDownloadLink \n                                            document={<ReportCardTemplate/>}\n                                            fileName={\"className\"}\n                                            >\n                                                {({ blob, url, loading, error }) => (loading ? 'Loading document...' : \"<CloudDownloadIcon />\")}\n                                        </PDFDownloadLink>\n                                    </Grid> */}\n                                </Grid>\n                                \n\n                            </Form>\n                        )\n                    }\n                }\n                </Formik>\n            </Card>\n        </Wrapper>\n    )\n}","import * as Yup from \"yup\"\n\nlet initialValue=(genderdata,bloodgroupdata,religiondata)=>({\n    FamilyName:\"\",\n    GivenName:\"\",\n    DateOfBirth:\"\",\n    Gender: genderdata[0],\n    StudentAddress:\"\",\n    BloodGroup:bloodgroupdata[0],\n    Religion:religiondata[0],\n    eMail:\"\",\n    \n    // section:sectiondata[0],\n    AdmissionID:\"\",\n    Phone:\"\",\n    shortBio:\"\",\n    // imageholder:state.filename\n\n    FatherName:\"\",\n    FatherOccupation:\"\",\n    FatherAddress:\"\",\n    FatherContact:\"\",\n    // Mother info\n    MotherName:\"\",\n    MotherOccupation:\"\",\n    MotherAddress:\"\",\n    MotherContact:\"\",\n    })\n\nlet ValidationSchema = Yup.object({\n    FamilyName: Yup.string().nullable().uppercase().trim().required(\"Enter Last Name\"),\n    GivenName: Yup.string().nullable().uppercase().trim().required(\"Enter First Name\"),\n    DateOfBirth: Yup.date().nullable().required(\"enter Date of Birth\"),\n    Gender: Yup.object().nullable().required(\"are you an Alien\"),\n    StudentAddress: Yup.string().nullable().required(\"Enter Your Student Address\"),\n    BloodGroup:Yup.object().nullable(),\n    Religion: Yup.object().nullable().required(\"Enter you religion\"),\n    eMail: Yup.string().nullable().email().required(\"Enter your email\"),\n    // section: Yup.object().nullable().required(\"choose section\"),\n    AdmissionID: Yup.string().nullable().required(\"User id\"),\n    Phone: Yup.string().nullable().required(\"Enter phone number\").max(15),\n    shortBio: Yup.string().nullable().required(\"short biography\"),\n    // imageholder: Yup.string().nullable().notRequired(\"user photo\"),\n    FatherName:Yup.string().nullable().notRequired(\"needed\"),\n    FatherOccupation:Yup.string().nullable().notRequired(\"needed\"),\n    FatherAddress:Yup.string().nullable().notRequired(\"needed\"),\n    FatherContact:Yup.string().nullable().notRequired(\"needed\"),\n    // Mother info\n    MotherName:Yup.string().nullable().notRequired(\"needed\"),\n    MotherOccupation:Yup.string().nullable().notRequired(\"needed\"),\n    MotherAddress:Yup.string().nullable().notRequired(\"needed\"),\n    MotherContact:Yup.string().nullable().notRequired(\"needed\")\n\n})\n\nexport {ValidationSchema, initialValue}","import React,{useState} from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\"\nimport {Field,Formik,Form,ErrorMessage, FastField} from \"formik\"\n// import * as Yup from \"yup\"\n\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\n// import parse from 'autosuggest-highlight/parse';\n// import match from 'autosuggest-highlight/match';\nimport AccountCircle from \"@material-ui/icons/AccountCircle\"\n// import WcIcon from '@material-ui/icons/Wc';\n// import CalendarTodayIcon from '@material-ui/icons/CalendarToday'\nimport HomeIcon from '@material-ui/icons/Home';\nimport AlternateEmail from '@material-ui/icons/AlternateEmail';\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\nimport ContactPhoneIcon from '@material-ui/icons/ContactPhone';\nimport LocalLibraryIcon from '@material-ui/icons/LocalLibrary';\nimport WorkIcon from '@material-ui/icons/Work';\n\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\n// import {errorFieldMessage} from \"../../components/error/errorFieldMessage\"\nimport Button  from '@material-ui/core/Button';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\n// import GenderDatabase from \"../../database/GeneralDatabase\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\nimport useSWR from \"swr\"\n\nimport {ValidationSchema, initialValue} from \"../studentFormschema\"\n\nimport {Wrapper } from \"components/modules/Admin/Teacher/styles\"\nimport defaultImage from \"assets/defaultImages/defaultImage.png\"\nimport {UrlTitle} from \"components/common\"\n\n// let genderdata = [{id:1,gender:\"Male\"},{id:2,gender:\"Female\"},{id:3,gender:\"unknow\"}]\nlet religiondata =[{id:1,doctrine:\"Christain\"},{id:2,doctrine:\"Muslim\"},{id:3,doctrine:\"Pegan\"},{id:4,doctrine:\"Traditionalist\"}]\nlet bloodgroupdata =[{id:1,group:\"A+\"},{id:2,group:\"A-\"},{id:3,group:\"B+\"},{id:4,group:\"B-\"},{id:5,group:\"AB\"},{id:6,group:\"0+\"},{id:7,group:\"O-\"}]\n// let sectiondata =[{section:\"English\"},{section:\"FRENCH\"},{section:\"CHINESSE\"},{section:\"GERMAN\"}]\n\n\nlet initialStateValues = {\n    \n    imagesizeError:\"none\",\n    imagedataBack:null,\n    filename:\"\"\n}\nexport const  ParentRegistrationForm = ({genderFindAll}) => {\n\n    \n\n    let [state , setstate] = useState(initialStateValues)\n    // let {data:sectionGetData, error:sectionGetError} =  useSWR(\"/api/sectionapi\")\n    let {data:genderGetData, error:genderGetError} =  useSWR(\"/api/generalapi?gender=true\")\n    // let sectiondata = (sectionGetData ? sectionGetData.length != 0 && sectionGetData :undefined) || (sectionFindAll.length == 0 ? [{id_:\"\",section:\"\", languages:\"\"}]: sectionFindAll)\n\n    // let genderdata = (genderGetData ? genderGetData.length != 0 && genderGetData :undefined) || (genderFindAll.length == 0 ? [{id:\"\",gender:\"\"}]: genderFindAll)\n    \n    let genderdata = []\n    \n    \n    // const classes = useStyles();\n\n    let initialValues=initialValue(genderdata,bloodgroupdata,religiondata)\n\nlet onsubmit = async (values,submittingProps)=>{\n    let data = await fetch(\"/api/studentapi\",{\n        method:\"POST\",\n        body:JSON.stringify({\n            values,\n            imagedataBack: state.imagedataBack\n        })\n     })\n     console.log(\"data::\",data.status)\n     if(data.status==409){\n         alert(`${values.FamilyName} ${values.GivenName} with student id ${values.AdmissionID} exist already`)\n     }\n     if(data.status==415){\n        alert(`${window.navigator.userAgent} \\n stop trying out attacks on my system`)\n    }\n    else if(data.status ==200){\n        setstate((prev)=>({\n            ...initialStateValues\n        }))\n        submittingProps.resetForm()\n    }\n     \n\n}\n    // let onreset = ()=>{\n    //     setstate((prev)=>({\n    //         ...initialStateValues\n    //     }))\n    // }\n  \n\n  return(\n   \n\n    <Wrapper>\n      <UrlTitle>\n          Teacher\n      </UrlTitle>\n          \n            <Formik\n                initialValues={initialValues}\n                validationSchema={ValidationSchema}\n                onSubmit = {onsubmit}\n                // onReset = {onreset}\n                // enableReinitialize\n                >\n                    {\n                        ({\n                            values,\n                            getFieldProps,\n                            setFieldValue,\n                            setFieldError,\n                            errors,\n                            validateOnBlur,\n                            handleSubmit,\n                            handleBlur,\n                            handleChange,\n                            isValid,\n                            dirty,\n                            touched\n                        })=>{\n                            return(\n                        \n                            <Form>\n                            <Card  className=\"whitesnow p-2 pr-0 mb-4 ml-3 mr-3\">\n                            <h5 className=\"text-info\">Student Information</h5>\n                                <div className=\"\">\n                                    <Grid container spacing={2}>\n                                    <Grid container item xs={12} spacing={2} className=\"bg-secondary profileImageContainer \" >\n                                            <Grid item xs={12}  sm={6}  className=\"text-center label_box\">\n                                                    <label htmlFor=\"image\" className=\"w-100\">\n                                                        <AddCircleOutlineIcon fontSize=\"large\" />\n                                                    </label>\n                                                    <Field\n                                                        id=\"image\"\n                                                        component={Input}\n                                                        className=\"display_none\"\n                                                        variant=\"filled\"\n                                                        type=\"file\"\n                                                        accept=\".jpg, .jpeg, .png\"\n                                                        // multiple\n                                                        onChange={(event)=>{\n                                                            // handleChange\n                                                            let fileList = event.target.files\n\n                                                            const formData = new FormData()\n                                                            \n                                                            for(const file of fileList){\n                                                                const name = file.name ? file.name : 'NOT SUPPORTED';\n                                                                // Not supported in Firefox for Android or Opera for Android.\n                                                                const type = file.type ? file.type : 'NOT SUPPORTED';\n                                                                // Unknown cross-browser support.\n                                                                const size = file.size ? file.size : 'NOT SUPPORTED';\n                                                                        if (file.type && file.type.indexOf('image') === -1) {\n                                                                            console.log('File is not an image.', file.type, file,file.type.indexOf('image'));\n                                                                            return;\n                                                                        }\n                                                                        if(file.size > 1000000){\n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                filename:null,\n                                                                                imagedataBack:null,\n                                                                                imagesizeError:\"inline\"\n                                                                            }))\n                                                                            return\n                                                                        }\n                                                                        const reader = new FileReader();\n                                                                        // reader.onload\n                                                                        // reader.onloadend\n                                                                        // reader.onloadstart\n                                                                        // reader.onabort\n                                                                        // reader.onerror\n                                                                        // reader.onprogress\n                                                                        \n                                                                        reader.addEventListener('load', (event) => {\n                                                                            \n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                imagedataBack:event.target.result,\n                                                                                filename:file.name,\n                                                                                imagesizeError:\"none\"\n                                                                            }))\n                                                                            console.log(\"filename::\",state.filename)\n                                                                            \n                                                                        });\n                                                                        reader.readAsDataURL(file)\n                                                                        formData.append(\"file\",file)\n                                                                        console.log(\"formData::\", formData)\n                                                                    \n                                                            }\n                                                        }}\n                                                        />\n                                                        \n                                                        \n                                                </Grid>\n                                                <Grid item xs={12}  sm={6} className=\"bg-info text-center\" >\n                                                    {/* <FastField */}\n                                                    <TextField \n                                                            // component={TextField}\n                                                            // error={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? true : false }\n                                                            \n                                                            // label={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? errors.imageholder : \"image\" }\n                                                            disabled\n                                                            name=\"imageholder\"\n                                                            id=\"imageholder\"\n                                                            className=\"w-100 bg-light text-danger\"\n                                                            // {...getFieldProps(\"imageholder\")}\n                                                            value={state.filename} />\n                                                    <h4 style={{display:state.imagesizeError,color:\"red\"}} >Image size less than 1MB</h4>\n                                                    <Field\n                                                        width=\"200cm\"\n                                                        height=\"200cm\"\n                                                        className=\"image_box bg-secondary\"\n                                                        // onerror=\"this.onerror=null;this.src='./default.jpg';\"\n                                                        // component={(params)=><img {...params} src={state}/>}\n                                                        component={params=>{\n                                                        if(state.imagedataBack){\n                                                            return <img {...params} src={state.imagedataBack}/>\n                                                        }\n                                                        else{\n                                                            return <img  {...params} src={defaultImage}/>\n                                                        }\n                                                        }\n                                                    }\n                                                        />\n\n                                                    \n                                                </Grid>\n                                                \n                                        </Grid>\n                                        <Grid container item xs={12} spacing={2} >\n                                            <React.Fragment>\n                                                <Grid item xs={12} sm={6} >\n                                                    {console.log(\"error::\",errors)}\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? true : false }\n                                                        {...getFieldProps(\"FamilyName\")}\n                                                        label={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? errors.FamilyName : \"Family Name\" }\n                                                        value={values.FamilyName}\n                                                        name=\"FamilyName\"\n                                                        id=\"FamilyName\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <AccountCircle/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                <Grid item xs={12} sm={6}  >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? true : false }\n                                                        {...getFieldProps(\"GivenName\")}\n                                                        label={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? errors.GivenName : \"Given Name\" }\n                                                        value={values.GivenName}\n                                                        name=\"GivenName\"\n                                                        id=\"GivenName\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <AccountCircle/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? true : false }\n                                                        {...getFieldProps(\"DateOfBirth\")}\n                                                        label={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? errors.DateOfBirth : \"Date Of Birth\" }\n                                                        value={values.DateOfBirth}\n                                                        name=\"DateOfBirth\"\n                                                        id=\"DateOfBirth\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"date\"\n                                                        InputLabelProps={{\n                                                            shrink:true\n                                                        }}\n                                                        \n                                                        />\n                                                </Grid>\n                                                <Grid item xs={12} sm={6} className=\"w-100\" >\n                                                    <Field\n                                                        \n                                                        component={Autocomplete}\n                                                        // {...getFieldProps(\"Gender\")}\n                                                        value={values.Gender}\n                                                        onBlur={handleBlur}\n                                                        onChange={(e,selectedOption )=>\n                                                            {setFieldValue(\"Gender\", selectedOption)\n                                                            //  setFieldError(\"Gender\",errors.Gender)\n                                                                }\n                                                        }\n                                                        \n                                                        // inputValue={values.Gender.title}\n                                                        options={genderdata}\n                                                        name=\"Gender\"\n                                                        id=\"Gender\"\n                                                        \n                                                        getOptionSelected = {(option,value)=> option.gender == value.gender}\n                                                        getOptionLabel={option => option.gender}\n                                                        renderInput={params => (\n                                                            <>\n                                                            \n                                                            <Field \n                                                            component={TextField}\n                                                            {...params}\n                                                            \n                                                            name=\"Gender\"\n                                                            error={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? true : false }\n                                                            label={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? errors.Gender : \"Gender\" }\n                                                            variant=\"filled\"    \n                                                            \n                                                        />\n                                                            </>\n                                                        \n                                                        )}\n\n                                                        \n                                                    />\n                                                        \n                                                </Grid>\n                                                {console.log(\"values::\",values)}\n                                            </React.Fragment>\n                                        </Grid>\n\n                                        {/* ROW 2 --- STARTS HERE --- */}\n                                        <Grid container item xs={12} spacing={2}>\n                                            <React.Fragment>\n                                                <Grid item xs={12} sm={6} >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"StudentAddress\") && touched.hasOwnProperty(\"StudentAddress\") ? true : false }\n                                                        {...getFieldProps(\"StudentAddress\")}\n                                                        label={errors.hasOwnProperty(\"StudentAddress\") && touched.hasOwnProperty(\"StudentAddress\") ? errors.StudentAddress : \"StudentAddress\" }\n                                                        value={values.StudentAddress}\n                                                        name=\"StudentAddress\"\n                                                        id=\"StudentAddress\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <HomeIcon/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                <Grid item xs={12} sm={6}  >\n                                                    <Field\n                                                            \n                                                            component={Autocomplete}\n                                                            // {...getFieldProps(\"Gender\")}\n                                                            value={values.Religion}\n                                                            defaultValue={values.Religion}\n                                                            onBlur={handleBlur}\n                                                            onChange={(e,selectedOption )=>\n                                                                {setFieldValue(\"Religion\", selectedOption)\n                                                                //  setFieldError(\"Gender\",errors.Gender)\n                                                                    }\n                                                            }\n                                                            \n                                                            // inputValue={values.Gender.title}\n                                                            options={religiondata}\n                                                            name=\"Religion\"\n                                                            id=\"Religion\"\n                                                            getOptionSelected = {(option,value)=> option.doctrine == value.doctrine}\n                                                            getOptionLabel={option => option.doctrine}\n                                                            renderInput={params => (\n                                                                <>\n                                                                \n                                                                <Field \n                                                                component={TextField}\n                                                                {...params}\n                                                                \n                                                                name=\"Religion\"\n                                                                error={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? true : false }\n                                                                label={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? errors.Religion : \"Religion\" }\n                                                                variant=\"filled\"    \n                                                                \n                                                            />\n                                                                </>\n                                                            \n                                                            )}\n\n                                                            \n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={12} sm={6}  >\n                                                        <Field\n                                                                \n                                                                component={Autocomplete}\n                                                                // {...getFieldProps(\"Gender\")}\n                                                                value={values.BloodGroup}\n                                                                defaultValue={values.BloodGroup}\n                                                                onBlur={handleBlur}\n                                                                onChange={(e,selectedOption )=>\n                                                                    {setFieldValue(\"BloodGroup\", selectedOption)\n                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                        }\n                                                                }\n                                                                \n                                                                // inputValue={values.Gender.title}\n                                                                \n                                                                options={bloodgroupdata}\n                                                                name=\"BloodGroup\"\n                                                                id=\"BloodGroup\"\n                                                                getOptionSelected={(option,value)=>option.group == value.group}\n                                                                getOptionLabel={option => option.group}\n                                                                renderInput={params => (\n                                                                    <>\n                                                                    \n                                                                    <Field \n                                                                    component={TextField}\n                                                                    {...params}\n                                                                    \n                                                                    name=\"BloodGroup\"\n                                                                    error={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? true : false }\n                                                                    label={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? errors.BloodGroup : \"BloodGroup\" }\n                                                                    variant=\"filled\"    \n                                                                    \n                                                                />\n                                                                    </>\n                                                                \n                                                                )}\n\n                                                                \n                                                            />\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? true : false }\n                                                        {...getFieldProps(\"eMail\")}\n                                                        label={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? errors.eMail : \"email\" }\n                                                        value={values.eMail}\n                                                        name=\"eMail\"\n                                                        id=\"eMail\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"email\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <AlternateEmail/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        \n                                                        />\n                                                </Grid>\n                                            \n                                            </React.Fragment>\n                                        <React.Fragment>\n                                        {/* <Grid item xs={12} sm={6} >\n                                            <Field\n                                                            \n                                                component={Autocomplete}\n                                                // {...getFieldProps(\"Gender\")}\n                                                value={values.section}\n                                                onBlur={handleBlur}\n                                                onChange={(e,selectedOption )=>\n                                                    {setFieldValue(\"section\", selectedOption)\n                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                        }\n                                                }\n                                                \n                                                // inputValue={values.Gender.title}\n                                                options={sectiondata}\n                                                name=\"section\"\n                                                id=\"section\"\n                                                getOptionSelected={(option, value) => option.section == value.section}\n                                                getOptionLabel={option => option.section}\n                                                renderInput={params => (\n                                                    <>\n                                                    \n                                                    <Field \n                                                        component={TextField}\n                                                        {...params}\n                                                        name=\"section\"\n                                                        error={errors.hasOwnProperty(\"section\") && touched.hasOwnProperty(\"section\") ? true : false }\n                                                        label={errors.hasOwnProperty(\"section\") && touched.hasOwnProperty(\"section\") ? errors.section : \"section\" }\n                                                        variant=\"filled\"    \n                                                        \n                                                    />\n                                                    </>\n                                                \n                                                )}\n\n                                                            renderOption={(option, { inputValue }) => {\n                                                            const matches = match(option.section, inputValue);\n                                                            const parts = parse(option.section, matches);\n                                                    \n                                                            return (\n                                                                <div>\n                                                                {parts.map((part, index) => (\n                                                                    <span key={index} >\n                                                                    {part.text}\n                                                                    </span>\n                                                                ))}\n                                                                </div>\n                                                            );\n                                                            }}\n                                                        />\n                                                    </Grid> */}\n                                        <Grid item xs={12} sm={6}  >\n                                                    \n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"AdmissionID\") && touched.hasOwnProperty(\"AdmissionID\") ? true : false }\n                                                        {...getFieldProps(\"AdmissionID\")}\n                                                        label={errors.hasOwnProperty(\"AdmissionID\") && touched.hasOwnProperty(\"AdmissionID\") ? errors.AdmissionID : \"AdmissionID\" }\n                                                        value={values.AdmissionID}\n                                                        name=\"AdmissionID\"\n                                                        id=\"AdmissionID\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <FingerprintIcon/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        \n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                \n                                                <Grid item xs={12} sm={6}  >\n                                                    \n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"Phone\") && touched.hasOwnProperty(\"Phone\") ? true : false }\n                                                        {...getFieldProps(\"Phone\")}\n                                                        label={errors.hasOwnProperty(\"Phone\") && touched.hasOwnProperty(\"Phone\") ? errors.Phone : \"Phone\" }\n                                                        value={values.Phone}\n                                                        name=\"Phone\"\n                                                        id=\"Phone\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"tel\"\n                                                        \n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\" >\n                                                                    <ContactPhoneIcon/>\n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                        {/* <ErrorMessage name=\"FamilyName\" component={errorFieldMessage}/> */}\n                                                </Grid>\n                                                <Grid item xs={12}  sm={6}  >\n                                                    <Field\n                                                        error={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? true : false }\n                                                        {...getFieldProps(\"shortBio\")}\n                                                        label={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? errors.shortBio : \"shortBio\" }\n                                                        value={values.shortBio}\n                                                        name=\"shortBio\"\n                                                        id=\"shortBio\"\n                                                        component={TextField}\n                                                        className=\"w-100\"\n                                                        variant=\"filled\"\n                                                        type=\"textArea\"\n                                                        InputProps={{\n                                                            startAdornment:(\n                                                                <InputAdornment position=\"start\">\n                                                                    <LocalLibraryIcon/> \n                                                                </InputAdornment>\n                                                            )\n                                                        }}\n                                                        />\n                                                </Grid>\n                                                \n                                                \n                                                {console.log(\"values::\",values.image)}\n                                                \n                                            </React.Fragment>\n                                        </Grid>\n                                        \n\n\n                                    </Grid>\n                                </div>\n                            </Card> \n\n\n                            {/* Father Information */}\n                            <Card  className=\"whitesnow p-2 pr-0 mb-4 ml-3 mr-3\">\n                                <h5 className=\"text-info\">Father Information</h5>\n                                <Grid container item xs={12} spacing={2}>\n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"FatherName\") && touched.hasOwnProperty(\"FatherName\") ? true : false }\n                                                {...getFieldProps(\"FatherName\")}\n                                                label={errors.hasOwnProperty(\"FatherName\") && touched.hasOwnProperty(\"FatherName\") ? errors.FatherName : \"FatherName\" }\n                                                value={values.FatherName}\n                                                name=\"FatherName\"\n                                                id=\"FatherName\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <AccountCircle/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                               \n                                \n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"FatherOccupation\") && touched.hasOwnProperty(\"FatherOccupation\") ? true : false }\n                                                {...getFieldProps(\"FatherOccupation\")}\n                                                label={errors.hasOwnProperty(\"FatherOccupation\") && touched.hasOwnProperty(\"FatherOccupation\") ? errors.FatherOccupation : \"FatherOccupation\" }\n                                                value={values.FatherOccupation}\n                                                name=\"FatherOccupation\"\n                                                id=\"FatherOccupation\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <WorkIcon/>\n                                                        </InputAdornment> \n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                \n                                \n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"FatherAddress\") && touched.hasOwnProperty(\"FatherAddress\") ? true : false }\n                                                {...getFieldProps(\"FatherAddress\")}\n                                                label={errors.hasOwnProperty(\"FatherAddress\") && touched.hasOwnProperty(\"FatherAddress\") ? errors.FatherAddress : \"FatherAddress\" }\n                                                value={values.FatherAddress}\n                                                name=\"FatherAddress\"\n                                                id=\"FatherAddress\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <HomeIcon/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"FatherContact\") && touched.hasOwnProperty(\"FatherContact\") ? true : false }\n                                                {...getFieldProps(\"FatherContact\")}\n                                                label={errors.hasOwnProperty(\"FatherContact\") && touched.hasOwnProperty(\"FatherContact\") ? errors.FatherContact : \"FatherContact\" }\n                                                value={values.FatherContact}\n                                                name=\"FatherContact\"\n                                                id=\"FatherContact\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <ContactPhoneIcon/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                </Grid>\n                            </Card>\n\n                            {/*  Mother Information */}\n                            <Card  className=\"whitesnow p-2 pr-0 mb-4 ml-3 mr-3\">\n                                <h5 className=\"text-info\">Mother Information</h5>\n                                <Grid container item xs={12} spacing={2}>\n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"MotherName\") && touched.hasOwnProperty(\"MotherName\") ? true : false }\n                                                {...getFieldProps(\"MotherName\")}\n                                                label={errors.hasOwnProperty(\"MotherName\") && touched.hasOwnProperty(\"MotherName\") ? errors.MotherName : \"MotherName\" }\n                                                value={values.MotherName}\n                                                name=\"MotherName\"\n                                                id=\"MotherName\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <AccountCircle/>\n                                                        </InputAdornment> \n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                               \n                                \n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"MotherOccupation\") && touched.hasOwnProperty(\"MotherOccupation\") ? true : false }\n                                                {...getFieldProps(\"MotherOccupation\")}\n                                                label={errors.hasOwnProperty(\"MotherOccupation\") && touched.hasOwnProperty(\"MotherOccupation\") ? errors.MotherOccupation : \"MotherOccupation\" }\n                                                value={values.MotherOccupation}\n                                                name=\"MotherOccupation\"\n                                                id=\"MotherOccupation\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <WorkIcon/>\n                                                        </InputAdornment> \n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                \n                                \n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"MotherAddress\") && touched.hasOwnProperty(\"MotherAddress\") ? true : false }\n                                                {...getFieldProps(\"MotherAddress\")}\n                                                label={errors.hasOwnProperty(\"MotherAddress\") && touched.hasOwnProperty(\"MotherAddress\") ? errors.MotherAddress : \"MotherAddress\" }\n                                                value={values.MotherAddress}\n                                                name=\"MotherAddress\"\n                                                id=\"MotherAddress\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <HomeIcon/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                        <Grid item xs={12}  sm={6}  >\n                                            <Field\n                                                error={errors.hasOwnProperty(\"MotherContact\") && touched.hasOwnProperty(\"MotherContact\") ? true : false }\n                                                {...getFieldProps(\"FatherContact\")}\n                                                label={errors.hasOwnProperty(\"MotherContact\") && touched.hasOwnProperty(\"MotherContact\") ? errors.MotherContact : \"MotherContact\" }\n                                                value={values.MotherContact}\n                                                name=\"MotherContact\"\n                                                id=\"MotherContact\"\n                                                component={TextField}\n                                                className=\"w-100\"\n                                                variant=\"filled\"\n                                                InputProps={{\n                                                    startAdornment:(\n                                                        <InputAdornment position=\"start\" >\n                                                            <ContactPhoneIcon/>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                />\n                                        </Grid>\n                                </Grid>\n                            </Card>\n                            <Card className=\"nobackground mb-4 ml-3 mr-3\">\n                                <Grid container item xs={12}>\n                                    <Grid container item xs={12} spacing={2}>\n                                            <Grid sm={12} item className=\"text-center\">\n                                                {isValid && dirty && state.imagedataBack ? <Button  type=\"submit\" className=\"bg-danger p-2 pl-4 pr-4 m-2\">submit</Button>:<Button disabled  type=\"submit\" className=\"bg-secondary p-2 p-2 pl-4 pr-4 m-2\">submit</Button>}\n                                                <Button type=\"reset\" className=\"bg-warning p-2 pl-4 pr-4 m-2\">reset</Button>\n                                            </Grid> \n                                        </Grid>\n                                </Grid>\n                            </Card>\n        \n                            </Form>\n                            )\n                        }\n                    }\n                   \n                </Formik>\n          \n        </Wrapper>\n        \n  );\n}\n\n","// import {useRouter} from \"next/router\"\nimport React,{useState,useEffect} from \"react\"\n\nimport Card from \"@material-ui/core/Card\"\nimport useSWR from \"swr\"\n// import StudentDatabase from \"../../database/studentDatabase\"\nimport Button from \"@material-ui/core/Button\"\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\n// import TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from \"@material-ui/core/Grid\"\nimport  CardHeader  from \"@material-ui/core/CardHeader\"\nimport { Avatar } from \"@material-ui/core\"\n\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DoneIcon from '@material-ui/icons/Done';\n// import StudentTemplate from \"../../components/topdfContainer/studentTemplate\"\n\n// import { PDFDownloadLink } from '@react-pdf/renderer';\n\n// import MyDocument from \"../../components/topdfContainer/studentTemplate\"\nimport PrintIcon from '@material-ui/icons/Print';\n\n\n\n\n\nimport TextField from \"@material-ui/core/TextField\"\nimport {Field,Formik,Form,ErrorMessage, FastField} from \"formik\"\n// import Styles from \"../../components/studentComponent/student.module.css\"\nimport Input from '@material-ui/core/Input';\n// import parse from 'autosuggest-highlight/parse';\n// import match from 'autosuggest-highlight/match';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport defaultImage from \"assets/defaultImages/defaultImage.png\"\nimport {Wrapper } from \"components/modules/Admin/Teacher/styles\"\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\n// import {errorFieldMessage} from \"../../components/error/errorFieldMessage\"\n// import GenderDatabase from \"../../database/GeneralDatabase\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\n\n\n\n\n\nimport {ImageConverter} from \"components/imageConverter/imageconvert\"\n\nimport {ValidationSchema, initialValue} from \"../studentFormschema\"\n// import GenderDatabase from \"../../database/GeneralDatabase\"\n// import SectionDatabase from \"../../database/sectiondatabase\"\n\n\n        // const initialState = {\n        //     stuImage: null\n        // }\n\nlet religiondata =[{id:1,doctrine:\"Christain\"},{id:2,doctrine:\"Muslim\"},{id:3,doctrine:\"Pegan\"},{id:4,doctrine:\"Traditionalist\"}]\nlet bloodgroupdata =[{id:1,group:\"A+\"},{id:2,group:\"A-\"},{id:3,group:\"B+\"},{id:4,group:\"B-\"},{id:5,group:\"AB\"},{id:6,group:\"0+\"},{id:7,group:\"O-\"}]\n\nlet initialStateImageValues = {\n    \n    imagesizeError:\"none\",\n    imagedataBack:null,\n    filename:\"\"\n}\nlet initialEditIcons = {\n\n        studentImageIconEditOff:\"none\",\n        FamilyNameIconEditOff:\"none\",\n        GivenNameIconEditOff:\"none\",\n        DateOfBirthIconEditOff:\"none\",\n        GenderIconEditOff: \"none\",\n        StudentAddressIconEditOff:\"none\",\n        BloodGroupIconEditOff:\"none\",\n        ReligionIconEditOff:\"none\",\n        eMailIconEditOff:\"none\",\n        \n        // sectionIconEditOff:\"none\",\n        AdmissionIDIconEditOff:\"none\",\n        PhoneIconEditOff:\"none\",\n        shortBioIconEditOff:\"none\",\n        // imageholder:state.filename\n\n        FatherNameIconEditOff:\"none\",\n        FatherOccupationIconEditOff:\"none\",\n        FatherAddressIconEditOff:\"none\",\n        FatherContactIconEditOff:\"none\",\n        // Mother info\n        MotherNameIconEditOff:\"none\",\n        MotherOccupationIconEditOff:\"none\",\n        MotherAddressIconEditOff:\"none\",\n        MotherContactIconEditOff:\"none\",\n}\n\nlet initialDisplay = {\n        studentImageEditon:\"inline\",\n        FamilyNameEditOn:\"inline\",\n        GivenNameEditOn:\"inline\",\n        DateOfBirthEditOn:\"inline\",\n        GenderEditOn: \"inline\",\n        StudentAddressEditOn:\"inline\",\n        BloodGroupEditOn:\"inline\",\n        ReligionEditOn:\"inline\",\n        eMailEditOn:\"inline\",\n        \n        // sectionEditOn:\"inline\",\n        AdmissionIDEditOn:\"inline\",\n        PhoneEditOn:\"inline\",\n        shortBioEditOn:\"inline\",\n        // imageholder:state.filename\n\n        FatherNameEditOn:\"inline\",\n        FatherOccupationEditOn:\"inline\",\n        FatherAddressEditOn:\"inline\",\n        FatherContactEditOn:\"inline\",\n        // Mother info\n        MotherNameEditOn:\"inline\",\n        MotherOccupationEditOn:\"inline\",\n        MotherAddressEditOn:\"inline\",\n        MotherContactEditOn:\"inline\",\n// \n// \n// \n        studentImageEditOff:\"none\",\n        FamilyNameEditOff:\"none\",\n        GivenNameEditOff:\"none\",\n        DateOfBirthEditOff:\"none\",\n        GenderEditOff: \"none\",\n        StudentAddressEditOff:\"none\",\n        BloodGroupEditOff:\"none\",\n        ReligionEditOff:\"none\",\n        eMailEditOff:\"none\",\n        \n        sectionEditOff:\"none\",\n        AdmissionIDEditOff:\"none\",\n        PhoneEditOff:\"none\",\n        shortBioEditOff:\"none\",\n        // imageholder:state.filename\n\n        FatherNameEditOff:\"none\",\n        FatherOccupationEditOff:\"none\",\n        FatherAddressEditOff:\"none\",\n        FatherContactEditOff:\"none\",\n        // Mother info\n        MotherNameEditOff:\"none\",\n        MotherOccupationEditOff:\"none\",\n        MotherAddressEditOff:\"none\",\n        MotherContactEditOff:\"none\",\n}\n\nlet n = 0\nexport const ParentsDetails =  ()=>{\n    // n = n+1\n    let [stateDownloadIcon,setStateDownloadIcon] = useState(null)\n    let [displayState , setDisplayState] = useState(initialDisplay)\n    let [displayEditIconState , setDisplayEditIconState] = useState(initialEditIcons)\n\n    let [state , setstate] = useState(initialStateImageValues)\n\n    let {data:sectionGetData, error:sectionGetError} =  useSWR(\"/api/sectionapi\")\n    let {data:genderGetData, error:genderGetError} =  useSWR(\"/api/generalapi?gender=true\")\n    // let sectiondata = (sectionGetData ? sectionGetData.length != 0 && sectionGetData :undefined) || [{id_:\"\",section:\"\", languages:\"\"}]\n    let genderdata = (genderGetData ? genderGetData.length != 0 && genderGetData :undefined) || [{id:\"\",gender:\"\"}]\n\n    // let initialValues=initialValue(genderdata,bloodgroupdata,religiondata,sectiondata)\n    \n\n    // let router = useRouter()\n    // console.log(\"router::\",router.query)\n\n\n    // let [state , setstate] = useState(initialState)\n    // // let router = useRouter()\n    // oneStudent = JSON.parse(oneStudent)\n    // // console.log(\"router::\",router)\n    // console.log(\"students:::\",oneStudent)\n\n    // let {AdmissionID:studentAdmissionID} = router.query\n    let {AdmissionID:studentAdmissionID} = 1\n\n    // const {data:oneStudentdata, error:onStudentError} = useSWR(\"/api/studentapi?AdmissionID=GO10&student=GO11\")\n    const {data:oneStudentdata, error:onStudentError} = useSWR(`/api/studentapi?AdmissionID=${studentAdmissionID}`)\n   \n     // student=GO11 NOT USEFUL JUST TESTING the end point\n    let initialValues={\n        FamilyName:oneStudentdata ? oneStudentdata.oneStudent.familyname:\"\",\n        GivenName:oneStudentdata ? oneStudentdata.oneStudent.givenname:\"\",\n        DateOfBirth:oneStudentdata ? new Date(oneStudentdata.oneStudent.dateofbirth).toISOString().slice(0,10):new Date().toISOString().slice(0,10),\n        Gender: genderdata[0],\n        StudentAddress:oneStudentdata ? oneStudentdata.oneStudent.StudentAddress:\"\",\n        BloodGroup:bloodgroupdata[0],\n        Religion:religiondata[0],\n        eMail:oneStudentdata ? oneStudentdata.oneStudent.email:\"\",\n        \n        // section:sectiondata[0],\n        // AdmissionID:\"\",\n        Phone:oneStudentdata ? oneStudentdata.oneStudent.phonenumber:\"\",\n        shortBio:oneStudentdata ? oneStudentdata.oneStudent.shortbiography:\"\",\n        // imageholder:state.filename\n    \n        FatherName:oneStudentdata ? oneStudentdata.oneStudent.FatherName:\"\",\n        FatherOccupation:oneStudentdata ? oneStudentdata.oneStudent.FatherOccupation:\"\",\n        FatherAddress:oneStudentdata ? oneStudentdata.oneStudent.FatherAddress:\"\",\n        FatherContact:oneStudentdata ? oneStudentdata.oneStudent.FatherContact:\"\",\n        // Mother info\n        MotherName:oneStudentdata ? oneStudentdata.oneStudent.MotherName:\"\",\n        MotherOccupation:oneStudentdata ? oneStudentdata.oneStudent.MotherOccupation:\"\",\n        MotherAddress:oneStudentdata ? oneStudentdata.oneStudent.MotherAddress:\"\",\n        MotherContact:oneStudentdata ? oneStudentdata.oneStudent.MotherContact:\"\",\n        }\n    // const {data:oneStudentdata, error:onStudentError} = useSWR(\"public/uploads/Student/images/GO10_photo.jpeg\")\n    // console.log(\"check\",oneStudentdata)\n    console.log(\"onestudent\",oneStudentdata)\n    useEffect(()=>{\n        setStateDownloadIcon(true)\n      },[])\n    \n        // console.log(\"type::\",typeof(oneStudentdata.studentImage))\n        // let responce =  URL.createObjectURL(oneStudentdata.studentImage)\n        // console.log(responce)\n        // const b64toBlob = (b64Data, contentType='', sliceSize=512) => {\n        //     const byteCharacters = atob(b64Data);\n        //     const byteArrays = [];\n\n        //     for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        //         const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n        //         const byteNumbers = new Array(slice.length);\n        //         for (let i = 0; i < slice.length; i++) {\n        //         byteNumbers[i] = slice.charCodeAt(i);\n        //         }\n\n        //         const byteArray = new Uint8Array(byteNumbers);\n        //         byteArrays.push(byteArray);\n        //     }\n                \n        //     const blob = new Blob(byteArrays, {type: contentType});\n        //     return blob;\n        //     }\n\n        //     const contentType = 'image/png';\n\n        //     const b64Data = oneStudentdata.studentImage\n\n        //     const blob = b64toBlob(b64Data, contentType);\n        //     const blobUrl = URL.createObjectURL(blob);\n        //      setstate((prev)=>({\n        //         stuImage: blobUrl\n        //      }))\n        let imageState = ImageConverter(oneStudentdata)\n       \n        \n        \n    // if(oneStudent){\n        // const imageURL = new Image()    \n        // imageURL.src = oneStudent.studentImage\n        // document.body.appendChild(imageURL)\n        // console.log(oneStudent.studentImage)\n        // const imageURL = reader.readAsBinaryString(oneStudent.studentImage)\n        \n    // }\n    \n    \n    return (\n            <Wrapper>\n                {/* <Button onClick={pdfConverter}>help</Button> */}\n                \n                <div className=\"mt-4 mb-4 ml-3\">\n                    <h3 className=\"whitesnow mr-3 p-1 \">Student Details</h3>\n                </div>\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={ValidationSchema}\n                    enableReinitialize\n                >\n                    {\n                        ({\n                            values,\n                            getFieldProps,\n                            setFieldValue,\n                            setFieldError,\n                            errors,\n                            validateOnBlur,\n                            handleSubmit,\n                            handleBlur,\n                            handleChange,\n                            isValid,\n                            dirty,\n                            touched\n                        })=>{\n                            return(\n                        \n                            <Form>\n                                <Card id=\"testDiv\">\n                                        <div className=\"float-right\">\n                                            <ul className=\"listStyle\">\n                                                {/* <li className=\"p-2\">\n                                                    {stateDownloadIcon ? <PDFDownloadLink   document={<MyDocument \n                                                            help={oneStudentdata ? oneStudentdata.oneStudent.familyname : null}\n                                                        />} fileName=\"studentID.pdf\">\n                                                        {({ blob, url, loading, error }) => (loading ? '' : <CloudDownloadIcon />)}\n                                                    </PDFDownloadLink>: null}\n                                                </li> */}\n                                                <li className=\"p-2\">{stateDownloadIcon?<a href=\"#\"  download target=\"_blank\" rel=\"noopener noreferrer\"> <PrintIcon /> </a>:null}</li>\n                                            </ul>\n                                            \n                                        </div>\n                                        <CardHeader\n                                            \n                                            className=\"p-4 largeSize\"\n                                            avatar = {\n                                                <Avatar className=\"bg-info\">\n                                                    {` ${oneStudentdata ?  oneStudentdata.oneStudent.givenname.substring(0,1).toUpperCase() : null}`}\n                                                </Avatar>\n                                            }\n                                            \n                                            title = {`${oneStudentdata ? \"ABOUT\".concat(\" \",oneStudentdata.oneStudent.familyname,\" \",oneStudentdata.oneStudent.givenname).toUpperCase() : null}`}\n                                            subheader={`${new Date().toLocaleDateString()}`}\n                                        />\n                                        \n                                    \n                                        <Grid container  spacing={0} >\n\n                                                <Grid item xs={12}  md={4}  className=\"text-center\" >\n                                                \n                                                <div style={{display:displayState.studentImageEditon}} className=\"centralize\" \n                                                    \n                                                    onMouseOver={\n                                                        ()=>setDisplayEditIconState((prev)=>({\n                                                                ...prev,\n                                                                studentImageIconEditOff:\"inline\"\n                                                                \n                                                            }))\n                                                        }\n                                                    onMouseOut={\n                                                        ()=>setDisplayEditIconState((prev)=>({\n                                                            ...prev,\n                                                            studentImageIconEditOff:\"none\"\n                                                            \n                                                        }))\n                                                    }    \n                                                        > \n                                                    <div style={{display:displayEditIconState.studentImageIconEditOff}} >\n\n                                                        <Button  onClick={()=>{\n                                                                setDisplayState((prev)=>({\n                                                                    ...prev,\n                                                                    studentImageEditOff:\"inline\",\n                                                                    studentImageEditon:\"none\"\n                                                                }))\n                                                            }}><EditIcon />\n                                                        </Button>\n\n                                                        <Button>\n                                                            <DeleteForeverIcon />\n                                                        </Button>\n                                                    </div>\n                                                    {imageState ? <img  src={imageState} className=\"studentImage\"/> : <img  src={defaultImage} className=\"studentImage\"/>}\n                                                </div>\n                                                <div style={{display:displayState.studentImageEditOff}}>\n                                                    <div>  \n                                                        <label htmlFor=\"image\" className=\"bg-info\">\n                                                            \n                                                                <AddIcon fontSize=\"large\" color=\"primary\"/>\n                                                            \n                                                        </label>\n                                                        <Button onClick={()=>{\n                                                                setDisplayState((prev)=>({\n                                                                    ...prev,\n                                                                    studentImageEditOff:\"none\",\n                                                                    studentImageEditon:\"inline\"\n                                                                }))\n                                                            }}><CloseIcon />\n                                                        </Button>\n                                                        <Button onClick={async ()=>{\n                                                                let studentImageEdit = await fetch(\"/api/studentapi\",{\n                                                                    body: JSON.stringify(\n                                                                        {\n                                                                            studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                            imageEditValue:state.imagedataBack\n                                                                        }),\n                                                                    method:\"PUT\"\n                                                                })\n                                                                setDisplayState((prev)=>({\n                                                                    ...prev,\n                                                                    studentImageEditOff:\"none\",\n                                                                    studentImageEditon:\"inline\"\n                                                                }))\n                                                            }}><DoneIcon />         \n                                                        </Button>\n                                                    </div>\n\n                                                    <div className=\"bg-info text-center\">\n                                                        <TextField \n                                                            // component={TextField}\n                                                            // error={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? true : false }\n                                                            \n                                                            // label={errors.hasOwnProperty(\"imageholder\") && touched.hasOwnProperty(\"imageholder\") ? errors.imageholder : \"image\" }\n                                                            disabled\n                                                            name=\"imageholder\"\n                                                            id=\"imageholder\"\n                                                            className=\"w-100 bg-light text-danger\"\n                                                            // {...getFieldProps(\"imageholder\")}\n                                                            value={state.filename} />\n                                                        <h4 style={{display:state.imagesizeError,color:\"red\"}} >Image size less than 1MB</h4>\n                                                        <Field\n                                                            // width=\"200cm\"\n                                                            // height=\"200cm\"\n                                                            className=\"border border-info rounded-circle m-0 p-0 bg-secondary\"\n                                                            // onerror=\"this.onerror=null;this.src='./default.jpg';\"\n                                                            // component={(params)=><img {...params} src={state}/>}\n                                                            component={params=>{\n                                                            if(state.imagedataBack){\n                                                                return <img {...params} src={state.imagedataBack}/>\n                                                            }\n                                                            else{\n                                                                return <img  {...params} src={defaultImage}/>\n                                                            }\n                                                            }\n                                                        }\n                                                            />\n                                                    </div> \n                                                    \n                                                    <Field\n                                                        // error={errors.hasOwnProperty(\"image\") && touched.hasOwnProperty(\"image\") ? true : false }\n                                                        // {...getFieldProps(\"image\")}\n                                                        // label={errors.hasOwnProperty(\"image\") && touched.hasOwnProperty(\"image\") ? errors.DateOfBirth : \"image\" }\n                                                        // value={values.image}\n                                                        // name=\"image\"\n                                                        id=\"image\"\n                                                        component={Input}\n                                                        className=\"w-100 d-none\"\n                                                        variant=\"filled\"\n                                                        type=\"file\"\n                                                        accept=\".jpg, .jpeg, .png\"\n                                                        // multiple\n                                                        onChange={(event)=>{\n                                                            // handleChange\n                                                            let fileList = event.target.files\n\n                                                            const formData = new FormData()\n                                                            \n                                                            for(const file of fileList){\n                                                                const name = file.name ? file.name : 'NOT SUPPORTED';\n\n                                                                const type = file.type ? file.type : 'NOT SUPPORTED';\n\n                                                                const size = file.size ? file.size : 'NOT SUPPORTED';\n\n                                                                        if (file.type && file.type.indexOf('image') === -1) {\n                                                                            console.log('File is not an image.', file.type, file,file.type.indexOf('image'));\n                                                                            return;\n                                                                        }\n                                                                        if(file.size > 1000000){\n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                filename:null,\n                                                                                imagedataBack:null,\n                                                                                imagesizeError:\"inline\"\n                                                                            }))\n                                                                            return\n                                                                        }\n                                                                        const reader = new FileReader();\n                                                                        \n                                                                        reader.addEventListener('load', (event) => {\n                                                                            \n                                                                            setstate((prev)=>({\n                                                                                ...prev,\n                                                                                imagedataBack:event.target.result,\n                                                                                filename:file.name\n                                                                            }))\n                                                                            console.log(\"filename::\",state.filename)\n                                                                            \n                                                                        });\n                                                                        reader.readAsDataURL(file)\n\n                                                                        formData.append(\"file\",file)\n                                                                    \n                                                            }\n                                                            // setFieldValue(\"image\",fileList[0].name)\n                                                            \n                                                            \n                                                            // handleChange(event)\n                                                        }}\n                                                        />\n                                                        \n                                                    \n                                                      \n                                                    </div>     \n                                                </Grid>\n                                                {/* <Grid item xs={12}  md={4} className=\"bg-info text-center\" style={{display:displayState.studentImageEditOff}}> */}\n                                                    {/* <FastField */}\n                                                    \n\n                                                        \n                                                {/* </Grid> */}\n                                                \n                                        \n                                            <Grid item container  xs={12} md={8} spacing={0}>\n                                                \n                                                <TableContainer >\n                                                    <Table size=\"small\" stickyHeader={true} padding=\"default\" >\n                                                        {/* <TableHead> */}\n                                                        <TableBody>\n                                                            <TableRow hover role=\"checkbox\" tabIndex={-1} >\n                                                                <TableCell colSpan=\"2\"className=\"bg-info\" >\n                                                                    <div className=\"bolder\">Student Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover role=\"checkbox\" tabIndex={-1} >\n                                                                <TableCell colSpan=\"2\">\n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    shortBioIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                shortBioIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        <div className=\"bolder\">\n                                                                            Biography\n                                                                        </div>\n                                                                            <span style={{display:displayState.shortBioEditOn}}>\n                                                                                <span >\n                                                                                    {oneStudentdata ? oneStudentdata.oneStudent.shortbiography : null}\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.shortBioIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                shortBioEditOff: \"inline\",\n                                                                                                shortBioEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.shortBioEditOff}}>\n                                                                            <Field\n                                                                                // error={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? true : false }\n                                                                                {...getFieldProps(\"shortBio\")}\n                                                                                label={errors.hasOwnProperty(\"shortBio\") && touched.hasOwnProperty(\"shortBio\") ? errors.shortBio : \"shortBio\" }\n                                                                                value={values.shortBio}\n                                                                                name=\"shortBio\"\n                                                                                id=\"shortBio\"\n                                                                                // component={()=><textarea></textarea>}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                as=\"textarea\"\n                                                                                \n                                                                            />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        shortBioEditOff:\"none\",\n                                                                                        shortBioEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                shortbiography:values.shortBio\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        shortBioEditOff:\"none\",\n                                                                                        shortBioEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                    \n                                                                </TableCell>\n                                                                \n                                                            </TableRow>\n                                                            <TableRow>\n                                                                <TableCell>\n                                                                    Family Name\n                                                                </TableCell>\n                                                                <TableCell >\n                                                                    \n                                                                    \n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    \n                                                                                    FamilyNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                FamilyNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.FamilyNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.familyname : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FamilyNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                FamilyNameEditOff: \"inline\",\n                                                                                                FamilyNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.FamilyNameEditOff}}>\n                                                                        <Field\n                                                                            error={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? true : false }\n                                                                            {...getFieldProps(\"FamilyName\")}\n                                                                            label={errors.hasOwnProperty(\"FamilyName\") && touched.hasOwnProperty(\"FamilyName\") ? errors.FamilyName : \"Family Name\" }\n                                                                            value={values.FamilyName}\n                                                                            name=\"FamilyName\"\n                                                                            id=\"FamilyName\"\n                                                                            component={TextField}\n                                                                            className=\"w-100\"\n                                                                            variant=\"filled\"\n                                                                            \n                                                                            />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FamilyNameEditOff:\"none\",\n                                                                                        FamilyNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                familyname:values.FamilyName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FamilyNameEditOff:\"none\",\n                                                                                        FamilyNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n\n\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Given Name\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    GivenNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                GivenNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.GivenNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.givenname : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.GivenNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                GivenNameEditOff: \"inline\",\n                                                                                                GivenNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.GivenNameEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? true : false }\n                                                                                {...getFieldProps(\"GivenName\")}\n                                                                                label={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? errors.GivenName : \"Given Name\" }\n                                                                                value={values.GivenName}\n                                                                                name=\"GivenName\"\n                                                                                id=\"GivenName\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GivenNameEditOff:\"none\",\n                                                                                        GivenNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                givenname:values.GivenName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GivenNameEditOff:\"none\",\n                                                                                        GivenNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow>\n                                                                <TableCell  >\n                                                                    Admision ID\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.AdmissionID : null}</span>\n                                                                {/* <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    AdmissionIDIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                AdmissionIDIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.AdmissionIDEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.AdmissionID : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.AdmissionIDIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                AdmissionIDEditOff: \"inline\",\n                                                                                                AdmissionIDEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.AdmissionIDEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? true : false }\n                                                                                {...getFieldProps(\"GivenName\")}\n                                                                                label={errors.hasOwnProperty(\"GivenName\") && touched.hasOwnProperty(\"GivenName\") ? errors.GivenName : \"Given Name\" }\n                                                                                value={values.GivenName}\n                                                                                name=\"GivenName\"\n                                                                                id=\"GivenName\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        AdmissionIDEditOff:\"none\",\n                                                                                        AdmissionIDEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                AdmissionID:values.AdmissionID\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        AdmissionIDEditOff:\"none\",\n                                                                                        AdmissionIDEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>  */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell >\n                                                                    Date of Birth\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    DateOfBirthIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                DateOfBirthIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.DateOfBirthEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? new Date(oneStudentdata.oneStudent.dateofbirth).toLocaleDateString() : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.DateOfBirthIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                DateOfBirthEditOff: \"inline\",\n                                                                                                DateOfBirthEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.DateOfBirthEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? true : false }\n                                                                                {...getFieldProps(\"DateOfBirth\")}\n                                                                                label={errors.hasOwnProperty(\"DateOfBirth\") && touched.hasOwnProperty(\"DateOfBirth\") ? errors.DateOfBirth : \"Date Of Birth\" }\n                                                                                value={values.DateOfBirth}\n                                                                                name=\"DateOfBirth\"\n                                                                                id=\"DateOfBirth\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                type=\"date\"\n                                                                                InputLabelProps={{\n                                                                                    shrink:true\n                                                                                }}\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        DateOfBirthEditOff:\"none\",\n                                                                                        DateOfBirthEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                dateofbirth:values.DateOfBirth\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        DateOfBirthEditOff:\"none\",\n                                                                                        DateOfBirthEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>   \n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Age\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    <div className=\"bolder\">{oneStudentdata ?new Date().getFullYear() - new Date(oneStudentdata.oneStudent.dateofbirth).getFullYear()  : null}</div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Blood Group\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    BloodGroupIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                BloodGroupIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.BloodGroupEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.bloodgroup : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.BloodGroupIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                BloodGroupEditOff: \"inline\",\n                                                                                                BloodGroupEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.BloodGroupEditOff}}>\n                                                                            <Field\n                                                                \n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={values.BloodGroup}\n                                                                                defaultValue={values.BloodGroup}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(\"BloodGroup\", selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                \n                                                                                options={bloodgroupdata}\n                                                                                name=\"BloodGroup\"\n                                                                                id=\"BloodGroup\"\n                                                                                getOptionSelected={(option,value)=>option.group == value.group}\n                                                                                getOptionLabel={option => option.group}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                    component={TextField}\n                                                                                    {...params}\n                                                                                    \n                                                                                    name=\"BloodGroup\"\n                                                                                    error={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? true : false }\n                                                                                    label={errors.hasOwnProperty(\"BloodGroup\") && touched.hasOwnProperty(\"BloodGroup\") ? errors.BloodGroup : \"BloodGroup\" }\n                                                                                    variant=\"filled\"    \n                                                                                    \n                                                                                />\n                                                                                    </>\n                                                                                \n                                                                                )}\n                                                                            />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        BloodGroupEditOff:\"none\",\n                                                                                        BloodGroupEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                bloodgroup:values.BloodGroup\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        BloodGroupEditOff:\"none\",\n                                                                                        BloodGroupEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>   \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Gender\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GenderIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    GenderIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                        \n                                                                            <span style={{display:displayState.GenderEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.GenderIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                GenderEditOff: \"inline\",\n                                                                                                GenderEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.GenderEditOff}}>\n                                                                        <Field\n                                                        \n                                                                                component={Autocomplete}\n                                                                                // {...getFieldProps(\"Gender\")}\n                                                                                value={values.Gender}\n                                                                                onBlur={handleBlur}\n                                                                                onChange={(e,selectedOption )=>\n                                                                                    {setFieldValue(\"Gender\", selectedOption)\n                                                                                    //  setFieldError(\"Gender\",errors.Gender)\n                                                                                        }\n                                                                                }\n                                                                                \n                                                                                // inputValue={values.Gender.title}\n                                                                                options={genderdata}\n                                                                                name=\"Gender\"\n                                                                                id=\"Gender\"\n                                                                                \n                                                                                getOptionSelected = {(option,value)=> option.gender == value.gender}\n                                                                                getOptionLabel={option => option.gender}\n                                                                                renderInput={params => (\n                                                                                    <>\n                                                                                    \n                                                                                    <Field \n                                                                                    component={TextField}\n                                                                                    {...params}\n                                                                                    \n                                                                                    name=\"Gender\"\n                                                                                    error={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? true : false }\n                                                                                    label={errors.hasOwnProperty(\"Gender\") && touched.hasOwnProperty(\"Gender\") ? errors.Gender : \"Gender\" }\n                                                                                    variant=\"filled\"    \n                                                                                    \n                                                                                />\n                                                                                    </>\n                                                                                \n                                                                                )}\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GenderEditOff:\"none\",\n                                                                                        GenderEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                gender:values.Gender\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        GenderEditOff:\"none\",\n                                                                                        GenderEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>  \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Email\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    eMailIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                eMailIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.eMailEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.email : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.eMailIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                eMailEditOff: \"inline\",\n                                                                                                eMailEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.eMailEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? true : false }\n                                                                                {...getFieldProps(\"eMail\")}\n                                                                                label={errors.hasOwnProperty(\"eMail\") && touched.hasOwnProperty(\"eMail\") ? errors.eMail : \"email\" }\n                                                                                value={values.eMail}\n                                                                                name=\"eMail\"\n                                                                                id=\"eMail\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                type=\"email\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        eMailEditOff:\"none\",\n                                                                                        eMailEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                email:values.eMail\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        eMailEditOff:\"none\",\n                                                                                        eMailEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                    \n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Phone Number\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div \n                                                                            onMouseOver={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        PhoneIconEditOff:\"inline\"\n                                                                                        \n                                                                                    }))\n                                                                                }\n                                                                            onMouseOut={\n                                                                                ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    PhoneIconEditOff:\"none\"\n                                                                                    \n                                                                                }))\n                                                                        } >\n                                                                            \n                                                                                <span style={{display:displayState.PhoneEditOn}}>\n                                                                                    <span >\n                                                                                        <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.phonenumber : null}</span>\n                                                                                    </span>\n                                                                                    <span style={{display:displayEditIconState.PhoneIconEditOff}}>\n\n                                                                                        <Button  onClick={()=>{\n                                                                                                setDisplayState((prev)=>({\n                                                                                                    ...prev,\n                                                                                                    \n                                                                                                    PhoneEditOff: \"inline\",\n                                                                                                    PhoneEditOn:\"none\"\n                                                                                                }))\n                                                                                            }}><EditIcon />\n                                                                                        </Button>\n\n                                                                                        <Button>\n                                                                                            <DeleteForeverIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                            \n                                                                                    \n                                                                                </span>\n                                                                            <span style={{display:displayState.PhoneEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"Phone\") && touched.hasOwnProperty(\"Phone\") ? true : false }\n                                                                                        {...getFieldProps(\"Phone\")}\n                                                                                        label={errors.hasOwnProperty(\"Phone\") && touched.hasOwnProperty(\"Phone\") ? errors.Phone : \"Phone\" }\n                                                                                        value={values.Phone}\n                                                                                        name=\"Phone\"\n                                                                                        id=\"Phone\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        type=\"tel\"\n                                                                                        \n                                                                                        \n                                                                                        />\n                                                                                <Button onClick={()=>{\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            PhoneEditOff:\"none\",\n                                                                                            PhoneEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><CloseIcon />\n                                                                                </Button>\n                                                                                <Button onClick={async ()=>{\n                                                                                        let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                            body: JSON.stringify(\n                                                                                                {\n                                                                                                    studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                    phonenumber:values.Phone\n                                                                                                }),\n                                                                                            method:\"PUT\"\n                                                                                        })\n                                                                                        setDisplayState((prev)=>({\n                                                                                            ...prev,\n                                                                                            PhoneEditOff:\"none\",\n                                                                                            PhoneEditOn:\"inline\"\n                                                                                        }))\n                                                                                    }}><DoneIcon />\n                                                                                </Button>\n                                                                            </span>\n                                                                        </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Religion\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    ReligionIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                ReligionIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.ReligionEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.religion : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.ReligionIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                ReligionEditOff: \"inline\",\n                                                                                                ReligionEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.ReligionEditOff}}>\n                                                                            <Field\n                                                            \n                                                                                    component={Autocomplete}\n                                                                                    // {...getFieldProps(\"Gender\")}\n                                                                                    value={values.Religion}\n                                                                                    defaultValue={values.Religion}\n                                                                                    onBlur={handleBlur}\n                                                                                    onChange={(e,selectedOption )=>\n                                                                                        {setFieldValue(\"Religion\", selectedOption)\n                                                                                        //  setFieldError(\"Gender\",errors.Gender)\n                                                                                            }\n                                                                                    }\n                                                                                    \n                                                                                    // inputValue={values.Gender.title}\n                                                                                    options={religiondata}\n                                                                                    name=\"Religion\"\n                                                                                    id=\"Religion\"\n                                                                                    getOptionSelected = {(option,value)=> option.doctrine == value.doctrine}\n                                                                                    getOptionLabel={option => option.doctrine}\n                                                                                    renderInput={params => (\n                                                                                        <>\n                                                                                        \n                                                                                        <Field \n                                                                                        component={TextField}\n                                                                                        {...params}\n                                                                                        \n                                                                                        name=\"Religion\"\n                                                                                        error={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? true : false }\n                                                                                        label={errors.hasOwnProperty(\"Religion\") && touched.hasOwnProperty(\"Religion\") ? errors.Religion : \"Religion\" }\n                                                                                        variant=\"filled\"    \n                                                                                        \n                                                                                    />\n                                                                                        </>\n                                                                                    \n                                                                                    )}\n\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        ReligionEditOff:\"none\",\n                                                                                        ReligionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                religion:values.Religion\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        ReligionEditOff:\"none\",\n                                                                                        ReligionEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Date of errollment\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    <div className=\"bolder\">\n                                                                        {oneStudentdata ? new Date(oneStudentdata.oneStudent.dateOfEnrollment).toLocaleDateString() : null}\n                                                                        <div>{oneStudentdata ? new Date(oneStudentdata.oneStudent.dateOfEnrollment).toLocaleTimeString() : null}</div>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            \n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Address\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    StudentAddressIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                StudentAddressIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.StudentAddressEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.StudentAddress : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.StudentAddressIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                StudentAddressEditOff: \"inline\",\n                                                                                                StudentAddressEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                            <span style={{display:displayState.StudentAddressEditOff}}>\n                                                                                <Field\n                                                                                        error={errors.hasOwnProperty(\"StudentAddress\") && touched.hasOwnProperty(\"StudentAddress\") ? true : false }\n                                                                                        {...getFieldProps(\"StudentAddress\")}\n                                                                                        label={errors.hasOwnProperty(\"StudentAddress\") && touched.hasOwnProperty(\"StudentAddress\") ? errors.StudentAddress : \"StudentAddress\" }\n                                                                                        value={values.StudentAddress}\n                                                                                        name=\"StudentAddress\"\n                                                                                        id=\"StudentAddress\"\n                                                                                        component={TextField}\n                                                                                        className=\"w-100\"\n                                                                                        variant=\"filled\"\n                                                                                        \n                                                                                        \n                                                                                    />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        StudentAddressEditOff:\"none\",\n                                                                                        StudentAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                StudentAddress:values.StudentAddress\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        StudentAddressEditOff:\"none\",\n                                                                                        StudentAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                            \n                                                                <TableCell  colSpan=\"2\" className=\"bg-info\">\n                                                                    <div className=\"bolder\">Guadiant Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Guidant Name\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Relationship\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Occupation\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Address\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Email\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                    {/* <div className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.Gender.gender : null}</div> */}\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell colSpan=\"2\"  className=\"bg-info\">\n                                                                    <div className=\"bolder\">Parents Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell colSpan=\"2\"  className=\"bg-info pl-4\">\n                                                                    <div className=\"bolder\">Father Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Father Name\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    FatherNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                FatherNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.FatherNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.FatherName : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FatherNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                FatherNameEditOff: \"inline\",\n                                                                                                FatherNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                            <span style={{display:displayState.FatherNameEditOff}}>\n                                                                                <Field\n                                                                                    error={errors.hasOwnProperty(\"FatherName\") && touched.hasOwnProperty(\"FatherName\") ? true : false }\n                                                                                    {...getFieldProps(\"FatherName\")}\n                                                                                    label={errors.hasOwnProperty(\"FatherName\") && touched.hasOwnProperty(\"FatherName\") ? errors.FatherName : \"FatherName\" }\n                                                                                    value={values.FatherName}\n                                                                                    name=\"FatherName\"\n                                                                                    id=\"FatherName\"\n                                                                                    component={TextField}\n                                                                                    className=\"w-100\"\n                                                                                    variant=\"filled\"\n                                                                                    \n                                                                                    />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherNameEditOff:\"none\",\n                                                                                        FatherNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                FatherName:values.FatherName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherNameEditOff:\"none\",\n                                                                                        FatherNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Father occupation\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    FatherOccupationIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                FatherOccupationIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.FatherOccupationEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.FatherOccupation : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FatherOccupationIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                FatherOccupationEditOff: \"inline\",\n                                                                                                FatherOccupationEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.FatherOccupationEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"FatherOccupation\") && touched.hasOwnProperty(\"FatherOccupation\") ? true : false }\n                                                                                {...getFieldProps(\"FatherOccupation\")}\n                                                                                label={errors.hasOwnProperty(\"FatherOccupation\") && touched.hasOwnProperty(\"FatherOccupation\") ? errors.FatherOccupation : \"FatherOccupation\" }\n                                                                                value={values.FatherOccupation}\n                                                                                name=\"FatherOccupation\"\n                                                                                id=\"FatherOccupation\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherOccupationEditOff:\"none\",\n                                                                                        FatherOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                FatherOccupation:values.FatherOccupation\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherOccupationEditOff:\"none\",\n                                                                                        FatherOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Father Address\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                        <div \n                                                                                onMouseOver={\n                                                                                    ()=>setDisplayEditIconState((prev)=>({\n                                                                                            ...prev,\n                                                                                            FatherAddressIconEditOff:\"inline\"\n                                                                                            \n                                                                                        }))\n                                                                                    }\n                                                                                onMouseOut={\n                                                                                    ()=>setDisplayEditIconState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherAddressIconEditOff:\"none\"\n                                                                                        \n                                                                                    }))\n                                                                            } >\n                                                                        \n                                                                            <span style={{display:displayState.FatherAddressEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.FatherAddress : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FatherAddressIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                FatherAddressEditOff: \"inline\",\n                                                                                                FatherAddressEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.FatherAddressEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"FatherAddress\") && touched.hasOwnProperty(\"FatherAddress\") ? true : false }\n                                                                                {...getFieldProps(\"FatherAddress\")}\n                                                                                label={errors.hasOwnProperty(\"FatherAddress\") && touched.hasOwnProperty(\"FatherAddress\") ? errors.FatherAddress : \"FatherAddress\" }\n                                                                                value={values.FatherAddress}\n                                                                                name=\"FatherAddress\"\n                                                                                id=\"FatherAddress\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherAddressEditOff:\"none\",\n                                                                                        FatherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                FatherAddress:values.FatherAddress\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherAddressEditOff:\"none\",\n                                                                                        FatherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Father Contact\n                                                                </TableCell>\n                                                                <TableCell  >\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    FatherContactIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                FatherContactIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.FatherContactEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.FatherContact : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.FatherContactIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                FatherContactEditOff: \"inline\",\n                                                                                                FatherContactEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.FatherContactEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"FatherContact\") && touched.hasOwnProperty(\"FatherContact\") ? true : false }\n                                                                                {...getFieldProps(\"FatherContact\")}\n                                                                                label={errors.hasOwnProperty(\"FatherContact\") && touched.hasOwnProperty(\"FatherContact\") ? errors.FatherContact : \"FatherContact\" }\n                                                                                value={values.FatherContact}\n                                                                                name=\"FatherContact\"\n                                                                                id=\"FatherContact\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherContactEditOff:\"none\",\n                                                                                        FatherContactEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                FatherContact:values.FatherContact\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        FatherContactEditOff:\"none\",\n                                                                                        FatherContactEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow hover>\n                                                                <TableCell colSpan=\"2\"  className=\"bg-info pl-4\">\n                                                                    <div className=\"bolder\">Mother Information</div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Mother Name\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    MotherNameIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                MotherNameIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.MotherNameEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.MotherName : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.MotherNameIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                MotherNameEditOff: \"inline\",\n                                                                                                MotherNameEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.MotherNameEditOff}}>\n                                                                            <Field\n                                                                                    error={errors.hasOwnProperty(\"MotherName\") && touched.hasOwnProperty(\"MotherName\") ? true : false }\n                                                                                    {...getFieldProps(\"MotherName\")}\n                                                                                    label={errors.hasOwnProperty(\"MotherName\") && touched.hasOwnProperty(\"MotherName\") ? errors.MotherName : \"MotherName\" }\n                                                                                    value={values.MotherName}\n                                                                                    name=\"MotherName\"\n                                                                                    id=\"MotherName\"\n                                                                                    component={TextField}\n                                                                                    className=\"w-100\"\n                                                                                    variant=\"filled\"\n                                                                                    \n                                                                                    />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherNameEditOff:\"none\",\n                                                                                        MotherNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                MotherName:values.MotherName\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherNameEditOff:\"none\",\n                                                                                        MotherNameEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Mother Occupation\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    MotherOccupationIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                MotherOccupationIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.MotherOccupationEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.MotherOccupation : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.MotherOccupationIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                MotherOccupationEditOff: \"inline\",\n                                                                                                MotherOccupationEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.MotherOccupationEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"MotherOccupation\") && touched.hasOwnProperty(\"MotherOccupation\") ? true : false }\n                                                                                {...getFieldProps(\"MotherOccupation\")}\n                                                                                label={errors.hasOwnProperty(\"MotherOccupation\") && touched.hasOwnProperty(\"MotherOccupation\") ? errors.MotherOccupation : \"MotherOccupation\" }\n                                                                                value={values.MotherOccupation}\n                                                                                name=\"MotherOccupation\"\n                                                                                id=\"MotherOccupation\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherOccupationEditOff:\"none\",\n                                                                                        MotherOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                MotherOccupation:values.MotherOccupation\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherOccupationEditOff:\"none\",\n                                                                                        MotherOccupationEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Mother Address\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    MotherAddressIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                MotherAddressIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.MotherAddressEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.MotherAddress : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.MotherAddressIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                MotherAddressEditOff: \"inline\",\n                                                                                                MotherAddressEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.MotherAddressEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"MotherAddress\") && touched.hasOwnProperty(\"MotherAddress\") ? true : false }\n                                                                                {...getFieldProps(\"MotherAddress\")}\n                                                                                label={errors.hasOwnProperty(\"MotherAddress\") && touched.hasOwnProperty(\"MotherAddress\") ? errors.MotherAddress : \"MotherAddress\" }\n                                                                                value={values.MotherAddress}\n                                                                                name=\"MotherAddress\"\n                                                                                id=\"MotherAddress\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherAddressEditOff:\"none\",\n                                                                                        MotherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                MotherAddress:values.MotherAddress\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherAddressEditOff:\"none\",\n                                                                                        MotherAddressEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            <TableRow hover>\n                                                                <TableCell  >\n                                                                    Mother Contact\n                                                                </TableCell>\n                                                                <TableCell  >\n\n                                                                <div \n                                                                        onMouseOver={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                    ...prev,\n                                                                                    MotherContactIconEditOff:\"inline\"\n                                                                                    \n                                                                                }))\n                                                                            }\n                                                                        onMouseOut={\n                                                                            ()=>setDisplayEditIconState((prev)=>({\n                                                                                ...prev,\n                                                                                MotherContactIconEditOff:\"none\"\n                                                                                \n                                                                            }))\n                                                                    } >\n                                                                        \n                                                                            <span style={{display:displayState.MotherContactEditOn}}>\n                                                                                <span >\n                                                                                    <span className=\"bolder\">{oneStudentdata ? oneStudentdata.oneStudent.MotherContact : null}</span>\n                                                                                </span>\n                                                                                <span style={{display:displayEditIconState.MotherContactIconEditOff}}>\n\n                                                                                    <Button  onClick={()=>{\n                                                                                            setDisplayState((prev)=>({\n                                                                                                ...prev,\n                                                                                                \n                                                                                                MotherContactEditOff: \"inline\",\n                                                                                                MotherContactEditOn:\"none\"\n                                                                                            }))\n                                                                                        }}><EditIcon />\n                                                                                    </Button>\n\n                                                                                    <Button>\n                                                                                        <DeleteForeverIcon />\n                                                                                    </Button>\n                                                                                </span>\n                                                                        \n                                                                                \n                                                                            </span>\n                                                                        <span style={{display:displayState.MotherContactEditOff}}>\n                                                                            <Field\n                                                                                error={errors.hasOwnProperty(\"MotherContact\") && touched.hasOwnProperty(\"MotherContact\") ? true : false }\n                                                                                {...getFieldProps(\"FatherContact\")}\n                                                                                label={errors.hasOwnProperty(\"MotherContact\") && touched.hasOwnProperty(\"MotherContact\") ? errors.MotherContact : \"MotherContact\" }\n                                                                                value={values.MotherContact}\n                                                                                name=\"MotherContact\"\n                                                                                id=\"MotherContact\"\n                                                                                component={TextField}\n                                                                                className=\"w-100\"\n                                                                                variant=\"filled\"\n                                                                                \n                                                                                />\n                                                                            <Button onClick={()=>{\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherContactEditOff:\"none\",\n                                                                                        MotherContactEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><CloseIcon />\n                                                                            </Button>\n                                                                            <Button onClick={async ()=>{\n                                                                                    let studentbiography = await fetch(\"/api/studentapi\",{\n                                                                                        body: JSON.stringify(\n                                                                                            {\n                                                                                                studentID: \"GO10\", // THIS VALUE WILL BE entered with cookies\n                                                                                                MotherContact:values.MotherContact\n                                                                                            }),\n                                                                                        method:\"PUT\"\n                                                                                    })\n                                                                                    setDisplayState((prev)=>({\n                                                                                        ...prev,\n                                                                                        MotherContactEditOff:\"none\",\n                                                                                        MotherContactEditOn:\"inline\"\n                                                                                    }))\n                                                                                }}><DoneIcon />\n                                                                            </Button>\n                                                                        </span>\n                                                                    </div>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        {/* </TableHead> */}\n                                                        \n                                                            <TableRow></TableRow>\n                                                        </TableBody>\n                                                    </Table>\n                                                </TableContainer>\n                                            </Grid>\n                                            \n                                        </Grid>\n                                    {/* </PdfConverter> */}\n                                    \n                                </Card>\n\n                            </Form>\n\n                            )\n                        }\n                    }\n                   \n                </Formik>\n                \n            </Wrapper>\n       \n    )\n}\n\n\n","import React from \"react\"\nimport Dashboard from \"./Dashboard\"\nimport {Wrapper,Grid} from \"./styles\"\nimport {Layout} from \"components/common\"\nimport { Footer,Header } from 'components/theme';\nimport {Section} from \"./Sections/addNewSection\"\nimport {AllSection} from \"./Sections/AllSections\"\nimport {AddSubjects} from \"./Subject/AddNewSubject\"\nimport {Subject} from \"./Subject/AllSubjects\"\nimport {SubjectToClass} from \"./Subject/assignSubjectToClass\"\nimport {SubjectClassTable} from \"./Subject/SubjectClassTable\"\nimport {AddClass} from \"./Classes/AddNewClass\"\nimport {AllClasses} from \"./Classes/AllClasses\"\nimport {GeneralInput} from \"./GeneralInput\"\n\nimport {TeacherDetails,StaffTable,StaffForm,TeacherClassSubject} from \"./Teacher\"\n\n// import {StaffDetails} from \"./Teacher/TeacherDetails\"\n\nimport {StudentDetails,StudentTable,AdmissionForm,StudentClassSubject} from \"./Student\"\n\n\n// import {ParentRegistrationForm} from \"./Parents/AddParent\"\n// import {ParentsDetails} from \"./Parents/ParentDetail\"\n\nimport {ParentRegistrationForm,ParentsDetails} from \"./Parents\"\n\nimport {ReportCard} from \"./ReportCard\"\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n} from \"react-router-dom\"\n\nexport const Admin = ()=>{\n\n    return(\n        <Wrapper>\n            <Router>\n                <Header />\n\n                \n                \n                <Layout>\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <Dashboard />\n                        </Route>\n                        <Route path=\"/AddNewSection\" exact>\n                            <Section />\n                        </Route>\n                        <Route path=\"/AllSection\">\n                            <AllSection />\n                        </Route>\n                        <Route path=\"/AddSubjects\">\n                            <AddSubjects />\n                        </Route>\n                        <Route path=\"/AllSubject\">\n                            <Subject />\n                        </Route>\n                        <Route path=\"/SubjectToClass\">\n                            <SubjectToClass />\n                        </Route>\n                        <Route path=\"/SubjectClassTable\">\n                            <SubjectClassTable />\n                        </Route>\n                        <Route path=\"/AddClass\">\n                            <AddClass />\n                        </Route>\n                        <Route path=\"/AllClasses\">\n                            <AllClasses />\n                        </Route>\n                        \n                        <Route path=\"/GeneralInput\">\n                            <GeneralInput />\n                        </Route>\n\n                        <Route path=\"/AdminDashboard\">\n                            <Dashboard />\n                        </Route>\n                        \n                        <Route path=\"/StaffsInfo\">\n                            <StaffTable/>\n                        </Route>\n\n                        <Route path=\"/TeacherDetails\">\n                            <TeacherDetails />\n                        </Route>\n                        \n                        <Route path=\"/StaffForm\">\n                            <StaffForm />\n                        </Route>\n\n                        <Route path=\"/TeacherClassSubject\">\n                            <TeacherClassSubject />\n                        </Route>\n\n                        <Route path=\"/StudentDetails\">\n                            <StudentDetails />\n                        </Route>\n                        <Route path=\"/StudentInfo\"> \n                            <StudentTable />\n                        </Route>\n                        <Route path=\"/AdmissionForm\">\n                            <AdmissionForm />\n                        </Route>\n                        <Route path=\"/AssignClassStudent\">\n                            <StudentClassSubject />\n                        </Route>\n                        <Route path=\"/StudentPromotion\">\n                            {/* <StudentClassSubject /> */}\n                        </Route>\n                        <Route path=\"/StudentDemotion\">\n                            {/* <StudentClassSubject /> */}\n                        </Route>\n\n                        <Route path=\"/ParentRegistrationForm\">\n                            <ParentRegistrationForm />\n                        </Route>\n                        <Route path=\"/ParentsDetails\">\n                            <ParentsDetails />\n                        </Route>\n                        <Route path=\"/ReportTemplate\">\n                            <ReportCard/>\n                        </Route>\n                    </Switch>\n                </Layout>\n            </Router>\n        </Wrapper>\n    )\n}","import React, {createContext} from 'react'\n// import {HomePage} from \"pages\"\nimport ThemeProvider from \"providers/ThemeProvider\"\n// import \"dotenv\"\nimport {Admin} from \"components/modules/Admin\"\n\n\nexport const LinkContext = createContext();\n\nfunction App() {\n\n \n\n  return (\n    <div className=\"App\">\n      <ThemeProvider>\n        \n        <Admin />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}